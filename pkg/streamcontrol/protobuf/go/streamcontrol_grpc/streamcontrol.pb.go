// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: streamcontrol.proto

package streamcontrol_grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlatformEventType int32

const (
	PlatformEventType_platformEventTypeUndefined              PlatformEventType = 0
	PlatformEventType_platformEventTypeChatMessage            PlatformEventType = 1
	PlatformEventType_platformEventTypeCheer                  PlatformEventType = 2
	PlatformEventType_platformEventTypeAutoModHold            PlatformEventType = 3
	PlatformEventType_platformEventTypeAdBreak                PlatformEventType = 4
	PlatformEventType_platformEventTypeBan                    PlatformEventType = 5
	PlatformEventType_platformEventTypeFollow                 PlatformEventType = 6
	PlatformEventType_platformEventTypeRaid                   PlatformEventType = 7
	PlatformEventType_platformEventTypeChannelShoutoutReceive PlatformEventType = 8
	PlatformEventType_platformEventTypeSubscribe              PlatformEventType = 9
	PlatformEventType_platformEventTypeStreamOnline           PlatformEventType = 10
	PlatformEventType_platformEventTypeStreamOffline          PlatformEventType = 11
	PlatformEventType_platformEventTypeOther                  PlatformEventType = 12
)

// Enum value maps for PlatformEventType.
var (
	PlatformEventType_name = map[int32]string{
		0:  "platformEventTypeUndefined",
		1:  "platformEventTypeChatMessage",
		2:  "platformEventTypeCheer",
		3:  "platformEventTypeAutoModHold",
		4:  "platformEventTypeAdBreak",
		5:  "platformEventTypeBan",
		6:  "platformEventTypeFollow",
		7:  "platformEventTypeRaid",
		8:  "platformEventTypeChannelShoutoutReceive",
		9:  "platformEventTypeSubscribe",
		10: "platformEventTypeStreamOnline",
		11: "platformEventTypeStreamOffline",
		12: "platformEventTypeOther",
	}
	PlatformEventType_value = map[string]int32{
		"platformEventTypeUndefined":              0,
		"platformEventTypeChatMessage":            1,
		"platformEventTypeCheer":                  2,
		"platformEventTypeAutoModHold":            3,
		"platformEventTypeAdBreak":                4,
		"platformEventTypeBan":                    5,
		"platformEventTypeFollow":                 6,
		"platformEventTypeRaid":                   7,
		"platformEventTypeChannelShoutoutReceive": 8,
		"platformEventTypeSubscribe":              9,
		"platformEventTypeStreamOnline":           10,
		"platformEventTypeStreamOffline":          11,
		"platformEventTypeOther":                  12,
	}
)

func (x PlatformEventType) Enum() *PlatformEventType {
	p := new(PlatformEventType)
	*p = x
	return p
}

func (x PlatformEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamcontrol_proto_enumTypes[0].Descriptor()
}

func (PlatformEventType) Type() protoreflect.EnumType {
	return &file_streamcontrol_proto_enumTypes[0]
}

func (x PlatformEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformEventType.Descriptor instead.
func (PlatformEventType) EnumDescriptor() ([]byte, []int) {
	return file_streamcontrol_proto_rawDescGZIP(), []int{0}
}

type TextFormatType int32

const (
	TextFormatType_TEXT_FORMAT_TYPE_UNDEFINED TextFormatType = 0
	TextFormatType_TEXT_FORMAT_TYPE_PLAIN     TextFormatType = 1
	TextFormatType_TEXT_FORMAT_TYPE_MARKDOWN  TextFormatType = 2
	TextFormatType_TEXT_FORMAT_TYPE_HTML      TextFormatType = 3
)

// Enum value maps for TextFormatType.
var (
	TextFormatType_name = map[int32]string{
		0: "TEXT_FORMAT_TYPE_UNDEFINED",
		1: "TEXT_FORMAT_TYPE_PLAIN",
		2: "TEXT_FORMAT_TYPE_MARKDOWN",
		3: "TEXT_FORMAT_TYPE_HTML",
	}
	TextFormatType_value = map[string]int32{
		"TEXT_FORMAT_TYPE_UNDEFINED": 0,
		"TEXT_FORMAT_TYPE_PLAIN":     1,
		"TEXT_FORMAT_TYPE_MARKDOWN":  2,
		"TEXT_FORMAT_TYPE_HTML":      3,
	}
)

func (x TextFormatType) Enum() *TextFormatType {
	p := new(TextFormatType)
	*p = x
	return p
}

func (x TextFormatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextFormatType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamcontrol_proto_enumTypes[1].Descriptor()
}

func (TextFormatType) Type() protoreflect.EnumType {
	return &file_streamcontrol_proto_enumTypes[1]
}

func (x TextFormatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextFormatType.Descriptor instead.
func (TextFormatType) EnumDescriptor() ([]byte, []int) {
	return file_streamcontrol_proto_rawDescGZIP(), []int{1}
}

// TODO: rename to PlatformEvent
type ChatMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAtUNIXNano uint64                 `protobuf:"varint,1,opt,name=createdAtUNIXNano,proto3" json:"createdAtUNIXNano,omitempty"`
	EventType         PlatformEventType      `protobuf:"varint,2,opt,name=eventType,proto3,enum=streamcontrol.PlatformEventType" json:"eventType,omitempty"`
	UserID            string                 `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	Username          string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	MessageID         string                 `protobuf:"bytes,5,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Message           string                 `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	UsernameReadable  string                 `protobuf:"bytes,7,opt,name=usernameReadable,proto3" json:"usernameReadable,omitempty"`
	MessageFormatType TextFormatType         `protobuf:"varint,8,opt,name=messageFormatType,proto3,enum=streamcontrol.TextFormatType" json:"messageFormatType,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_streamcontrol_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_streamcontrol_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_streamcontrol_proto_rawDescGZIP(), []int{0}
}

func (x *ChatMessage) GetCreatedAtUNIXNano() uint64 {
	if x != nil {
		return x.CreatedAtUNIXNano
	}
	return 0
}

func (x *ChatMessage) GetEventType() PlatformEventType {
	if x != nil {
		return x.EventType
	}
	return PlatformEventType_platformEventTypeUndefined
}

func (x *ChatMessage) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChatMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChatMessage) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *ChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ChatMessage) GetUsernameReadable() string {
	if x != nil {
		return x.UsernameReadable
	}
	return ""
}

func (x *ChatMessage) GetMessageFormatType() TextFormatType {
	if x != nil {
		return x.MessageFormatType
	}
	return TextFormatType_TEXT_FORMAT_TYPE_UNDEFINED
}

var File_streamcontrol_proto protoreflect.FileDescriptor

var file_streamcontrol_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x22, 0xe0, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61,
	0x6e, 0x6f, 0x12, 0x3e, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2a, 0xb3, 0x03, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x65, 0x72, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77,
	0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x69, 0x64, 0x10, 0x07, 0x12, 0x2b, 0x0a,
	0x27, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x0a, 0x12, 0x22, 0x0a,
	0x1e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10,
	0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x0c, 0x2a, 0x86, 0x01,
	0x0a, 0x0e, 0x54, 0x65, 0x78, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x54, 0x4d, 0x4c, 0x10, 0x03, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x61, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x6f, 0x2d, 0x67, 0x6f,
	0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x74, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_streamcontrol_proto_rawDescOnce sync.Once
	file_streamcontrol_proto_rawDescData []byte
)

func file_streamcontrol_proto_rawDescGZIP() []byte {
	file_streamcontrol_proto_rawDescOnce.Do(func() {
		file_streamcontrol_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_streamcontrol_proto_rawDesc), len(file_streamcontrol_proto_rawDesc)))
	})
	return file_streamcontrol_proto_rawDescData
}

var file_streamcontrol_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_streamcontrol_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_streamcontrol_proto_goTypes = []any{
	(PlatformEventType)(0), // 0: streamcontrol.PlatformEventType
	(TextFormatType)(0),    // 1: streamcontrol.TextFormatType
	(*ChatMessage)(nil),    // 2: streamcontrol.ChatMessage
}
var file_streamcontrol_proto_depIdxs = []int32{
	0, // 0: streamcontrol.ChatMessage.eventType:type_name -> streamcontrol.PlatformEventType
	1, // 1: streamcontrol.ChatMessage.messageFormatType:type_name -> streamcontrol.TextFormatType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_streamcontrol_proto_init() }
func file_streamcontrol_proto_init() {
	if File_streamcontrol_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_streamcontrol_proto_rawDesc), len(file_streamcontrol_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_streamcontrol_proto_goTypes,
		DependencyIndexes: file_streamcontrol_proto_depIdxs,
		EnumInfos:         file_streamcontrol_proto_enumTypes,
		MessageInfos:      file_streamcontrol_proto_msgTypes,
	}.Build()
	File_streamcontrol_proto = out.File
	file_streamcontrol_proto_goTypes = nil
	file_streamcontrol_proto_depIdxs = nil
}
