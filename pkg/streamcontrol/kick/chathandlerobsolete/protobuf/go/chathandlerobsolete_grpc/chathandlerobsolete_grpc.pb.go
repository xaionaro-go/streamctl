// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: chathandlerobsolete.proto

package chathandlerobsolete_grpc

import (
	context "context"
	streamcontrol_grpc "github.com/xaionaro-go/streamctl/pkg/streamcontrol/protobuf/go/streamcontrol_grpc"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChatHandlerObsolete_Open_FullMethodName         = "/chathandlerobsolete.ChatHandlerObsolete/Open"
	ChatHandlerObsolete_Close_FullMethodName        = "/chathandlerobsolete.ChatHandlerObsolete/Close"
	ChatHandlerObsolete_MessagesChan_FullMethodName = "/chathandlerobsolete.ChatHandlerObsolete/MessagesChan"
)

// ChatHandlerObsoleteClient is the client API for ChatHandlerObsolete service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatHandlerObsoleteClient interface {
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
	MessagesChan(ctx context.Context, in *MessagesChanRequest, opts ...grpc.CallOption) (ChatHandlerObsolete_MessagesChanClient, error)
}

type chatHandlerObsoleteClient struct {
	cc grpc.ClientConnInterface
}

func NewChatHandlerObsoleteClient(cc grpc.ClientConnInterface) ChatHandlerObsoleteClient {
	return &chatHandlerObsoleteClient{cc}
}

func (c *chatHandlerObsoleteClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, ChatHandlerObsolete_Open_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatHandlerObsoleteClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, ChatHandlerObsolete_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatHandlerObsoleteClient) MessagesChan(ctx context.Context, in *MessagesChanRequest, opts ...grpc.CallOption) (ChatHandlerObsolete_MessagesChanClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChatHandlerObsolete_ServiceDesc.Streams[0], ChatHandlerObsolete_MessagesChan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &chatHandlerObsoleteMessagesChanClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatHandlerObsolete_MessagesChanClient interface {
	Recv() (*streamcontrol_grpc.ChatMessage, error)
	grpc.ClientStream
}

type chatHandlerObsoleteMessagesChanClient struct {
	grpc.ClientStream
}

func (x *chatHandlerObsoleteMessagesChanClient) Recv() (*streamcontrol_grpc.ChatMessage, error) {
	m := new(streamcontrol_grpc.ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatHandlerObsoleteServer is the server API for ChatHandlerObsolete service.
// All implementations must embed UnimplementedChatHandlerObsoleteServer
// for forward compatibility
type ChatHandlerObsoleteServer interface {
	Open(context.Context, *OpenRequest) (*OpenReply, error)
	Close(context.Context, *CloseRequest) (*CloseReply, error)
	MessagesChan(*MessagesChanRequest, ChatHandlerObsolete_MessagesChanServer) error
	mustEmbedUnimplementedChatHandlerObsoleteServer()
}

// UnimplementedChatHandlerObsoleteServer must be embedded to have forward compatible implementations.
type UnimplementedChatHandlerObsoleteServer struct {
}

func (UnimplementedChatHandlerObsoleteServer) Open(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedChatHandlerObsoleteServer) Close(context.Context, *CloseRequest) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedChatHandlerObsoleteServer) MessagesChan(*MessagesChanRequest, ChatHandlerObsolete_MessagesChanServer) error {
	return status.Errorf(codes.Unimplemented, "method MessagesChan not implemented")
}
func (UnimplementedChatHandlerObsoleteServer) mustEmbedUnimplementedChatHandlerObsoleteServer() {}

// UnsafeChatHandlerObsoleteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatHandlerObsoleteServer will
// result in compilation errors.
type UnsafeChatHandlerObsoleteServer interface {
	mustEmbedUnimplementedChatHandlerObsoleteServer()
}

func RegisterChatHandlerObsoleteServer(s grpc.ServiceRegistrar, srv ChatHandlerObsoleteServer) {
	s.RegisterService(&ChatHandlerObsolete_ServiceDesc, srv)
}

func _ChatHandlerObsolete_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatHandlerObsoleteServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatHandlerObsolete_Open_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatHandlerObsoleteServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatHandlerObsolete_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatHandlerObsoleteServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatHandlerObsolete_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatHandlerObsoleteServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatHandlerObsolete_MessagesChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MessagesChanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatHandlerObsoleteServer).MessagesChan(m, &chatHandlerObsoleteMessagesChanServer{ServerStream: stream})
}

type ChatHandlerObsolete_MessagesChanServer interface {
	Send(*streamcontrol_grpc.ChatMessage) error
	grpc.ServerStream
}

type chatHandlerObsoleteMessagesChanServer struct {
	grpc.ServerStream
}

func (x *chatHandlerObsoleteMessagesChanServer) Send(m *streamcontrol_grpc.ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

// ChatHandlerObsolete_ServiceDesc is the grpc.ServiceDesc for ChatHandlerObsolete service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatHandlerObsolete_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chathandlerobsolete.ChatHandlerObsolete",
	HandlerType: (*ChatHandlerObsoleteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _ChatHandlerObsolete_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ChatHandlerObsolete_Close_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MessagesChan",
			Handler:       _ChatHandlerObsolete_MessagesChan_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chathandlerobsolete.proto",
}
