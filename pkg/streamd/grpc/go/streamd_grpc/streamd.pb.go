// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: streamd.proto

package streamd_grpc

import (
	player_grpc "github.com/xaionaro-go/player/pkg/player/protobuf/go/player_grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoggingLevel int32

const (
	LoggingLevel_none    LoggingLevel = 0
	LoggingLevel_fatal   LoggingLevel = 1
	LoggingLevel_panic   LoggingLevel = 2
	LoggingLevel_error   LoggingLevel = 3
	LoggingLevel_warning LoggingLevel = 4
	LoggingLevel_info    LoggingLevel = 5
	LoggingLevel_debug   LoggingLevel = 6
	LoggingLevel_trace   LoggingLevel = 7
)

// Enum value maps for LoggingLevel.
var (
	LoggingLevel_name = map[int32]string{
		0: "none",
		1: "fatal",
		2: "panic",
		3: "error",
		4: "warning",
		5: "info",
		6: "debug",
		7: "trace",
	}
	LoggingLevel_value = map[string]int32{
		"none":    0,
		"fatal":   1,
		"panic":   2,
		"error":   3,
		"warning": 4,
		"info":    5,
		"debug":   6,
		"trace":   7,
	}
)

func (x LoggingLevel) Enum() *LoggingLevel {
	p := new(LoggingLevel)
	*p = x
	return p
}

func (x LoggingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[0].Descriptor()
}

func (LoggingLevel) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[0]
}

func (x LoggingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggingLevel.Descriptor instead.
func (LoggingLevel) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{0}
}

type Capability int32

const (
	Capability_capabilityUndefined Capability = 0
	Capability_SendChatMessage     Capability = 1
	Capability_DeleteChatMessage   Capability = 2
	Capability_BanUser             Capability = 3
	Capability_Shoutout            Capability = 4
	Capability_IsChannelStreaming  Capability = 5
	Capability_Raid                Capability = 6
)

// Enum value maps for Capability.
var (
	Capability_name = map[int32]string{
		0: "capabilityUndefined",
		1: "SendChatMessage",
		2: "DeleteChatMessage",
		3: "BanUser",
		4: "Shoutout",
		5: "IsChannelStreaming",
		6: "Raid",
	}
	Capability_value = map[string]int32{
		"capabilityUndefined": 0,
		"SendChatMessage":     1,
		"DeleteChatMessage":   2,
		"BanUser":             3,
		"Shoutout":            4,
		"IsChannelStreaming":  5,
		"Raid":                6,
	}
)

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[1].Descriptor()
}

func (Capability) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[1]
}

func (x Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capability.Descriptor instead.
func (Capability) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{1}
}

type HashType int32

const (
	HashType_HASH_SHA1 HashType = 0
)

// Enum value maps for HashType.
var (
	HashType_name = map[int32]string{
		0: "HASH_SHA1",
	}
	HashType_value = map[string]int32{
		"HASH_SHA1": 0,
	}
)

func (x HashType) Enum() *HashType {
	p := new(HashType)
	*p = x
	return p
}

func (x HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[2].Descriptor()
}

func (HashType) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[2]
}

func (x HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashType.Descriptor instead.
func (HashType) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{2}
}

type StreamServerType int32

const (
	StreamServerType_Undefined StreamServerType = 0
	StreamServerType_RTSP      StreamServerType = 1
	StreamServerType_RTMP      StreamServerType = 2
	StreamServerType_SRT       StreamServerType = 3
)

// Enum value maps for StreamServerType.
var (
	StreamServerType_name = map[int32]string{
		0: "Undefined",
		1: "RTSP",
		2: "RTMP",
		3: "SRT",
	}
	StreamServerType_value = map[string]int32{
		"Undefined": 0,
		"RTSP":      1,
		"RTMP":      2,
		"SRT":       3,
	}
)

func (x StreamServerType) Enum() *StreamServerType {
	p := new(StreamServerType)
	*p = x
	return p
}

func (x StreamServerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamServerType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[3].Descriptor()
}

func (StreamServerType) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[3]
}

func (x StreamServerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamServerType.Descriptor instead.
func (StreamServerType) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{3}
}

type AudioCodec int32

const (
	AudioCodec_AudioCodecCopy   AudioCodec = 0
	AudioCodec_AudioCodecAAC    AudioCodec = 1
	AudioCodec_AudioCodecVorbis AudioCodec = 2
	AudioCodec_AudioCodecOpus   AudioCodec = 3
)

// Enum value maps for AudioCodec.
var (
	AudioCodec_name = map[int32]string{
		0: "AudioCodecCopy",
		1: "AudioCodecAAC",
		2: "AudioCodecVorbis",
		3: "AudioCodecOpus",
	}
	AudioCodec_value = map[string]int32{
		"AudioCodecCopy":   0,
		"AudioCodecAAC":    1,
		"AudioCodecVorbis": 2,
		"AudioCodecOpus":   3,
	}
)

func (x AudioCodec) Enum() *AudioCodec {
	p := new(AudioCodec)
	*p = x
	return p
}

func (x AudioCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[4].Descriptor()
}

func (AudioCodec) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[4]
}

func (x AudioCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCodec.Descriptor instead.
func (AudioCodec) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{4}
}

type VideoCodec int32

const (
	VideoCodec_VideoCodecCopy VideoCodec = 0
	VideoCodec_VideoCodecH264 VideoCodec = 1
	VideoCodec_VideoCodecHEVC VideoCodec = 2
	VideoCodec_VideoCodecAV1  VideoCodec = 3
)

// Enum value maps for VideoCodec.
var (
	VideoCodec_name = map[int32]string{
		0: "VideoCodecCopy",
		1: "VideoCodecH264",
		2: "VideoCodecHEVC",
		3: "VideoCodecAV1",
	}
	VideoCodec_value = map[string]int32{
		"VideoCodecCopy": 0,
		"VideoCodecH264": 1,
		"VideoCodecHEVC": 2,
		"VideoCodecAV1":  3,
	}
)

func (x VideoCodec) Enum() *VideoCodec {
	p := new(VideoCodec)
	*p = x
	return p
}

func (x VideoCodec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VideoCodec) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[5].Descriptor()
}

func (VideoCodec) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[5]
}

func (x VideoCodec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VideoCodec.Descriptor instead.
func (VideoCodec) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{5}
}

type PlayerType int32

const (
	PlayerType_PlayerTypeAuto   PlayerType = 0
	PlayerType_PlayerTypeLibVLC PlayerType = 1
	PlayerType_PlayerTypeMPV    PlayerType = 2
)

// Enum value maps for PlayerType.
var (
	PlayerType_name = map[int32]string{
		0: "PlayerTypeAuto",
		1: "PlayerTypeLibVLC",
		2: "PlayerTypeMPV",
	}
	PlayerType_value = map[string]int32{
		"PlayerTypeAuto":   0,
		"PlayerTypeLibVLC": 1,
		"PlayerTypeMPV":    2,
	}
)

func (x PlayerType) Enum() *PlayerType {
	p := new(PlayerType)
	*p = x
	return p
}

func (x PlayerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[6].Descriptor()
}

func (PlayerType) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[6]
}

func (x PlayerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerType.Descriptor instead.
func (PlayerType) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{6}
}

type EventType int32

const (
	EventType_eventWindowFocusChange EventType = 0
	EventType_eventOBSSceneChange    EventType = 1
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "eventWindowFocusChange",
		1: "eventOBSSceneChange",
	}
	EventType_value = map[string]int32{
		"eventWindowFocusChange": 0,
		"eventOBSSceneChange":    1,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[7].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[7]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{7}
}

type PlatformEventType int32

const (
	PlatformEventType_platformEventTypeUndefined              PlatformEventType = 0
	PlatformEventType_platformEventTypeChatMessage            PlatformEventType = 1
	PlatformEventType_platformEventTypeCheer                  PlatformEventType = 2
	PlatformEventType_platformEventTypeAutoModHold            PlatformEventType = 3
	PlatformEventType_platformEventTypeAdBreak                PlatformEventType = 4
	PlatformEventType_platformEventTypeBan                    PlatformEventType = 5
	PlatformEventType_platformEventTypeFollow                 PlatformEventType = 6
	PlatformEventType_platformEventTypeRaid                   PlatformEventType = 7
	PlatformEventType_platformEventTypeChannelShoutoutReceive PlatformEventType = 8
	PlatformEventType_platformEventTypeSubscribe              PlatformEventType = 9
	PlatformEventType_platformEventTypeStreamOnline           PlatformEventType = 10
	PlatformEventType_platformEventTypeStreamOffline          PlatformEventType = 11
	PlatformEventType_platformEventTypeOther                  PlatformEventType = 12
)

// Enum value maps for PlatformEventType.
var (
	PlatformEventType_name = map[int32]string{
		0:  "platformEventTypeUndefined",
		1:  "platformEventTypeChatMessage",
		2:  "platformEventTypeCheer",
		3:  "platformEventTypeAutoModHold",
		4:  "platformEventTypeAdBreak",
		5:  "platformEventTypeBan",
		6:  "platformEventTypeFollow",
		7:  "platformEventTypeRaid",
		8:  "platformEventTypeChannelShoutoutReceive",
		9:  "platformEventTypeSubscribe",
		10: "platformEventTypeStreamOnline",
		11: "platformEventTypeStreamOffline",
		12: "platformEventTypeOther",
	}
	PlatformEventType_value = map[string]int32{
		"platformEventTypeUndefined":              0,
		"platformEventTypeChatMessage":            1,
		"platformEventTypeCheer":                  2,
		"platformEventTypeAutoModHold":            3,
		"platformEventTypeAdBreak":                4,
		"platformEventTypeBan":                    5,
		"platformEventTypeFollow":                 6,
		"platformEventTypeRaid":                   7,
		"platformEventTypeChannelShoutoutReceive": 8,
		"platformEventTypeSubscribe":              9,
		"platformEventTypeStreamOnline":           10,
		"platformEventTypeStreamOffline":          11,
		"platformEventTypeOther":                  12,
	}
)

func (x PlatformEventType) Enum() *PlatformEventType {
	p := new(PlatformEventType)
	*p = x
	return p
}

func (x PlatformEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlatformEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_streamd_proto_enumTypes[8].Descriptor()
}

func (PlatformEventType) Type() protoreflect.EnumType {
	return &file_streamd_proto_enumTypes[8]
}

func (x PlatformEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlatformEventType.Descriptor instead.
func (PlatformEventType) EnumDescriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{8}
}

type PingRequest struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	PayloadToReturn         string                 `protobuf:"bytes,1,opt,name=payloadToReturn,proto3" json:"payloadToReturn,omitempty"`
	PayloadToIgnore         string                 `protobuf:"bytes,2,opt,name=payloadToIgnore,proto3" json:"payloadToIgnore,omitempty"`
	RequestExtraPayloadSize int32                  `protobuf:"varint,3,opt,name=requestExtraPayloadSize,proto3" json:"requestExtraPayloadSize,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_streamd_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetPayloadToReturn() string {
	if x != nil {
		return x.PayloadToReturn
	}
	return ""
}

func (x *PingRequest) GetPayloadToIgnore() string {
	if x != nil {
		return x.PayloadToIgnore
	}
	return ""
}

func (x *PingRequest) GetRequestExtraPayloadSize() int32 {
	if x != nil {
		return x.RequestExtraPayloadSize
	}
	return 0
}

type PingReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Payload       string                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingReply) Reset() {
	*x = PingReply{}
	mi := &file_streamd_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReply) ProtoMessage() {}

func (x *PingReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReply.ProtoReflect.Descriptor instead.
func (*PingReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{1}
}

func (x *PingReply) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type SetLoggingLevelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoggingLevel  LoggingLevel           `protobuf:"varint,1,opt,name=loggingLevel,proto3,enum=streamd.LoggingLevel" json:"loggingLevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLoggingLevelRequest) Reset() {
	*x = SetLoggingLevelRequest{}
	mi := &file_streamd_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLoggingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggingLevelRequest) ProtoMessage() {}

func (x *SetLoggingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggingLevelRequest.ProtoReflect.Descriptor instead.
func (*SetLoggingLevelRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{2}
}

func (x *SetLoggingLevelRequest) GetLoggingLevel() LoggingLevel {
	if x != nil {
		return x.LoggingLevel
	}
	return LoggingLevel_none
}

type SetLoggingLevelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetLoggingLevelReply) Reset() {
	*x = SetLoggingLevelReply{}
	mi := &file_streamd_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetLoggingLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLoggingLevelReply) ProtoMessage() {}

func (x *SetLoggingLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLoggingLevelReply.ProtoReflect.Descriptor instead.
func (*SetLoggingLevelReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{3}
}

type GetLoggingLevelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLoggingLevelRequest) Reset() {
	*x = GetLoggingLevelRequest{}
	mi := &file_streamd_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLoggingLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoggingLevelRequest) ProtoMessage() {}

func (x *GetLoggingLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoggingLevelRequest.ProtoReflect.Descriptor instead.
func (*GetLoggingLevelRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{4}
}

type GetLoggingLevelReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LoggingLevel  LoggingLevel           `protobuf:"varint,1,opt,name=loggingLevel,proto3,enum=streamd.LoggingLevel" json:"loggingLevel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLoggingLevelReply) Reset() {
	*x = GetLoggingLevelReply{}
	mi := &file_streamd_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLoggingLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoggingLevelReply) ProtoMessage() {}

func (x *GetLoggingLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoggingLevelReply.ProtoReflect.Descriptor instead.
func (*GetLoggingLevelReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{5}
}

func (x *GetLoggingLevelReply) GetLoggingLevel() LoggingLevel {
	if x != nil {
		return x.LoggingLevel
	}
	return LoggingLevel_none
}

type GetConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	mi := &file_streamd_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{6}
}

type GetConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConfigReply) Reset() {
	*x = GetConfigReply{}
	mi := &file_streamd_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReply) ProtoMessage() {}

func (x *GetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReply.ProtoReflect.Descriptor instead.
func (*GetConfigReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{7}
}

func (x *GetConfigReply) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type SetConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        string                 `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConfigRequest) Reset() {
	*x = SetConfigRequest{}
	mi := &file_streamd_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigRequest) ProtoMessage() {}

func (x *SetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigRequest.ProtoReflect.Descriptor instead.
func (*SetConfigRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{8}
}

func (x *SetConfigRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

type SetConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetConfigReply) Reset() {
	*x = SetConfigReply{}
	mi := &file_streamd_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigReply) ProtoMessage() {}

func (x *SetConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigReply.ProtoReflect.Descriptor instead.
func (*SetConfigReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{9}
}

type SaveConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveConfigRequest) Reset() {
	*x = SaveConfigRequest{}
	mi := &file_streamd_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigRequest) ProtoMessage() {}

func (x *SaveConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigRequest.ProtoReflect.Descriptor instead.
func (*SaveConfigRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{10}
}

type SaveConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveConfigReply) Reset() {
	*x = SaveConfigReply{}
	mi := &file_streamd_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveConfigReply) ProtoMessage() {}

func (x *SaveConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveConfigReply.ProtoReflect.Descriptor instead.
func (*SaveConfigReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{11}
}

type ResetCacheRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetCacheRequest) Reset() {
	*x = ResetCacheRequest{}
	mi := &file_streamd_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCacheRequest) ProtoMessage() {}

func (x *ResetCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCacheRequest.ProtoReflect.Descriptor instead.
func (*ResetCacheRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{12}
}

type ResetCacheReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetCacheReply) Reset() {
	*x = ResetCacheReply{}
	mi := &file_streamd_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetCacheReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetCacheReply) ProtoMessage() {}

func (x *ResetCacheReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetCacheReply.ProtoReflect.Descriptor instead.
func (*ResetCacheReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{13}
}

type InitCacheRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitCacheRequest) Reset() {
	*x = InitCacheRequest{}
	mi := &file_streamd_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitCacheRequest) ProtoMessage() {}

func (x *InitCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitCacheRequest.ProtoReflect.Descriptor instead.
func (*InitCacheRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{14}
}

type InitCacheReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitCacheReply) Reset() {
	*x = InitCacheReply{}
	mi := &file_streamd_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitCacheReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitCacheReply) ProtoMessage() {}

func (x *InitCacheReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitCacheReply.ProtoReflect.Descriptor instead.
func (*InitCacheReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{15}
}

type StartStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Profile       string                 `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamRequest) Reset() {
	*x = StartStreamRequest{}
	mi := &file_streamd_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamRequest) ProtoMessage() {}

func (x *StartStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamRequest.ProtoReflect.Descriptor instead.
func (*StartStreamRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{16}
}

func (x *StartStreamRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *StartStreamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StartStreamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *StartStreamRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type StartStreamByProfileNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Title         *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Description   *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	ProfileName   string                 `protobuf:"bytes,4,opt,name=profileName,proto3" json:"profileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamByProfileNameRequest) Reset() {
	*x = StartStreamByProfileNameRequest{}
	mi := &file_streamd_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamByProfileNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamByProfileNameRequest) ProtoMessage() {}

func (x *StartStreamByProfileNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamByProfileNameRequest.ProtoReflect.Descriptor instead.
func (*StartStreamByProfileNameRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{17}
}

func (x *StartStreamByProfileNameRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *StartStreamByProfileNameRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *StartStreamByProfileNameRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *StartStreamByProfileNameRequest) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

type StartStreamReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamReply) Reset() {
	*x = StartStreamReply{}
	mi := &file_streamd_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamReply) ProtoMessage() {}

func (x *StartStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamReply.ProtoReflect.Descriptor instead.
func (*StartStreamReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{18}
}

type EndStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndStreamRequest) Reset() {
	*x = EndStreamRequest{}
	mi := &file_streamd_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndStreamRequest) ProtoMessage() {}

func (x *EndStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndStreamRequest.ProtoReflect.Descriptor instead.
func (*EndStreamRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{19}
}

func (x *EndStreamRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

type EndStreamReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndStreamReply) Reset() {
	*x = EndStreamReply{}
	mi := &file_streamd_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndStreamReply) ProtoMessage() {}

func (x *EndStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndStreamReply.ProtoReflect.Descriptor instead.
func (*EndStreamReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{20}
}

type GetStreamStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	NoCache       bool                   `protobuf:"varint,2,opt,name=noCache,proto3" json:"noCache,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamStatusRequest) Reset() {
	*x = GetStreamStatusRequest{}
	mi := &file_streamd_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatusRequest) ProtoMessage() {}

func (x *GetStreamStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStreamStatusRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{21}
}

func (x *GetStreamStatusRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *GetStreamStatusRequest) GetNoCache() bool {
	if x != nil {
		return x.NoCache
	}
	return false
}

type GetStreamStatusReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsActive      bool                   `protobuf:"varint,1,opt,name=isActive,proto3" json:"isActive,omitempty"`
	StartedAt     *int64                 `protobuf:"varint,2,opt,name=started_at,json=startedAt,proto3,oneof" json:"started_at,omitempty"`
	CustomData    string                 `protobuf:"bytes,3,opt,name=customData,proto3" json:"customData,omitempty"`
	ViewersCount  *uint64                `protobuf:"varint,4,opt,name=viewers_count,json=viewersCount,proto3,oneof" json:"viewers_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamStatusReply) Reset() {
	*x = GetStreamStatusReply{}
	mi := &file_streamd_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatusReply) ProtoMessage() {}

func (x *GetStreamStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatusReply.ProtoReflect.Descriptor instead.
func (*GetStreamStatusReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{22}
}

func (x *GetStreamStatusReply) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetStreamStatusReply) GetStartedAt() int64 {
	if x != nil && x.StartedAt != nil {
		return *x.StartedAt
	}
	return 0
}

func (x *GetStreamStatusReply) GetCustomData() string {
	if x != nil {
		return x.CustomData
	}
	return ""
}

func (x *GetStreamStatusReply) GetViewersCount() uint64 {
	if x != nil && x.ViewersCount != nil {
		return *x.ViewersCount
	}
	return 0
}

type GetBackendInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	IncludeData   bool                   `protobuf:"varint,2,opt,name=includeData,proto3" json:"includeData,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackendInfoRequest) Reset() {
	*x = GetBackendInfoRequest{}
	mi := &file_streamd_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackendInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendInfoRequest) ProtoMessage() {}

func (x *GetBackendInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBackendInfoRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{23}
}

func (x *GetBackendInfoRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *GetBackendInfoRequest) GetIncludeData() bool {
	if x != nil {
		return x.IncludeData
	}
	return false
}

type GetBackendInfoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsInitialized bool                   `protobuf:"varint,1,opt,name=isInitialized,proto3" json:"isInitialized,omitempty"`
	Data          string                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Capabilities  []Capability           `protobuf:"varint,3,rep,packed,name=capabilities,proto3,enum=streamd.Capability" json:"capabilities,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBackendInfoReply) Reset() {
	*x = GetBackendInfoReply{}
	mi := &file_streamd_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBackendInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBackendInfoReply) ProtoMessage() {}

func (x *GetBackendInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBackendInfoReply.ProtoReflect.Descriptor instead.
func (*GetBackendInfoReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{24}
}

func (x *GetBackendInfoReply) GetIsInitialized() bool {
	if x != nil {
		return x.IsInitialized
	}
	return false
}

func (x *GetBackendInfoReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *GetBackendInfoReply) GetCapabilities() []Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type IsBackendEnabledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBackendEnabledRequest) Reset() {
	*x = IsBackendEnabledRequest{}
	mi := &file_streamd_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBackendEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBackendEnabledRequest) ProtoMessage() {}

func (x *IsBackendEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBackendEnabledRequest.ProtoReflect.Descriptor instead.
func (*IsBackendEnabledRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{25}
}

func (x *IsBackendEnabledRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

type IsBackendEnabledReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsInitialized bool                   `protobuf:"varint,1,opt,name=isInitialized,proto3" json:"isInitialized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBackendEnabledReply) Reset() {
	*x = IsBackendEnabledReply{}
	mi := &file_streamd_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBackendEnabledReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBackendEnabledReply) ProtoMessage() {}

func (x *IsBackendEnabledReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBackendEnabledReply.ProtoReflect.Descriptor instead.
func (*IsBackendEnabledReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{26}
}

func (x *IsBackendEnabledReply) GetIsInitialized() bool {
	if x != nil {
		return x.IsInitialized
	}
	return false
}

type RestartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartRequest) Reset() {
	*x = RestartRequest{}
	mi := &file_streamd_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartRequest) ProtoMessage() {}

func (x *RestartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartRequest.ProtoReflect.Descriptor instead.
func (*RestartRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{27}
}

type RestartReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestartReply) Reset() {
	*x = RestartReply{}
	mi := &file_streamd_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartReply) ProtoMessage() {}

func (x *RestartReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartReply.ProtoReflect.Descriptor instead.
func (*RestartReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{28}
}

type SetTitleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTitleRequest) Reset() {
	*x = SetTitleRequest{}
	mi := &file_streamd_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTitleRequest) ProtoMessage() {}

func (x *SetTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTitleRequest.ProtoReflect.Descriptor instead.
func (*SetTitleRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{29}
}

func (x *SetTitleRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *SetTitleRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type SetTitleReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetTitleReply) Reset() {
	*x = SetTitleReply{}
	mi := &file_streamd_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetTitleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTitleReply) ProtoMessage() {}

func (x *SetTitleReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTitleReply.ProtoReflect.Descriptor instead.
func (*SetTitleReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{30}
}

type SetDescriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDescriptionRequest) Reset() {
	*x = SetDescriptionRequest{}
	mi := &file_streamd_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDescriptionRequest) ProtoMessage() {}

func (x *SetDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDescriptionRequest.ProtoReflect.Descriptor instead.
func (*SetDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{31}
}

func (x *SetDescriptionRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *SetDescriptionRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type SetDescriptionReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDescriptionReply) Reset() {
	*x = SetDescriptionReply{}
	mi := &file_streamd_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDescriptionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDescriptionReply) ProtoMessage() {}

func (x *SetDescriptionReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDescriptionReply.ProtoReflect.Descriptor instead.
func (*SetDescriptionReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{32}
}

type ApplyProfileRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Profile       string                 `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyProfileRequest) Reset() {
	*x = ApplyProfileRequest{}
	mi := &file_streamd_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyProfileRequest) ProtoMessage() {}

func (x *ApplyProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyProfileRequest.ProtoReflect.Descriptor instead.
func (*ApplyProfileRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{33}
}

func (x *ApplyProfileRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *ApplyProfileRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type ApplyProfileReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyProfileReply) Reset() {
	*x = ApplyProfileReply{}
	mi := &file_streamd_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyProfileReply) ProtoMessage() {}

func (x *ApplyProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyProfileReply.ProtoReflect.Descriptor instead.
func (*ApplyProfileReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{34}
}

type UpdateStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Profile       string                 `protobuf:"bytes,4,opt,name=profile,proto3" json:"profile,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	mi := &file_streamd_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateStreamRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *UpdateStreamRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateStreamRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateStreamRequest) GetProfile() string {
	if x != nil {
		return x.Profile
	}
	return ""
}

type UpdateStreamReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamReply) Reset() {
	*x = UpdateStreamReply{}
	mi := &file_streamd_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamReply) ProtoMessage() {}

func (x *UpdateStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamReply.ProtoReflect.Descriptor instead.
func (*UpdateStreamReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{36}
}

type EXPERIMENTAL_ReinitStreamControllersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EXPERIMENTAL_ReinitStreamControllersRequest) Reset() {
	*x = EXPERIMENTAL_ReinitStreamControllersRequest{}
	mi := &file_streamd_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EXPERIMENTAL_ReinitStreamControllersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EXPERIMENTAL_ReinitStreamControllersRequest) ProtoMessage() {}

func (x *EXPERIMENTAL_ReinitStreamControllersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EXPERIMENTAL_ReinitStreamControllersRequest.ProtoReflect.Descriptor instead.
func (*EXPERIMENTAL_ReinitStreamControllersRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{37}
}

type EXPERIMENTAL_ReinitStreamControllersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EXPERIMENTAL_ReinitStreamControllersReply) Reset() {
	*x = EXPERIMENTAL_ReinitStreamControllersReply{}
	mi := &file_streamd_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EXPERIMENTAL_ReinitStreamControllersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EXPERIMENTAL_ReinitStreamControllersReply) ProtoMessage() {}

func (x *EXPERIMENTAL_ReinitStreamControllersReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EXPERIMENTAL_ReinitStreamControllersReply.ProtoReflect.Descriptor instead.
func (*EXPERIMENTAL_ReinitStreamControllersReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{38}
}

type OBSOLETE_FetchConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_FetchConfigRequest) Reset() {
	*x = OBSOLETE_FetchConfigRequest{}
	mi := &file_streamd_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_FetchConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_FetchConfigRequest) ProtoMessage() {}

func (x *OBSOLETE_FetchConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_FetchConfigRequest.ProtoReflect.Descriptor instead.
func (*OBSOLETE_FetchConfigRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{39}
}

type OBSOLETE_FetchConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_FetchConfigReply) Reset() {
	*x = OBSOLETE_FetchConfigReply{}
	mi := &file_streamd_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_FetchConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_FetchConfigReply) ProtoMessage() {}

func (x *OBSOLETE_FetchConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_FetchConfigReply.ProtoReflect.Descriptor instead.
func (*OBSOLETE_FetchConfigReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{40}
}

type OBSOLETE_GetGitInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_GetGitInfoRequest) Reset() {
	*x = OBSOLETE_GetGitInfoRequest{}
	mi := &file_streamd_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_GetGitInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_GetGitInfoRequest) ProtoMessage() {}

func (x *OBSOLETE_GetGitInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_GetGitInfoRequest.ProtoReflect.Descriptor instead.
func (*OBSOLETE_GetGitInfoRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{41}
}

type OBSOLETE_GetGitInfoReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsInitialized bool                   `protobuf:"varint,1,opt,name=isInitialized,proto3" json:"isInitialized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_GetGitInfoReply) Reset() {
	*x = OBSOLETE_GetGitInfoReply{}
	mi := &file_streamd_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_GetGitInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_GetGitInfoReply) ProtoMessage() {}

func (x *OBSOLETE_GetGitInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_GetGitInfoReply.ProtoReflect.Descriptor instead.
func (*OBSOLETE_GetGitInfoReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{42}
}

func (x *OBSOLETE_GetGitInfoReply) GetIsInitialized() bool {
	if x != nil {
		return x.IsInitialized
	}
	return false
}

type OBSOLETE_GitReloginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_GitReloginRequest) Reset() {
	*x = OBSOLETE_GitReloginRequest{}
	mi := &file_streamd_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_GitReloginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_GitReloginRequest) ProtoMessage() {}

func (x *OBSOLETE_GitReloginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_GitReloginRequest.ProtoReflect.Descriptor instead.
func (*OBSOLETE_GitReloginRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{43}
}

type OBSOLETE_GitReloginReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OBSOLETE_GitReloginReply) Reset() {
	*x = OBSOLETE_GitReloginReply{}
	mi := &file_streamd_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSOLETE_GitReloginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSOLETE_GitReloginReply) ProtoMessage() {}

func (x *OBSOLETE_GitReloginReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSOLETE_GitReloginReply.ProtoReflect.Descriptor instead.
func (*OBSOLETE_GitReloginReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{44}
}

type SubscribeToOAuthRequestsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenPort    int32                  `protobuf:"varint,1,opt,name=listenPort,proto3" json:"listenPort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToOAuthRequestsRequest) Reset() {
	*x = SubscribeToOAuthRequestsRequest{}
	mi := &file_streamd_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToOAuthRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToOAuthRequestsRequest) ProtoMessage() {}

func (x *SubscribeToOAuthRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToOAuthRequestsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToOAuthRequestsRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{45}
}

func (x *SubscribeToOAuthRequestsRequest) GetListenPort() int32 {
	if x != nil {
		return x.ListenPort
	}
	return 0
}

type OAuthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	AuthURL       string                 `protobuf:"bytes,2,opt,name=authURL,proto3" json:"authURL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuthRequest) Reset() {
	*x = OAuthRequest{}
	mi := &file_streamd_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuthRequest) ProtoMessage() {}

func (x *OAuthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuthRequest.ProtoReflect.Descriptor instead.
func (*OAuthRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{46}
}

func (x *OAuthRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *OAuthRequest) GetAuthURL() string {
	if x != nil {
		return x.AuthURL
	}
	return ""
}

type GetVariableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVariableRequest) Reset() {
	*x = GetVariableRequest{}
	mi := &file_streamd_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableRequest) ProtoMessage() {}

func (x *GetVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableRequest.ProtoReflect.Descriptor instead.
func (*GetVariableRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{47}
}

func (x *GetVariableRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type GetVariableReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVariableReply) Reset() {
	*x = GetVariableReply{}
	mi := &file_streamd_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVariableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableReply) ProtoMessage() {}

func (x *GetVariableReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableReply.ProtoReflect.Descriptor instead.
func (*GetVariableReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{48}
}

func (x *GetVariableReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetVariableReply) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetVariableHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HashType      HashType               `protobuf:"varint,2,opt,name=hashType,proto3,enum=streamd.HashType" json:"hashType,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVariableHashRequest) Reset() {
	*x = GetVariableHashRequest{}
	mi := &file_streamd_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVariableHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableHashRequest) ProtoMessage() {}

func (x *GetVariableHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableHashRequest.ProtoReflect.Descriptor instead.
func (*GetVariableHashRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{49}
}

func (x *GetVariableHashRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetVariableHashRequest) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_HASH_SHA1
}

type GetVariableHashReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HashType      HashType               `protobuf:"varint,2,opt,name=hashType,proto3,enum=streamd.HashType" json:"hashType,omitempty"`
	Hash          []byte                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVariableHashReply) Reset() {
	*x = GetVariableHashReply{}
	mi := &file_streamd_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVariableHashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVariableHashReply) ProtoMessage() {}

func (x *GetVariableHashReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVariableHashReply.ProtoReflect.Descriptor instead.
func (*GetVariableHashReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{50}
}

func (x *GetVariableHashReply) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetVariableHashReply) GetHashType() HashType {
	if x != nil {
		return x.HashType
	}
	return HashType_HASH_SHA1
}

func (x *GetVariableHashReply) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type SetVariableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVariableRequest) Reset() {
	*x = SetVariableRequest{}
	mi := &file_streamd_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariableRequest) ProtoMessage() {}

func (x *SetVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariableRequest.ProtoReflect.Descriptor instead.
func (*SetVariableRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{51}
}

func (x *SetVariableRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SetVariableRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetVariableReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetVariableReply) Reset() {
	*x = SetVariableReply{}
	mi := &file_streamd_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetVariableReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVariableReply) ProtoMessage() {}

func (x *SetVariableReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVariableReply.ProtoReflect.Descriptor instead.
func (*SetVariableReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{52}
}

type SubscribeToVariableRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToVariableRequest) Reset() {
	*x = SubscribeToVariableRequest{}
	mi := &file_streamd_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToVariableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToVariableRequest) ProtoMessage() {}

func (x *SubscribeToVariableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToVariableRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToVariableRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{53}
}

func (x *SubscribeToVariableRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type VariableChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         []byte                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VariableChange) Reset() {
	*x = VariableChange{}
	mi := &file_streamd_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VariableChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableChange) ProtoMessage() {}

func (x *VariableChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableChange.ProtoReflect.Descriptor instead.
func (*VariableChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{54}
}

func (x *VariableChange) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type SubmitOAuthCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitOAuthCodeRequest) Reset() {
	*x = SubmitOAuthCodeRequest{}
	mi := &file_streamd_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitOAuthCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOAuthCodeRequest) ProtoMessage() {}

func (x *SubmitOAuthCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOAuthCodeRequest.ProtoReflect.Descriptor instead.
func (*SubmitOAuthCodeRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{55}
}

func (x *SubmitOAuthCodeRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *SubmitOAuthCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type SubmitOAuthCodeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitOAuthCodeReply) Reset() {
	*x = SubmitOAuthCodeReply{}
	mi := &file_streamd_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitOAuthCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOAuthCodeReply) ProtoMessage() {}

func (x *SubmitOAuthCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOAuthCodeReply.ProtoReflect.Descriptor instead.
func (*SubmitOAuthCodeReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{56}
}

type TLSCertificate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TLSCertificateOneOf:
	//
	//	*TLSCertificate_X509
	TLSCertificateOneOf isTLSCertificate_TLSCertificateOneOf `protobuf_oneof:"TLSCertificateOneOf"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TLSCertificate) Reset() {
	*x = TLSCertificate{}
	mi := &file_streamd_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TLSCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificate) ProtoMessage() {}

func (x *TLSCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificate.ProtoReflect.Descriptor instead.
func (*TLSCertificate) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{57}
}

func (x *TLSCertificate) GetTLSCertificateOneOf() isTLSCertificate_TLSCertificateOneOf {
	if x != nil {
		return x.TLSCertificateOneOf
	}
	return nil
}

func (x *TLSCertificate) GetX509() []byte {
	if x != nil {
		if x, ok := x.TLSCertificateOneOf.(*TLSCertificate_X509); ok {
			return x.X509
		}
	}
	return nil
}

type isTLSCertificate_TLSCertificateOneOf interface {
	isTLSCertificate_TLSCertificateOneOf()
}

type TLSCertificate_X509 struct {
	X509 []byte `protobuf:"bytes,1,opt,name=X509,proto3,oneof"`
}

func (*TLSCertificate_X509) isTLSCertificate_TLSCertificateOneOf() {}

type PrivateKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to PrivateKeyOneOf:
	//
	//	*PrivateKey_PKCS8
	PrivateKeyOneOf isPrivateKey_PrivateKeyOneOf `protobuf_oneof:"PrivateKeyOneOf"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PrivateKey) Reset() {
	*x = PrivateKey{}
	mi := &file_streamd_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateKey) ProtoMessage() {}

func (x *PrivateKey) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateKey.ProtoReflect.Descriptor instead.
func (*PrivateKey) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{58}
}

func (x *PrivateKey) GetPrivateKeyOneOf() isPrivateKey_PrivateKeyOneOf {
	if x != nil {
		return x.PrivateKeyOneOf
	}
	return nil
}

func (x *PrivateKey) GetPKCS8() []byte {
	if x != nil {
		if x, ok := x.PrivateKeyOneOf.(*PrivateKey_PKCS8); ok {
			return x.PKCS8
		}
	}
	return nil
}

type isPrivateKey_PrivateKeyOneOf interface {
	isPrivateKey_PrivateKeyOneOf()
}

type PrivateKey_PKCS8 struct {
	PKCS8 []byte `protobuf:"bytes,1,opt,name=PKCS8,proto3,oneof"`
}

func (*PrivateKey_PKCS8) isPrivateKey_PrivateKeyOneOf() {}

type StreamServer struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServerType       StreamServerType       `protobuf:"varint,1,opt,name=serverType,proto3,enum=streamd.StreamServerType" json:"serverType,omitempty"`
	ListenAddr       string                 `protobuf:"bytes,2,opt,name=listenAddr,proto3" json:"listenAddr,omitempty"`
	IsTLS            bool                   `protobuf:"varint,3,opt,name=IsTLS,proto3" json:"IsTLS,omitempty"`
	WriteQueueSize   uint64                 `protobuf:"varint,4,opt,name=WriteQueueSize,proto3" json:"WriteQueueSize,omitempty"`
	WriteTimeoutNano uint64                 `protobuf:"varint,5,opt,name=WriteTimeoutNano,proto3" json:"WriteTimeoutNano,omitempty"`
	ReadTimeoutNano  uint64                 `protobuf:"varint,6,opt,name=ReadTimeoutNano,proto3" json:"ReadTimeoutNano,omitempty"`
	ServerCert       *TLSCertificate        `protobuf:"bytes,7,opt,name=ServerCert,proto3,oneof" json:"ServerCert,omitempty"`
	ServerKey        *PrivateKey            `protobuf:"bytes,8,opt,name=ServerKey,proto3,oneof" json:"ServerKey,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamServer) Reset() {
	*x = StreamServer{}
	mi := &file_streamd_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServer) ProtoMessage() {}

func (x *StreamServer) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServer.ProtoReflect.Descriptor instead.
func (*StreamServer) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{59}
}

func (x *StreamServer) GetServerType() StreamServerType {
	if x != nil {
		return x.ServerType
	}
	return StreamServerType_Undefined
}

func (x *StreamServer) GetListenAddr() string {
	if x != nil {
		return x.ListenAddr
	}
	return ""
}

func (x *StreamServer) GetIsTLS() bool {
	if x != nil {
		return x.IsTLS
	}
	return false
}

func (x *StreamServer) GetWriteQueueSize() uint64 {
	if x != nil {
		return x.WriteQueueSize
	}
	return 0
}

func (x *StreamServer) GetWriteTimeoutNano() uint64 {
	if x != nil {
		return x.WriteTimeoutNano
	}
	return 0
}

func (x *StreamServer) GetReadTimeoutNano() uint64 {
	if x != nil {
		return x.ReadTimeoutNano
	}
	return 0
}

func (x *StreamServer) GetServerCert() *TLSCertificate {
	if x != nil {
		return x.ServerCert
	}
	return nil
}

func (x *StreamServer) GetServerKey() *PrivateKey {
	if x != nil {
		return x.ServerKey
	}
	return nil
}

type StreamServerStatistics struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	NumBytesConsumerWrote int64                  `protobuf:"varint,1,opt,name=NumBytesConsumerWrote,proto3" json:"NumBytesConsumerWrote,omitempty"`
	NumBytesProducerRead  int64                  `protobuf:"varint,2,opt,name=NumBytesProducerRead,proto3" json:"NumBytesProducerRead,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StreamServerStatistics) Reset() {
	*x = StreamServerStatistics{}
	mi := &file_streamd_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServerStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServerStatistics) ProtoMessage() {}

func (x *StreamServerStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServerStatistics.ProtoReflect.Descriptor instead.
func (*StreamServerStatistics) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{60}
}

func (x *StreamServerStatistics) GetNumBytesConsumerWrote() int64 {
	if x != nil {
		return x.NumBytesConsumerWrote
	}
	return 0
}

func (x *StreamServerStatistics) GetNumBytesProducerRead() int64 {
	if x != nil {
		return x.NumBytesProducerRead
	}
	return 0
}

type StreamServerWithStatistics struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Config        *StreamServer           `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Statistics    *StreamServerStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamServerWithStatistics) Reset() {
	*x = StreamServerWithStatistics{}
	mi := &file_streamd_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServerWithStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServerWithStatistics) ProtoMessage() {}

func (x *StreamServerWithStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServerWithStatistics.ProtoReflect.Descriptor instead.
func (*StreamServerWithStatistics) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{61}
}

func (x *StreamServerWithStatistics) GetConfig() *StreamServer {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StreamServerWithStatistics) GetStatistics() *StreamServerStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ListStreamServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamServersRequest) Reset() {
	*x = ListStreamServersRequest{}
	mi := &file_streamd_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamServersRequest) ProtoMessage() {}

func (x *ListStreamServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamServersRequest.ProtoReflect.Descriptor instead.
func (*ListStreamServersRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{62}
}

type ListStreamServersReply struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	StreamServers []*StreamServerWithStatistics `protobuf:"bytes,1,rep,name=streamServers,proto3" json:"streamServers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamServersReply) Reset() {
	*x = ListStreamServersReply{}
	mi := &file_streamd_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamServersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamServersReply) ProtoMessage() {}

func (x *ListStreamServersReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamServersReply.ProtoReflect.Descriptor instead.
func (*ListStreamServersReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{63}
}

func (x *ListStreamServersReply) GetStreamServers() []*StreamServerWithStatistics {
	if x != nil {
		return x.StreamServers
	}
	return nil
}

type StartStreamServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamServer          `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamServerRequest) Reset() {
	*x = StartStreamServerRequest{}
	mi := &file_streamd_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamServerRequest) ProtoMessage() {}

func (x *StartStreamServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamServerRequest.ProtoReflect.Descriptor instead.
func (*StartStreamServerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{64}
}

func (x *StartStreamServerRequest) GetConfig() *StreamServer {
	if x != nil {
		return x.Config
	}
	return nil
}

type StartStreamServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartStreamServerReply) Reset() {
	*x = StartStreamServerReply{}
	mi := &file_streamd_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartStreamServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartStreamServerReply) ProtoMessage() {}

func (x *StartStreamServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartStreamServerReply.ProtoReflect.Descriptor instead.
func (*StartStreamServerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{65}
}

type StopStreamServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ListenAddr    string                 `protobuf:"bytes,1,opt,name=listenAddr,proto3" json:"listenAddr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopStreamServerRequest) Reset() {
	*x = StopStreamServerRequest{}
	mi := &file_streamd_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStreamServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStreamServerRequest) ProtoMessage() {}

func (x *StopStreamServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStreamServerRequest.ProtoReflect.Descriptor instead.
func (*StopStreamServerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{66}
}

func (x *StopStreamServerRequest) GetListenAddr() string {
	if x != nil {
		return x.ListenAddr
	}
	return ""
}

type StopStreamServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StopStreamServerReply) Reset() {
	*x = StopStreamServerReply{}
	mi := &file_streamd_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StopStreamServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopStreamServerReply) ProtoMessage() {}

func (x *StopStreamServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopStreamServerReply.ProtoReflect.Descriptor instead.
func (*StopStreamServerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{67}
}

type StreamDestination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DestinationID string                 `protobuf:"bytes,1,opt,name=destinationID,proto3" json:"destinationID,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	StreamKey     string                 `protobuf:"bytes,3,opt,name=streamKey,proto3" json:"streamKey,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDestination) Reset() {
	*x = StreamDestination{}
	mi := &file_streamd_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDestination) ProtoMessage() {}

func (x *StreamDestination) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDestination.ProtoReflect.Descriptor instead.
func (*StreamDestination) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{68}
}

func (x *StreamDestination) GetDestinationID() string {
	if x != nil {
		return x.DestinationID
	}
	return ""
}

func (x *StreamDestination) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *StreamDestination) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

type ListStreamDestinationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamDestinationsRequest) Reset() {
	*x = ListStreamDestinationsRequest{}
	mi := &file_streamd_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamDestinationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamDestinationsRequest) ProtoMessage() {}

func (x *ListStreamDestinationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamDestinationsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamDestinationsRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{69}
}

type ListStreamDestinationsReply struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	StreamDestinations []*StreamDestination   `protobuf:"bytes,1,rep,name=streamDestinations,proto3" json:"streamDestinations,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ListStreamDestinationsReply) Reset() {
	*x = ListStreamDestinationsReply{}
	mi := &file_streamd_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamDestinationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamDestinationsReply) ProtoMessage() {}

func (x *ListStreamDestinationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamDestinationsReply.ProtoReflect.Descriptor instead.
func (*ListStreamDestinationsReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{70}
}

func (x *ListStreamDestinationsReply) GetStreamDestinations() []*StreamDestination {
	if x != nil {
		return x.StreamDestinations
	}
	return nil
}

type AddStreamDestinationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamDestination     `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamDestinationRequest) Reset() {
	*x = AddStreamDestinationRequest{}
	mi := &file_streamd_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamDestinationRequest) ProtoMessage() {}

func (x *AddStreamDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamDestinationRequest.ProtoReflect.Descriptor instead.
func (*AddStreamDestinationRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{71}
}

func (x *AddStreamDestinationRequest) GetConfig() *StreamDestination {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddStreamDestinationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamDestinationReply) Reset() {
	*x = AddStreamDestinationReply{}
	mi := &file_streamd_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamDestinationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamDestinationReply) ProtoMessage() {}

func (x *AddStreamDestinationReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamDestinationReply.ProtoReflect.Descriptor instead.
func (*AddStreamDestinationReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{72}
}

type UpdateStreamDestinationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamDestination     `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamDestinationRequest) Reset() {
	*x = UpdateStreamDestinationRequest{}
	mi := &file_streamd_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamDestinationRequest) ProtoMessage() {}

func (x *UpdateStreamDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamDestinationRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamDestinationRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateStreamDestinationRequest) GetConfig() *StreamDestination {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateStreamDestinationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamDestinationReply) Reset() {
	*x = UpdateStreamDestinationReply{}
	mi := &file_streamd_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamDestinationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamDestinationReply) ProtoMessage() {}

func (x *UpdateStreamDestinationReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamDestinationReply.ProtoReflect.Descriptor instead.
func (*UpdateStreamDestinationReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{74}
}

type RemoveStreamDestinationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DestinationID string                 `protobuf:"bytes,1,opt,name=destinationID,proto3" json:"destinationID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamDestinationRequest) Reset() {
	*x = RemoveStreamDestinationRequest{}
	mi := &file_streamd_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamDestinationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamDestinationRequest) ProtoMessage() {}

func (x *RemoveStreamDestinationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamDestinationRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamDestinationRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{75}
}

func (x *RemoveStreamDestinationRequest) GetDestinationID() string {
	if x != nil {
		return x.DestinationID
	}
	return ""
}

type RemoveStreamDestinationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamDestinationReply) Reset() {
	*x = RemoveStreamDestinationReply{}
	mi := &file_streamd_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamDestinationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamDestinationReply) ProtoMessage() {}

func (x *RemoveStreamDestinationReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamDestinationReply.ProtoReflect.Descriptor instead.
func (*RemoveStreamDestinationReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{76}
}

type IncomingStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncomingStream) Reset() {
	*x = IncomingStream{}
	mi := &file_streamd_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncomingStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingStream) ProtoMessage() {}

func (x *IncomingStream) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingStream.ProtoReflect.Descriptor instead.
func (*IncomingStream) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{77}
}

func (x *IncomingStream) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *IncomingStream) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type AddIncomingStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIncomingStreamRequest) Reset() {
	*x = AddIncomingStreamRequest{}
	mi := &file_streamd_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIncomingStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIncomingStreamRequest) ProtoMessage() {}

func (x *AddIncomingStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIncomingStreamRequest.ProtoReflect.Descriptor instead.
func (*AddIncomingStreamRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{78}
}

func (x *AddIncomingStreamRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type AddIncomingStreamReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddIncomingStreamReply) Reset() {
	*x = AddIncomingStreamReply{}
	mi := &file_streamd_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddIncomingStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddIncomingStreamReply) ProtoMessage() {}

func (x *AddIncomingStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddIncomingStreamReply.ProtoReflect.Descriptor instead.
func (*AddIncomingStreamReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{79}
}

type RemoveIncomingStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveIncomingStreamRequest) Reset() {
	*x = RemoveIncomingStreamRequest{}
	mi := &file_streamd_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveIncomingStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIncomingStreamRequest) ProtoMessage() {}

func (x *RemoveIncomingStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIncomingStreamRequest.ProtoReflect.Descriptor instead.
func (*RemoveIncomingStreamRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{80}
}

func (x *RemoveIncomingStreamRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type RemoveIncomingStreamReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveIncomingStreamReply) Reset() {
	*x = RemoveIncomingStreamReply{}
	mi := &file_streamd_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveIncomingStreamReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveIncomingStreamReply) ProtoMessage() {}

func (x *RemoveIncomingStreamReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveIncomingStreamReply.ProtoReflect.Descriptor instead.
func (*RemoveIncomingStreamReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{81}
}

type ListIncomingStreamsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListIncomingStreamsRequest) Reset() {
	*x = ListIncomingStreamsRequest{}
	mi := &file_streamd_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIncomingStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIncomingStreamsRequest) ProtoMessage() {}

func (x *ListIncomingStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIncomingStreamsRequest.ProtoReflect.Descriptor instead.
func (*ListIncomingStreamsRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{82}
}

type ListIncomingStreamsReply struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IncomingStreams []*IncomingStream      `protobuf:"bytes,1,rep,name=incomingStreams,proto3" json:"incomingStreams,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListIncomingStreamsReply) Reset() {
	*x = ListIncomingStreamsReply{}
	mi := &file_streamd_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListIncomingStreamsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIncomingStreamsReply) ProtoMessage() {}

func (x *ListIncomingStreamsReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIncomingStreamsReply.ProtoReflect.Descriptor instead.
func (*ListIncomingStreamsReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{83}
}

func (x *ListIncomingStreamsReply) GetIncomingStreams() []*IncomingStream {
	if x != nil {
		return x.IncomingStreams
	}
	return nil
}

type RestartUntilYoutubeRecognizesStream struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Enabled        bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	StartTimeout   float64                `protobuf:"fixed64,2,opt,name=startTimeout,proto3" json:"startTimeout,omitempty"`
	StopStartDelay float64                `protobuf:"fixed64,3,opt,name=stopStartDelay,proto3" json:"stopStartDelay,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RestartUntilYoutubeRecognizesStream) Reset() {
	*x = RestartUntilYoutubeRecognizesStream{}
	mi := &file_streamd_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestartUntilYoutubeRecognizesStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartUntilYoutubeRecognizesStream) ProtoMessage() {}

func (x *RestartUntilYoutubeRecognizesStream) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartUntilYoutubeRecognizesStream.ProtoReflect.Descriptor instead.
func (*RestartUntilYoutubeRecognizesStream) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{84}
}

func (x *RestartUntilYoutubeRecognizesStream) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RestartUntilYoutubeRecognizesStream) GetStartTimeout() float64 {
	if x != nil {
		return x.StartTimeout
	}
	return 0
}

func (x *RestartUntilYoutubeRecognizesStream) GetStopStartDelay() float64 {
	if x != nil {
		return x.StopStartDelay
	}
	return 0
}

type StartAfterYoutubeRecognizedStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartAfterYoutubeRecognizedStream) Reset() {
	*x = StartAfterYoutubeRecognizedStream{}
	mi := &file_streamd_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartAfterYoutubeRecognizedStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartAfterYoutubeRecognizedStream) ProtoMessage() {}

func (x *StartAfterYoutubeRecognizedStream) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartAfterYoutubeRecognizedStream.ProtoReflect.Descriptor instead.
func (*StartAfterYoutubeRecognizedStream) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{85}
}

func (x *StartAfterYoutubeRecognizedStream) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type StreamForwardQuirks struct {
	state                               protoimpl.MessageState               `protogen:"open.v1"`
	RestartUntilYoutubeRecognizesStream *RestartUntilYoutubeRecognizesStream `protobuf:"bytes,1,opt,name=restartUntilYoutubeRecognizesStream,proto3" json:"restartUntilYoutubeRecognizesStream,omitempty"`
	StartAfterYoutubeRecognizedStream   *StartAfterYoutubeRecognizedStream   `protobuf:"bytes,2,opt,name=startAfterYoutubeRecognizedStream,proto3" json:"startAfterYoutubeRecognizedStream,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *StreamForwardQuirks) Reset() {
	*x = StreamForwardQuirks{}
	mi := &file_streamd_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamForwardQuirks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamForwardQuirks) ProtoMessage() {}

func (x *StreamForwardQuirks) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamForwardQuirks.ProtoReflect.Descriptor instead.
func (*StreamForwardQuirks) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{86}
}

func (x *StreamForwardQuirks) GetRestartUntilYoutubeRecognizesStream() *RestartUntilYoutubeRecognizesStream {
	if x != nil {
		return x.RestartUntilYoutubeRecognizesStream
	}
	return nil
}

func (x *StreamForwardQuirks) GetStartAfterYoutubeRecognizedStream() *StartAfterYoutubeRecognizedStream {
	if x != nil {
		return x.StartAfterYoutubeRecognizedStream
	}
	return nil
}

type StreamForward struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	DestinationID string                 `protobuf:"bytes,2,opt,name=destinationID,proto3" json:"destinationID,omitempty"`
	Enabled       bool                   `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Encode        *EncoderConfig         `protobuf:"bytes,4,opt,name=encode,proto3" json:"encode,omitempty"`
	Quirks        *StreamForwardQuirks   `protobuf:"bytes,5,opt,name=quirks,proto3" json:"quirks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamForward) Reset() {
	*x = StreamForward{}
	mi := &file_streamd_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamForward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamForward) ProtoMessage() {}

func (x *StreamForward) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamForward.ProtoReflect.Descriptor instead.
func (*StreamForward) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{87}
}

func (x *StreamForward) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamForward) GetDestinationID() string {
	if x != nil {
		return x.DestinationID
	}
	return ""
}

func (x *StreamForward) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *StreamForward) GetEncode() *EncoderConfig {
	if x != nil {
		return x.Encode
	}
	return nil
}

func (x *StreamForward) GetQuirks() *StreamForwardQuirks {
	if x != nil {
		return x.Quirks
	}
	return nil
}

type EncoderConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Enable            bool                   `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	OutputAudioTracks []*OutputAudioTrack    `protobuf:"bytes,2,rep,name=outputAudioTracks,proto3" json:"outputAudioTracks,omitempty"`
	OutputVideoTracks []*OutputVideoTrack    `protobuf:"bytes,3,rep,name=outputVideoTracks,proto3" json:"outputVideoTracks,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *EncoderConfig) Reset() {
	*x = EncoderConfig{}
	mi := &file_streamd_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncoderConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncoderConfig) ProtoMessage() {}

func (x *EncoderConfig) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncoderConfig.ProtoReflect.Descriptor instead.
func (*EncoderConfig) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{88}
}

func (x *EncoderConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *EncoderConfig) GetOutputAudioTracks() []*OutputAudioTrack {
	if x != nil {
		return x.OutputAudioTracks
	}
	return nil
}

func (x *EncoderConfig) GetOutputVideoTracks() []*OutputVideoTrack {
	if x != nil {
		return x.OutputVideoTracks
	}
	return nil
}

type OutputAudioTrack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputTrackIDs []uint64               `protobuf:"varint,1,rep,packed,name=inputTrackIDs,proto3" json:"inputTrackIDs,omitempty"`
	Encode        *EncodeAudioConfig     `protobuf:"bytes,2,opt,name=encode,proto3" json:"encode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputAudioTrack) Reset() {
	*x = OutputAudioTrack{}
	mi := &file_streamd_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputAudioTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputAudioTrack) ProtoMessage() {}

func (x *OutputAudioTrack) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputAudioTrack.ProtoReflect.Descriptor instead.
func (*OutputAudioTrack) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{89}
}

func (x *OutputAudioTrack) GetInputTrackIDs() []uint64 {
	if x != nil {
		return x.InputTrackIDs
	}
	return nil
}

func (x *OutputAudioTrack) GetEncode() *EncodeAudioConfig {
	if x != nil {
		return x.Encode
	}
	return nil
}

type EncodeAudioConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codec         AudioCodec             `protobuf:"varint,1,opt,name=codec,proto3,enum=streamd.AudioCodec" json:"codec,omitempty"`
	Quality       *AudioQuality          `protobuf:"bytes,2,opt,name=quality,proto3" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeAudioConfig) Reset() {
	*x = EncodeAudioConfig{}
	mi := &file_streamd_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeAudioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeAudioConfig) ProtoMessage() {}

func (x *EncodeAudioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeAudioConfig.ProtoReflect.Descriptor instead.
func (*EncodeAudioConfig) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{90}
}

func (x *EncodeAudioConfig) GetCodec() AudioCodec {
	if x != nil {
		return x.Codec
	}
	return AudioCodec_AudioCodecCopy
}

func (x *EncodeAudioConfig) GetQuality() *AudioQuality {
	if x != nil {
		return x.Quality
	}
	return nil
}

type AudioQuality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to AudioQuality:
	//
	//	*AudioQuality_ConstantBitrate
	AudioQuality  isAudioQuality_AudioQuality `protobuf_oneof:"AudioQuality"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioQuality) Reset() {
	*x = AudioQuality{}
	mi := &file_streamd_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioQuality) ProtoMessage() {}

func (x *AudioQuality) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioQuality.ProtoReflect.Descriptor instead.
func (*AudioQuality) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{91}
}

func (x *AudioQuality) GetAudioQuality() isAudioQuality_AudioQuality {
	if x != nil {
		return x.AudioQuality
	}
	return nil
}

func (x *AudioQuality) GetConstantBitrate() uint32 {
	if x != nil {
		if x, ok := x.AudioQuality.(*AudioQuality_ConstantBitrate); ok {
			return x.ConstantBitrate
		}
	}
	return 0
}

type isAudioQuality_AudioQuality interface {
	isAudioQuality_AudioQuality()
}

type AudioQuality_ConstantBitrate struct {
	ConstantBitrate uint32 `protobuf:"varint,1,opt,name=constantBitrate,proto3,oneof"`
}

func (*AudioQuality_ConstantBitrate) isAudioQuality_AudioQuality() {}

type OutputVideoTrack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	InputTrackIDs []uint64               `protobuf:"varint,1,rep,packed,name=inputTrackIDs,proto3" json:"inputTrackIDs,omitempty"`
	Encode        *EncodeVideoConfig     `protobuf:"bytes,2,opt,name=encode,proto3" json:"encode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputVideoTrack) Reset() {
	*x = OutputVideoTrack{}
	mi := &file_streamd_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputVideoTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputVideoTrack) ProtoMessage() {}

func (x *OutputVideoTrack) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputVideoTrack.ProtoReflect.Descriptor instead.
func (*OutputVideoTrack) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{92}
}

func (x *OutputVideoTrack) GetInputTrackIDs() []uint64 {
	if x != nil {
		return x.InputTrackIDs
	}
	return nil
}

func (x *OutputVideoTrack) GetEncode() *EncodeVideoConfig {
	if x != nil {
		return x.Encode
	}
	return nil
}

type EncodeVideoConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Codec         VideoCodec             `protobuf:"varint,1,opt,name=codec,proto3,enum=streamd.VideoCodec" json:"codec,omitempty"`
	Quality       *VideoQuality          `protobuf:"bytes,2,opt,name=quality,proto3" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeVideoConfig) Reset() {
	*x = EncodeVideoConfig{}
	mi := &file_streamd_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeVideoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeVideoConfig) ProtoMessage() {}

func (x *EncodeVideoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeVideoConfig.ProtoReflect.Descriptor instead.
func (*EncodeVideoConfig) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{93}
}

func (x *EncodeVideoConfig) GetCodec() VideoCodec {
	if x != nil {
		return x.Codec
	}
	return VideoCodec_VideoCodecCopy
}

func (x *EncodeVideoConfig) GetQuality() *VideoQuality {
	if x != nil {
		return x.Quality
	}
	return nil
}

type VideoQuality struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to VideoQuality:
	//
	//	*VideoQuality_ConstantBitrate
	//	*VideoQuality_ConstantQuality
	VideoQuality  isVideoQuality_VideoQuality `protobuf_oneof:"VideoQuality"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VideoQuality) Reset() {
	*x = VideoQuality{}
	mi := &file_streamd_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoQuality) ProtoMessage() {}

func (x *VideoQuality) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoQuality.ProtoReflect.Descriptor instead.
func (*VideoQuality) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{94}
}

func (x *VideoQuality) GetVideoQuality() isVideoQuality_VideoQuality {
	if x != nil {
		return x.VideoQuality
	}
	return nil
}

func (x *VideoQuality) GetConstantBitrate() uint32 {
	if x != nil {
		if x, ok := x.VideoQuality.(*VideoQuality_ConstantBitrate); ok {
			return x.ConstantBitrate
		}
	}
	return 0
}

func (x *VideoQuality) GetConstantQuality() uint32 {
	if x != nil {
		if x, ok := x.VideoQuality.(*VideoQuality_ConstantQuality); ok {
			return x.ConstantQuality
		}
	}
	return 0
}

type isVideoQuality_VideoQuality interface {
	isVideoQuality_VideoQuality()
}

type VideoQuality_ConstantBitrate struct {
	ConstantBitrate uint32 `protobuf:"varint,1,opt,name=constantBitrate,proto3,oneof"`
}

type VideoQuality_ConstantQuality struct {
	ConstantQuality uint32 `protobuf:"varint,2,opt,name=constantQuality,proto3,oneof"`
}

func (*VideoQuality_ConstantBitrate) isVideoQuality_VideoQuality() {}

func (*VideoQuality_ConstantQuality) isVideoQuality_VideoQuality() {}

type StreamForwardStatistics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumBytesWrote int64                  `protobuf:"varint,1,opt,name=numBytesWrote,proto3" json:"numBytesWrote,omitempty"`
	NumBytesRead  int64                  `protobuf:"varint,2,opt,name=numBytesRead,proto3" json:"numBytesRead,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamForwardStatistics) Reset() {
	*x = StreamForwardStatistics{}
	mi := &file_streamd_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamForwardStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamForwardStatistics) ProtoMessage() {}

func (x *StreamForwardStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamForwardStatistics.ProtoReflect.Descriptor instead.
func (*StreamForwardStatistics) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{95}
}

func (x *StreamForwardStatistics) GetNumBytesWrote() int64 {
	if x != nil {
		return x.NumBytesWrote
	}
	return 0
}

func (x *StreamForwardStatistics) GetNumBytesRead() int64 {
	if x != nil {
		return x.NumBytesRead
	}
	return 0
}

type StreamForwardWithStatistics struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Config        *StreamForward           `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Statistics    *StreamForwardStatistics `protobuf:"bytes,2,opt,name=statistics,proto3" json:"statistics,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamForwardWithStatistics) Reset() {
	*x = StreamForwardWithStatistics{}
	mi := &file_streamd_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamForwardWithStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamForwardWithStatistics) ProtoMessage() {}

func (x *StreamForwardWithStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamForwardWithStatistics.ProtoReflect.Descriptor instead.
func (*StreamForwardWithStatistics) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{96}
}

func (x *StreamForwardWithStatistics) GetConfig() *StreamForward {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StreamForwardWithStatistics) GetStatistics() *StreamForwardStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type ListStreamForwardsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamForwardsRequest) Reset() {
	*x = ListStreamForwardsRequest{}
	mi := &file_streamd_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamForwardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamForwardsRequest) ProtoMessage() {}

func (x *ListStreamForwardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamForwardsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamForwardsRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{97}
}

type ListStreamForwardsReply struct {
	state          protoimpl.MessageState         `protogen:"open.v1"`
	StreamForwards []*StreamForwardWithStatistics `protobuf:"bytes,1,rep,name=streamForwards,proto3" json:"streamForwards,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListStreamForwardsReply) Reset() {
	*x = ListStreamForwardsReply{}
	mi := &file_streamd_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamForwardsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamForwardsReply) ProtoMessage() {}

func (x *ListStreamForwardsReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamForwardsReply.ProtoReflect.Descriptor instead.
func (*ListStreamForwardsReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{98}
}

func (x *ListStreamForwardsReply) GetStreamForwards() []*StreamForwardWithStatistics {
	if x != nil {
		return x.StreamForwards
	}
	return nil
}

type AddStreamForwardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamForward         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamForwardRequest) Reset() {
	*x = AddStreamForwardRequest{}
	mi := &file_streamd_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamForwardRequest) ProtoMessage() {}

func (x *AddStreamForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamForwardRequest.ProtoReflect.Descriptor instead.
func (*AddStreamForwardRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{99}
}

func (x *AddStreamForwardRequest) GetConfig() *StreamForward {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddStreamForwardReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamForwardReply) Reset() {
	*x = AddStreamForwardReply{}
	mi := &file_streamd_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamForwardReply) ProtoMessage() {}

func (x *AddStreamForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamForwardReply.ProtoReflect.Descriptor instead.
func (*AddStreamForwardReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{100}
}

type UpdateStreamForwardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamForward         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamForwardRequest) Reset() {
	*x = UpdateStreamForwardRequest{}
	mi := &file_streamd_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamForwardRequest) ProtoMessage() {}

func (x *UpdateStreamForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamForwardRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamForwardRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{101}
}

func (x *UpdateStreamForwardRequest) GetConfig() *StreamForward {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateStreamForwardReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamForwardReply) Reset() {
	*x = UpdateStreamForwardReply{}
	mi := &file_streamd_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamForwardReply) ProtoMessage() {}

func (x *UpdateStreamForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamForwardReply.ProtoReflect.Descriptor instead.
func (*UpdateStreamForwardReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{102}
}

type RemoveStreamForwardRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamForward         `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamForwardRequest) Reset() {
	*x = RemoveStreamForwardRequest{}
	mi := &file_streamd_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamForwardRequest) ProtoMessage() {}

func (x *RemoveStreamForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamForwardRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamForwardRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{103}
}

func (x *RemoveStreamForwardRequest) GetConfig() *StreamForward {
	if x != nil {
		return x.Config
	}
	return nil
}

type RemoveStreamForwardReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamForwardReply) Reset() {
	*x = RemoveStreamForwardReply{}
	mi := &file_streamd_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamForwardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamForwardReply) ProtoMessage() {}

func (x *RemoveStreamForwardReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamForwardReply.ProtoReflect.Descriptor instead.
func (*RemoveStreamForwardReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{104}
}

type WaitForStreamPublisherRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      *string                `protobuf:"bytes,1,opt,name=streamID,proto3,oneof" json:"streamID,omitempty"`
	WaitForNext   bool                   `protobuf:"varint,2,opt,name=waitForNext,proto3" json:"waitForNext,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WaitForStreamPublisherRequest) Reset() {
	*x = WaitForStreamPublisherRequest{}
	mi := &file_streamd_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WaitForStreamPublisherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForStreamPublisherRequest) ProtoMessage() {}

func (x *WaitForStreamPublisherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForStreamPublisherRequest.ProtoReflect.Descriptor instead.
func (*WaitForStreamPublisherRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{105}
}

func (x *WaitForStreamPublisherRequest) GetStreamID() string {
	if x != nil && x.StreamID != nil {
		return *x.StreamID
	}
	return ""
}

func (x *WaitForStreamPublisherRequest) GetWaitForNext() bool {
	if x != nil {
		return x.WaitForNext
	}
	return false
}

type StreamPublisher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPublisher) Reset() {
	*x = StreamPublisher{}
	mi := &file_streamd_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPublisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPublisher) ProtoMessage() {}

func (x *StreamPublisher) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPublisher.ProtoReflect.Descriptor instead.
func (*StreamPublisher) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{106}
}

type StreamPlaybackConfig struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	JitterBufDurationSecs float64                `protobuf:"fixed64,1,opt,name=JitterBufDurationSecs,proto3" json:"JitterBufDurationSecs,omitempty"`
	CatchupMaxSpeedFactor float64                `protobuf:"fixed64,2,opt,name=CatchupMaxSpeedFactor,proto3" json:"CatchupMaxSpeedFactor,omitempty"`
	MaxCatchupAtLagSecs   float64                `protobuf:"fixed64,3,opt,name=MaxCatchupAtLagSecs,proto3" json:"MaxCatchupAtLagSecs,omitempty"`
	StartTimeoutSecs      float64                `protobuf:"fixed64,4,opt,name=StartTimeoutSecs,proto3" json:"StartTimeoutSecs,omitempty"`
	ReadTimeoutSecs       float64                `protobuf:"fixed64,5,opt,name=ReadTimeoutSecs,proto3" json:"ReadTimeoutSecs,omitempty"`
	OverriddenURL         string                 `protobuf:"bytes,6,opt,name=overriddenURL,proto3" json:"overriddenURL,omitempty"`
	ForceWaitForPublisher bool                   `protobuf:"varint,7,opt,name=forceWaitForPublisher,proto3" json:"forceWaitForPublisher,omitempty"`
	EnableObserver        bool                   `protobuf:"varint,8,opt,name=enableObserver,proto3" json:"enableObserver,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *StreamPlaybackConfig) Reset() {
	*x = StreamPlaybackConfig{}
	mi := &file_streamd_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlaybackConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlaybackConfig) ProtoMessage() {}

func (x *StreamPlaybackConfig) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlaybackConfig.ProtoReflect.Descriptor instead.
func (*StreamPlaybackConfig) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{107}
}

func (x *StreamPlaybackConfig) GetJitterBufDurationSecs() float64 {
	if x != nil {
		return x.JitterBufDurationSecs
	}
	return 0
}

func (x *StreamPlaybackConfig) GetCatchupMaxSpeedFactor() float64 {
	if x != nil {
		return x.CatchupMaxSpeedFactor
	}
	return 0
}

func (x *StreamPlaybackConfig) GetMaxCatchupAtLagSecs() float64 {
	if x != nil {
		return x.MaxCatchupAtLagSecs
	}
	return 0
}

func (x *StreamPlaybackConfig) GetStartTimeoutSecs() float64 {
	if x != nil {
		return x.StartTimeoutSecs
	}
	return 0
}

func (x *StreamPlaybackConfig) GetReadTimeoutSecs() float64 {
	if x != nil {
		return x.ReadTimeoutSecs
	}
	return 0
}

func (x *StreamPlaybackConfig) GetOverriddenURL() string {
	if x != nil {
		return x.OverriddenURL
	}
	return ""
}

func (x *StreamPlaybackConfig) GetForceWaitForPublisher() bool {
	if x != nil {
		return x.ForceWaitForPublisher
	}
	return false
}

func (x *StreamPlaybackConfig) GetEnableObserver() bool {
	if x != nil {
		return x.EnableObserver
	}
	return false
}

type StreamPlayerConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	StreamID             string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	PlayerType           PlayerType             `protobuf:"varint,2,opt,name=playerType,proto3,enum=streamd.PlayerType" json:"playerType,omitempty"`
	Disabled             bool                   `protobuf:"varint,3,opt,name=disabled,proto3" json:"disabled,omitempty"`
	StreamPlaybackConfig *StreamPlaybackConfig  `protobuf:"bytes,4,opt,name=streamPlaybackConfig,proto3" json:"streamPlaybackConfig,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *StreamPlayerConfig) Reset() {
	*x = StreamPlayerConfig{}
	mi := &file_streamd_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerConfig) ProtoMessage() {}

func (x *StreamPlayerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerConfig.ProtoReflect.Descriptor instead.
func (*StreamPlayerConfig) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{108}
}

func (x *StreamPlayerConfig) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerConfig) GetPlayerType() PlayerType {
	if x != nil {
		return x.PlayerType
	}
	return PlayerType_PlayerTypeAuto
}

func (x *StreamPlayerConfig) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *StreamPlayerConfig) GetStreamPlaybackConfig() *StreamPlaybackConfig {
	if x != nil {
		return x.StreamPlaybackConfig
	}
	return nil
}

type AddStreamPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamPlayerConfig    `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamPlayerRequest) Reset() {
	*x = AddStreamPlayerRequest{}
	mi := &file_streamd_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamPlayerRequest) ProtoMessage() {}

func (x *AddStreamPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamPlayerRequest.ProtoReflect.Descriptor instead.
func (*AddStreamPlayerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{109}
}

func (x *AddStreamPlayerRequest) GetConfig() *StreamPlayerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddStreamPlayerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddStreamPlayerReply) Reset() {
	*x = AddStreamPlayerReply{}
	mi := &file_streamd_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddStreamPlayerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddStreamPlayerReply) ProtoMessage() {}

func (x *AddStreamPlayerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddStreamPlayerReply.ProtoReflect.Descriptor instead.
func (*AddStreamPlayerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{110}
}

type RemoveStreamPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamPlayerRequest) Reset() {
	*x = RemoveStreamPlayerRequest{}
	mi := &file_streamd_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamPlayerRequest) ProtoMessage() {}

func (x *RemoveStreamPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamPlayerRequest.ProtoReflect.Descriptor instead.
func (*RemoveStreamPlayerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{111}
}

func (x *RemoveStreamPlayerRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type RemoveStreamPlayerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveStreamPlayerReply) Reset() {
	*x = RemoveStreamPlayerReply{}
	mi := &file_streamd_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveStreamPlayerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveStreamPlayerReply) ProtoMessage() {}

func (x *RemoveStreamPlayerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveStreamPlayerReply.ProtoReflect.Descriptor instead.
func (*RemoveStreamPlayerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{112}
}

type UpdateStreamPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamPlayerConfig    `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamPlayerRequest) Reset() {
	*x = UpdateStreamPlayerRequest{}
	mi := &file_streamd_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamPlayerRequest) ProtoMessage() {}

func (x *UpdateStreamPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamPlayerRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamPlayerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{113}
}

func (x *UpdateStreamPlayerRequest) GetConfig() *StreamPlayerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateStreamPlayerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateStreamPlayerReply) Reset() {
	*x = UpdateStreamPlayerReply{}
	mi := &file_streamd_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateStreamPlayerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamPlayerReply) ProtoMessage() {}

func (x *UpdateStreamPlayerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamPlayerReply.ProtoReflect.Descriptor instead.
func (*UpdateStreamPlayerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{114}
}

type ListStreamPlayersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamPlayersRequest) Reset() {
	*x = ListStreamPlayersRequest{}
	mi := &file_streamd_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamPlayersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamPlayersRequest) ProtoMessage() {}

func (x *ListStreamPlayersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamPlayersRequest.ProtoReflect.Descriptor instead.
func (*ListStreamPlayersRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{115}
}

type ListStreamPlayersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*StreamPlayerConfig  `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStreamPlayersReply) Reset() {
	*x = ListStreamPlayersReply{}
	mi := &file_streamd_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStreamPlayersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamPlayersReply) ProtoMessage() {}

func (x *ListStreamPlayersReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamPlayersReply.ProtoReflect.Descriptor instead.
func (*ListStreamPlayersReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{116}
}

func (x *ListStreamPlayersReply) GetPlayers() []*StreamPlayerConfig {
	if x != nil {
		return x.Players
	}
	return nil
}

type GetStreamPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamID      string                 `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamPlayerRequest) Reset() {
	*x = GetStreamPlayerRequest{}
	mi := &file_streamd_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamPlayerRequest) ProtoMessage() {}

func (x *GetStreamPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamPlayerRequest.ProtoReflect.Descriptor instead.
func (*GetStreamPlayerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{117}
}

func (x *GetStreamPlayerRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

type GetStreamPlayerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *StreamPlayerConfig    `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamPlayerReply) Reset() {
	*x = GetStreamPlayerReply{}
	mi := &file_streamd_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamPlayerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamPlayerReply) ProtoMessage() {}

func (x *GetStreamPlayerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamPlayerReply.ProtoReflect.Descriptor instead.
func (*GetStreamPlayerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{118}
}

func (x *GetStreamPlayerReply) GetConfig() *StreamPlayerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type StreamPlayerOpenRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	StreamID      string                   `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.OpenRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerOpenRequest) Reset() {
	*x = StreamPlayerOpenRequest{}
	mi := &file_streamd_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerOpenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerOpenRequest) ProtoMessage() {}

func (x *StreamPlayerOpenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerOpenRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerOpenRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{119}
}

func (x *StreamPlayerOpenRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerOpenRequest) GetRequest() *player_grpc.OpenRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerOpenReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reply         *player_grpc.OpenReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerOpenReply) Reset() {
	*x = StreamPlayerOpenReply{}
	mi := &file_streamd_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerOpenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerOpenReply) ProtoMessage() {}

func (x *StreamPlayerOpenReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerOpenReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerOpenReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{120}
}

func (x *StreamPlayerOpenReply) GetReply() *player_grpc.OpenReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerProcessTitleRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	StreamID      string                           `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.ProcessTitleRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerProcessTitleRequest) Reset() {
	*x = StreamPlayerProcessTitleRequest{}
	mi := &file_streamd_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerProcessTitleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerProcessTitleRequest) ProtoMessage() {}

func (x *StreamPlayerProcessTitleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerProcessTitleRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerProcessTitleRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{121}
}

func (x *StreamPlayerProcessTitleRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerProcessTitleRequest) GetRequest() *player_grpc.ProcessTitleRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerProcessTitleReply struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Reply         *player_grpc.ProcessTitleReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerProcessTitleReply) Reset() {
	*x = StreamPlayerProcessTitleReply{}
	mi := &file_streamd_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerProcessTitleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerProcessTitleReply) ProtoMessage() {}

func (x *StreamPlayerProcessTitleReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerProcessTitleReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerProcessTitleReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{122}
}

func (x *StreamPlayerProcessTitleReply) GetReply() *player_grpc.ProcessTitleReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerGetLinkRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	StreamID      string                      `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.GetLinkRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetLinkRequest) Reset() {
	*x = StreamPlayerGetLinkRequest{}
	mi := &file_streamd_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetLinkRequest) ProtoMessage() {}

func (x *StreamPlayerGetLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetLinkRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetLinkRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{123}
}

func (x *StreamPlayerGetLinkRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerGetLinkRequest) GetRequest() *player_grpc.GetLinkRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerGetLinkReply struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Reply         *player_grpc.GetLinkReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetLinkReply) Reset() {
	*x = StreamPlayerGetLinkReply{}
	mi := &file_streamd_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetLinkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetLinkReply) ProtoMessage() {}

func (x *StreamPlayerGetLinkReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetLinkReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetLinkReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{124}
}

func (x *StreamPlayerGetLinkReply) GetReply() *player_grpc.GetLinkReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerEndChanRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	StreamID      string                      `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.EndChanRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerEndChanRequest) Reset() {
	*x = StreamPlayerEndChanRequest{}
	mi := &file_streamd_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerEndChanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerEndChanRequest) ProtoMessage() {}

func (x *StreamPlayerEndChanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerEndChanRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerEndChanRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{125}
}

func (x *StreamPlayerEndChanRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerEndChanRequest) GetRequest() *player_grpc.EndChanRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerEndChanReply struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Reply         *player_grpc.EndChanReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerEndChanReply) Reset() {
	*x = StreamPlayerEndChanReply{}
	mi := &file_streamd_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerEndChanReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerEndChanReply) ProtoMessage() {}

func (x *StreamPlayerEndChanReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerEndChanReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerEndChanReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{126}
}

func (x *StreamPlayerEndChanReply) GetReply() *player_grpc.EndChanReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerIsEndedRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	StreamID      string                      `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.IsEndedRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerIsEndedRequest) Reset() {
	*x = StreamPlayerIsEndedRequest{}
	mi := &file_streamd_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerIsEndedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerIsEndedRequest) ProtoMessage() {}

func (x *StreamPlayerIsEndedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerIsEndedRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerIsEndedRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{127}
}

func (x *StreamPlayerIsEndedRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerIsEndedRequest) GetRequest() *player_grpc.IsEndedRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerIsEndedReply struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Reply         *player_grpc.IsEndedReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerIsEndedReply) Reset() {
	*x = StreamPlayerIsEndedReply{}
	mi := &file_streamd_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerIsEndedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerIsEndedReply) ProtoMessage() {}

func (x *StreamPlayerIsEndedReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerIsEndedReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerIsEndedReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{128}
}

func (x *StreamPlayerIsEndedReply) GetReply() *player_grpc.IsEndedReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerGetPositionRequest struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	StreamID      string                          `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.GetPositionRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetPositionRequest) Reset() {
	*x = StreamPlayerGetPositionRequest{}
	mi := &file_streamd_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetPositionRequest) ProtoMessage() {}

func (x *StreamPlayerGetPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetPositionRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetPositionRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{129}
}

func (x *StreamPlayerGetPositionRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerGetPositionRequest) GetRequest() *player_grpc.GetPositionRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerGetPositionReply struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Reply         *player_grpc.GetPositionReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetPositionReply) Reset() {
	*x = StreamPlayerGetPositionReply{}
	mi := &file_streamd_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetPositionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetPositionReply) ProtoMessage() {}

func (x *StreamPlayerGetPositionReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetPositionReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetPositionReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{130}
}

func (x *StreamPlayerGetPositionReply) GetReply() *player_grpc.GetPositionReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerGetLengthRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	StreamID      string                        `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.GetLengthRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetLengthRequest) Reset() {
	*x = StreamPlayerGetLengthRequest{}
	mi := &file_streamd_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetLengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetLengthRequest) ProtoMessage() {}

func (x *StreamPlayerGetLengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetLengthRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetLengthRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{131}
}

func (x *StreamPlayerGetLengthRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerGetLengthRequest) GetRequest() *player_grpc.GetLengthRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerGetLengthReply struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Reply         *player_grpc.GetLengthReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerGetLengthReply) Reset() {
	*x = StreamPlayerGetLengthReply{}
	mi := &file_streamd_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerGetLengthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerGetLengthReply) ProtoMessage() {}

func (x *StreamPlayerGetLengthReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerGetLengthReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerGetLengthReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{132}
}

func (x *StreamPlayerGetLengthReply) GetReply() *player_grpc.GetLengthReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerSetSpeedRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	StreamID      string                       `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.SetSpeedRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerSetSpeedRequest) Reset() {
	*x = StreamPlayerSetSpeedRequest{}
	mi := &file_streamd_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerSetSpeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerSetSpeedRequest) ProtoMessage() {}

func (x *StreamPlayerSetSpeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerSetSpeedRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerSetSpeedRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{133}
}

func (x *StreamPlayerSetSpeedRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerSetSpeedRequest) GetRequest() *player_grpc.SetSpeedRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerSetSpeedReply struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Reply         *player_grpc.SetSpeedReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerSetSpeedReply) Reset() {
	*x = StreamPlayerSetSpeedReply{}
	mi := &file_streamd_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerSetSpeedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerSetSpeedReply) ProtoMessage() {}

func (x *StreamPlayerSetSpeedReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerSetSpeedReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerSetSpeedReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{134}
}

func (x *StreamPlayerSetSpeedReply) GetReply() *player_grpc.SetSpeedReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerSetPauseRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	StreamID      string                       `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.SetPauseRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerSetPauseRequest) Reset() {
	*x = StreamPlayerSetPauseRequest{}
	mi := &file_streamd_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerSetPauseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerSetPauseRequest) ProtoMessage() {}

func (x *StreamPlayerSetPauseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerSetPauseRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerSetPauseRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{135}
}

func (x *StreamPlayerSetPauseRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerSetPauseRequest) GetRequest() *player_grpc.SetPauseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerSetPauseReply struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Reply         *player_grpc.SetPauseReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerSetPauseReply) Reset() {
	*x = StreamPlayerSetPauseReply{}
	mi := &file_streamd_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerSetPauseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerSetPauseReply) ProtoMessage() {}

func (x *StreamPlayerSetPauseReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerSetPauseReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerSetPauseReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{136}
}

func (x *StreamPlayerSetPauseReply) GetReply() *player_grpc.SetPauseReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerStopRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	StreamID      string                   `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.StopRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerStopRequest) Reset() {
	*x = StreamPlayerStopRequest{}
	mi := &file_streamd_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerStopRequest) ProtoMessage() {}

func (x *StreamPlayerStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerStopRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerStopRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{137}
}

func (x *StreamPlayerStopRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerStopRequest) GetRequest() *player_grpc.StopRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerStopReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reply         *player_grpc.StopReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerStopReply) Reset() {
	*x = StreamPlayerStopReply{}
	mi := &file_streamd_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerStopReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerStopReply) ProtoMessage() {}

func (x *StreamPlayerStopReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerStopReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerStopReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{138}
}

func (x *StreamPlayerStopReply) GetReply() *player_grpc.StopReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StreamPlayerCloseRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	StreamID      string                    `protobuf:"bytes,1,opt,name=streamID,proto3" json:"streamID,omitempty"`
	Request       *player_grpc.CloseRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerCloseRequest) Reset() {
	*x = StreamPlayerCloseRequest{}
	mi := &file_streamd_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerCloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerCloseRequest) ProtoMessage() {}

func (x *StreamPlayerCloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerCloseRequest.ProtoReflect.Descriptor instead.
func (*StreamPlayerCloseRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{139}
}

func (x *StreamPlayerCloseRequest) GetStreamID() string {
	if x != nil {
		return x.StreamID
	}
	return ""
}

func (x *StreamPlayerCloseRequest) GetRequest() *player_grpc.CloseRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type StreamPlayerCloseReply struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Reply         *player_grpc.CloseReply `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayerCloseReply) Reset() {
	*x = StreamPlayerCloseReply{}
	mi := &file_streamd_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayerCloseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayerCloseReply) ProtoMessage() {}

func (x *StreamPlayerCloseReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayerCloseReply.ProtoReflect.Descriptor instead.
func (*StreamPlayerCloseReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{140}
}

func (x *StreamPlayerCloseReply) GetReply() *player_grpc.CloseReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type SubscribeToConfigChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToConfigChangesRequest) Reset() {
	*x = SubscribeToConfigChangesRequest{}
	mi := &file_streamd_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToConfigChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToConfigChangesRequest) ProtoMessage() {}

func (x *SubscribeToConfigChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToConfigChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToConfigChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{141}
}

type ConfigChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigChange) Reset() {
	*x = ConfigChange{}
	mi := &file_streamd_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigChange) ProtoMessage() {}

func (x *ConfigChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigChange.ProtoReflect.Descriptor instead.
func (*ConfigChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{142}
}

type SubscribeToStreamsChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToStreamsChangesRequest) Reset() {
	*x = SubscribeToStreamsChangesRequest{}
	mi := &file_streamd_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToStreamsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToStreamsChangesRequest) ProtoMessage() {}

func (x *SubscribeToStreamsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToStreamsChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToStreamsChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{143}
}

type StreamsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamsChange) Reset() {
	*x = StreamsChange{}
	mi := &file_streamd_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamsChange) ProtoMessage() {}

func (x *StreamsChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamsChange.ProtoReflect.Descriptor instead.
func (*StreamsChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{144}
}

type SubscribeToStreamServersChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToStreamServersChangesRequest) Reset() {
	*x = SubscribeToStreamServersChangesRequest{}
	mi := &file_streamd_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToStreamServersChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToStreamServersChangesRequest) ProtoMessage() {}

func (x *SubscribeToStreamServersChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToStreamServersChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToStreamServersChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{145}
}

type StreamServersChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamServersChange) Reset() {
	*x = StreamServersChange{}
	mi := &file_streamd_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamServersChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamServersChange) ProtoMessage() {}

func (x *StreamServersChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamServersChange.ProtoReflect.Descriptor instead.
func (*StreamServersChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{146}
}

type SubscribeToStreamDestinationsChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToStreamDestinationsChangesRequest) Reset() {
	*x = SubscribeToStreamDestinationsChangesRequest{}
	mi := &file_streamd_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToStreamDestinationsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToStreamDestinationsChangesRequest) ProtoMessage() {}

func (x *SubscribeToStreamDestinationsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToStreamDestinationsChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToStreamDestinationsChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{147}
}

type StreamDestinationsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDestinationsChange) Reset() {
	*x = StreamDestinationsChange{}
	mi := &file_streamd_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDestinationsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDestinationsChange) ProtoMessage() {}

func (x *StreamDestinationsChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDestinationsChange.ProtoReflect.Descriptor instead.
func (*StreamDestinationsChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{148}
}

type SubscribeToIncomingStreamsChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToIncomingStreamsChangesRequest) Reset() {
	*x = SubscribeToIncomingStreamsChangesRequest{}
	mi := &file_streamd_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToIncomingStreamsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToIncomingStreamsChangesRequest) ProtoMessage() {}

func (x *SubscribeToIncomingStreamsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToIncomingStreamsChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToIncomingStreamsChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{149}
}

type IncomingStreamsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncomingStreamsChange) Reset() {
	*x = IncomingStreamsChange{}
	mi := &file_streamd_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncomingStreamsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingStreamsChange) ProtoMessage() {}

func (x *IncomingStreamsChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingStreamsChange.ProtoReflect.Descriptor instead.
func (*IncomingStreamsChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{150}
}

type SubscribeToStreamForwardsChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToStreamForwardsChangesRequest) Reset() {
	*x = SubscribeToStreamForwardsChangesRequest{}
	mi := &file_streamd_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToStreamForwardsChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToStreamForwardsChangesRequest) ProtoMessage() {}

func (x *SubscribeToStreamForwardsChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToStreamForwardsChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToStreamForwardsChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{151}
}

type StreamForwardsChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamForwardsChange) Reset() {
	*x = StreamForwardsChange{}
	mi := &file_streamd_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamForwardsChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamForwardsChange) ProtoMessage() {}

func (x *StreamForwardsChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamForwardsChange.ProtoReflect.Descriptor instead.
func (*StreamForwardsChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{152}
}

type SubscribeToStreamPlayersChangesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToStreamPlayersChangesRequest) Reset() {
	*x = SubscribeToStreamPlayersChangesRequest{}
	mi := &file_streamd_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToStreamPlayersChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToStreamPlayersChangesRequest) ProtoMessage() {}

func (x *SubscribeToStreamPlayersChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToStreamPlayersChangesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToStreamPlayersChangesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{153}
}

type StreamPlayersChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPlayersChange) Reset() {
	*x = StreamPlayersChange{}
	mi := &file_streamd_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPlayersChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPlayersChange) ProtoMessage() {}

func (x *StreamPlayersChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPlayersChange.ProtoReflect.Descriptor instead.
func (*StreamPlayersChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{154}
}

type NoopRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoopRequest) Reset() {
	*x = NoopRequest{}
	mi := &file_streamd_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoopRequest) ProtoMessage() {}

func (x *NoopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoopRequest.ProtoReflect.Descriptor instead.
func (*NoopRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{155}
}

type OBSActionItemShowHide struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ItemName        *string                `protobuf:"bytes,1,opt,name=itemName,proto3,oneof" json:"itemName,omitempty"`
	ItemUUID        *string                `protobuf:"bytes,2,opt,name=itemUUID,proto3,oneof" json:"itemUUID,omitempty"`
	ValueExpression string                 `protobuf:"bytes,3,opt,name=valueExpression,proto3" json:"valueExpression,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OBSActionItemShowHide) Reset() {
	*x = OBSActionItemShowHide{}
	mi := &file_streamd_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSActionItemShowHide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSActionItemShowHide) ProtoMessage() {}

func (x *OBSActionItemShowHide) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSActionItemShowHide.ProtoReflect.Descriptor instead.
func (*OBSActionItemShowHide) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{156}
}

func (x *OBSActionItemShowHide) GetItemName() string {
	if x != nil && x.ItemName != nil {
		return *x.ItemName
	}
	return ""
}

func (x *OBSActionItemShowHide) GetItemUUID() string {
	if x != nil && x.ItemUUID != nil {
		return *x.ItemUUID
	}
	return ""
}

func (x *OBSActionItemShowHide) GetValueExpression() string {
	if x != nil {
		return x.ValueExpression
	}
	return ""
}

type OBSActionWindowCaptureSetSource struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ItemName        *string                `protobuf:"bytes,1,opt,name=itemName,proto3,oneof" json:"itemName,omitempty"`
	ItemUUID        *string                `protobuf:"bytes,2,opt,name=itemUUID,proto3,oneof" json:"itemUUID,omitempty"`
	ValueExpression string                 `protobuf:"bytes,3,opt,name=valueExpression,proto3" json:"valueExpression,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OBSActionWindowCaptureSetSource) Reset() {
	*x = OBSActionWindowCaptureSetSource{}
	mi := &file_streamd_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSActionWindowCaptureSetSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSActionWindowCaptureSetSource) ProtoMessage() {}

func (x *OBSActionWindowCaptureSetSource) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSActionWindowCaptureSetSource.ProtoReflect.Descriptor instead.
func (*OBSActionWindowCaptureSetSource) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{157}
}

func (x *OBSActionWindowCaptureSetSource) GetItemName() string {
	if x != nil && x.ItemName != nil {
		return *x.ItemName
	}
	return ""
}

func (x *OBSActionWindowCaptureSetSource) GetItemUUID() string {
	if x != nil && x.ItemUUID != nil {
		return *x.ItemUUID
	}
	return ""
}

func (x *OBSActionWindowCaptureSetSource) GetValueExpression() string {
	if x != nil {
		return x.ValueExpression
	}
	return ""
}

type OBSAction struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to OBSActionOneOf:
	//
	//	*OBSAction_ItemShowHide
	//	*OBSAction_WindowCaptureSetSource
	OBSActionOneOf isOBSAction_OBSActionOneOf `protobuf_oneof:"OBSActionOneOf"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OBSAction) Reset() {
	*x = OBSAction{}
	mi := &file_streamd_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OBSAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OBSAction) ProtoMessage() {}

func (x *OBSAction) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OBSAction.ProtoReflect.Descriptor instead.
func (*OBSAction) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{158}
}

func (x *OBSAction) GetOBSActionOneOf() isOBSAction_OBSActionOneOf {
	if x != nil {
		return x.OBSActionOneOf
	}
	return nil
}

func (x *OBSAction) GetItemShowHide() *OBSActionItemShowHide {
	if x != nil {
		if x, ok := x.OBSActionOneOf.(*OBSAction_ItemShowHide); ok {
			return x.ItemShowHide
		}
	}
	return nil
}

func (x *OBSAction) GetWindowCaptureSetSource() *OBSActionWindowCaptureSetSource {
	if x != nil {
		if x, ok := x.OBSActionOneOf.(*OBSAction_WindowCaptureSetSource); ok {
			return x.WindowCaptureSetSource
		}
	}
	return nil
}

type isOBSAction_OBSActionOneOf interface {
	isOBSAction_OBSActionOneOf()
}

type OBSAction_ItemShowHide struct {
	ItemShowHide *OBSActionItemShowHide `protobuf:"bytes,1,opt,name=itemShowHide,proto3,oneof"`
}

type OBSAction_WindowCaptureSetSource struct {
	WindowCaptureSetSource *OBSActionWindowCaptureSetSource `protobuf:"bytes,2,opt,name=windowCaptureSetSource,proto3,oneof"`
}

func (*OBSAction_ItemShowHide) isOBSAction_OBSActionOneOf() {}

func (*OBSAction_WindowCaptureSetSource) isOBSAction_OBSActionOneOf() {}

type Action struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ActionOneof:
	//
	//	*Action_NoopRequest
	//	*Action_StartStreamRequest
	//	*Action_StartStreamByProfileNameRequest
	//	*Action_EndStreamRequest
	//	*Action_ObsAction
	ActionOneof   isAction_ActionOneof `protobuf_oneof:"ActionOneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Action) Reset() {
	*x = Action{}
	mi := &file_streamd_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{159}
}

func (x *Action) GetActionOneof() isAction_ActionOneof {
	if x != nil {
		return x.ActionOneof
	}
	return nil
}

func (x *Action) GetNoopRequest() *NoopRequest {
	if x != nil {
		if x, ok := x.ActionOneof.(*Action_NoopRequest); ok {
			return x.NoopRequest
		}
	}
	return nil
}

func (x *Action) GetStartStreamRequest() *StartStreamRequest {
	if x != nil {
		if x, ok := x.ActionOneof.(*Action_StartStreamRequest); ok {
			return x.StartStreamRequest
		}
	}
	return nil
}

func (x *Action) GetStartStreamByProfileNameRequest() *StartStreamByProfileNameRequest {
	if x != nil {
		if x, ok := x.ActionOneof.(*Action_StartStreamByProfileNameRequest); ok {
			return x.StartStreamByProfileNameRequest
		}
	}
	return nil
}

func (x *Action) GetEndStreamRequest() *EndStreamRequest {
	if x != nil {
		if x, ok := x.ActionOneof.(*Action_EndStreamRequest); ok {
			return x.EndStreamRequest
		}
	}
	return nil
}

func (x *Action) GetObsAction() *OBSAction {
	if x != nil {
		if x, ok := x.ActionOneof.(*Action_ObsAction); ok {
			return x.ObsAction
		}
	}
	return nil
}

type isAction_ActionOneof interface {
	isAction_ActionOneof()
}

type Action_NoopRequest struct {
	NoopRequest *NoopRequest `protobuf:"bytes,1,opt,name=noopRequest,proto3,oneof"`
}

type Action_StartStreamRequest struct {
	StartStreamRequest *StartStreamRequest `protobuf:"bytes,2,opt,name=startStreamRequest,proto3,oneof"`
}

type Action_StartStreamByProfileNameRequest struct {
	StartStreamByProfileNameRequest *StartStreamByProfileNameRequest `protobuf:"bytes,3,opt,name=startStreamByProfileNameRequest,proto3,oneof"`
}

type Action_EndStreamRequest struct {
	EndStreamRequest *EndStreamRequest `protobuf:"bytes,4,opt,name=endStreamRequest,proto3,oneof"`
}

type Action_ObsAction struct {
	ObsAction *OBSAction `protobuf:"bytes,5,opt,name=obsAction,proto3,oneof"`
}

func (*Action_NoopRequest) isAction_ActionOneof() {}

func (*Action_StartStreamRequest) isAction_ActionOneof() {}

func (*Action_StartStreamByProfileNameRequest) isAction_ActionOneof() {}

func (*Action_EndStreamRequest) isAction_ActionOneof() {}

func (*Action_ObsAction) isAction_ActionOneof() {}

type AddTimerRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TriggerAtUnixNano int64                  `protobuf:"varint,1,opt,name=triggerAtUnixNano,proto3" json:"triggerAtUnixNano,omitempty"`
	Action            *Action                `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AddTimerRequest) Reset() {
	*x = AddTimerRequest{}
	mi := &file_streamd_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTimerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTimerRequest) ProtoMessage() {}

func (x *AddTimerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTimerRequest.ProtoReflect.Descriptor instead.
func (*AddTimerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{160}
}

func (x *AddTimerRequest) GetTriggerAtUnixNano() int64 {
	if x != nil {
		return x.TriggerAtUnixNano
	}
	return 0
}

func (x *AddTimerRequest) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type AddTimerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimerID       int64                  `protobuf:"varint,1,opt,name=timerID,proto3" json:"timerID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTimerReply) Reset() {
	*x = AddTimerReply{}
	mi := &file_streamd_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTimerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTimerReply) ProtoMessage() {}

func (x *AddTimerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTimerReply.ProtoReflect.Descriptor instead.
func (*AddTimerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{161}
}

func (x *AddTimerReply) GetTimerID() int64 {
	if x != nil {
		return x.TimerID
	}
	return 0
}

type RemoveTimerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimerID       int64                  `protobuf:"varint,1,opt,name=timerID,proto3" json:"timerID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTimerRequest) Reset() {
	*x = RemoveTimerRequest{}
	mi := &file_streamd_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTimerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTimerRequest) ProtoMessage() {}

func (x *RemoveTimerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTimerRequest.ProtoReflect.Descriptor instead.
func (*RemoveTimerRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{162}
}

func (x *RemoveTimerRequest) GetTimerID() int64 {
	if x != nil {
		return x.TimerID
	}
	return 0
}

type RemoveTimerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTimerReply) Reset() {
	*x = RemoveTimerReply{}
	mi := &file_streamd_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTimerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTimerReply) ProtoMessage() {}

func (x *RemoveTimerReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTimerReply.ProtoReflect.Descriptor instead.
func (*RemoveTimerReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{163}
}

type Timer struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TimerID           int64                  `protobuf:"varint,1,opt,name=timerID,proto3" json:"timerID,omitempty"`
	TriggerAtUnixNano int64                  `protobuf:"varint,2,opt,name=triggerAtUnixNano,proto3" json:"triggerAtUnixNano,omitempty"`
	Action            *Action                `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Timer) Reset() {
	*x = Timer{}
	mi := &file_streamd_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Timer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timer) ProtoMessage() {}

func (x *Timer) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timer.ProtoReflect.Descriptor instead.
func (*Timer) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{164}
}

func (x *Timer) GetTimerID() int64 {
	if x != nil {
		return x.TimerID
	}
	return 0
}

func (x *Timer) GetTriggerAtUnixNano() int64 {
	if x != nil {
		return x.TriggerAtUnixNano
	}
	return 0
}

func (x *Timer) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type ListTimersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTimersRequest) Reset() {
	*x = ListTimersRequest{}
	mi := &file_streamd_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTimersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimersRequest) ProtoMessage() {}

func (x *ListTimersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimersRequest.ProtoReflect.Descriptor instead.
func (*ListTimersRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{165}
}

type ListTimersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timers        []*Timer               `protobuf:"bytes,1,rep,name=timers,proto3" json:"timers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTimersReply) Reset() {
	*x = ListTimersReply{}
	mi := &file_streamd_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTimersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimersReply) ProtoMessage() {}

func (x *ListTimersReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimersReply.ProtoReflect.Descriptor instead.
func (*ListTimersReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{166}
}

func (x *ListTimersReply) GetTimers() []*Timer {
	if x != nil {
		return x.Timers
	}
	return nil
}

type EventQueryAnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Event               `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventQueryAnd) Reset() {
	*x = EventQueryAnd{}
	mi := &file_streamd_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventQueryAnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQueryAnd) ProtoMessage() {}

func (x *EventQueryAnd) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQueryAnd.ProtoReflect.Descriptor instead.
func (*EventQueryAnd) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{167}
}

func (x *EventQueryAnd) GetQueries() []*Event {
	if x != nil {
		return x.Queries
	}
	return nil
}

type EventQueryOr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Queries       []*Event               `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventQueryOr) Reset() {
	*x = EventQueryOr{}
	mi := &file_streamd_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventQueryOr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQueryOr) ProtoMessage() {}

func (x *EventQueryOr) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQueryOr.ProtoReflect.Descriptor instead.
func (*EventQueryOr) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{168}
}

func (x *EventQueryOr) GetQueries() []*Event {
	if x != nil {
		return x.Queries
	}
	return nil
}

type EventQueryNot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *Event                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventQueryNot) Reset() {
	*x = EventQueryNot{}
	mi := &file_streamd_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventQueryNot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQueryNot) ProtoMessage() {}

func (x *EventQueryNot) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQueryNot.ProtoReflect.Descriptor instead.
func (*EventQueryNot) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{169}
}

func (x *EventQueryNot) GetQuery() *Event {
	if x != nil {
		return x.Query
	}
	return nil
}

type EventWindowFocusChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          *string                `protobuf:"bytes,1,opt,name=host,proto3,oneof" json:"host,omitempty"`
	WindowID      *uint64                `protobuf:"varint,2,opt,name=windowID,proto3,oneof" json:"windowID,omitempty"`
	WindowTitle   *string                `protobuf:"bytes,3,opt,name=windowTitle,proto3,oneof" json:"windowTitle,omitempty"`
	ProcessID     *uint64                `protobuf:"varint,4,opt,name=processID,proto3,oneof" json:"processID,omitempty"`
	ProcessName   *string                `protobuf:"bytes,5,opt,name=processName,proto3,oneof" json:"processName,omitempty"`
	UserID        *uint64                `protobuf:"varint,6,opt,name=userID,proto3,oneof" json:"userID,omitempty"`
	IsFocused     *bool                  `protobuf:"varint,7,opt,name=isFocused,proto3,oneof" json:"isFocused,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventWindowFocusChange) Reset() {
	*x = EventWindowFocusChange{}
	mi := &file_streamd_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventWindowFocusChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWindowFocusChange) ProtoMessage() {}

func (x *EventWindowFocusChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWindowFocusChange.ProtoReflect.Descriptor instead.
func (*EventWindowFocusChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{170}
}

func (x *EventWindowFocusChange) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *EventWindowFocusChange) GetWindowID() uint64 {
	if x != nil && x.WindowID != nil {
		return *x.WindowID
	}
	return 0
}

func (x *EventWindowFocusChange) GetWindowTitle() string {
	if x != nil && x.WindowTitle != nil {
		return *x.WindowTitle
	}
	return ""
}

func (x *EventWindowFocusChange) GetProcessID() uint64 {
	if x != nil && x.ProcessID != nil {
		return *x.ProcessID
	}
	return 0
}

func (x *EventWindowFocusChange) GetProcessName() string {
	if x != nil && x.ProcessName != nil {
		return *x.ProcessName
	}
	return ""
}

func (x *EventWindowFocusChange) GetUserID() uint64 {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return 0
}

func (x *EventWindowFocusChange) GetIsFocused() bool {
	if x != nil && x.IsFocused != nil {
		return *x.IsFocused
	}
	return false
}

type EventOBSSceneChange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          *string                `protobuf:"bytes,1,opt,name=from,proto3,oneof" json:"from,omitempty"`
	To            *string                `protobuf:"bytes,2,opt,name=to,proto3,oneof" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EventOBSSceneChange) Reset() {
	*x = EventOBSSceneChange{}
	mi := &file_streamd_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventOBSSceneChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOBSSceneChange) ProtoMessage() {}

func (x *EventOBSSceneChange) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOBSSceneChange.ProtoReflect.Descriptor instead.
func (*EventOBSSceneChange) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{171}
}

func (x *EventOBSSceneChange) GetFrom() string {
	if x != nil && x.From != nil {
		return *x.From
	}
	return ""
}

func (x *EventOBSSceneChange) GetTo() string {
	if x != nil && x.To != nil {
		return *x.To
	}
	return ""
}

type EventQuery struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EventQueryOneOf:
	//
	//	*EventQuery_And
	//	*EventQuery_Or
	//	*EventQuery_Not
	//	*EventQuery_EventType
	//	*EventQuery_Event
	EventQueryOneOf isEventQuery_EventQueryOneOf `protobuf_oneof:"EventQueryOneOf"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EventQuery) Reset() {
	*x = EventQuery{}
	mi := &file_streamd_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventQuery) ProtoMessage() {}

func (x *EventQuery) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventQuery.ProtoReflect.Descriptor instead.
func (*EventQuery) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{172}
}

func (x *EventQuery) GetEventQueryOneOf() isEventQuery_EventQueryOneOf {
	if x != nil {
		return x.EventQueryOneOf
	}
	return nil
}

func (x *EventQuery) GetAnd() *EventQueryAnd {
	if x != nil {
		if x, ok := x.EventQueryOneOf.(*EventQuery_And); ok {
			return x.And
		}
	}
	return nil
}

func (x *EventQuery) GetOr() *EventQueryOr {
	if x != nil {
		if x, ok := x.EventQueryOneOf.(*EventQuery_Or); ok {
			return x.Or
		}
	}
	return nil
}

func (x *EventQuery) GetNot() *EventQueryNot {
	if x != nil {
		if x, ok := x.EventQueryOneOf.(*EventQuery_Not); ok {
			return x.Not
		}
	}
	return nil
}

func (x *EventQuery) GetEventType() EventType {
	if x != nil {
		if x, ok := x.EventQueryOneOf.(*EventQuery_EventType); ok {
			return x.EventType
		}
	}
	return EventType_eventWindowFocusChange
}

func (x *EventQuery) GetEvent() *Event {
	if x != nil {
		if x, ok := x.EventQueryOneOf.(*EventQuery_Event); ok {
			return x.Event
		}
	}
	return nil
}

type isEventQuery_EventQueryOneOf interface {
	isEventQuery_EventQueryOneOf()
}

type EventQuery_And struct {
	And *EventQueryAnd `protobuf:"bytes,1,opt,name=and,proto3,oneof"`
}

type EventQuery_Or struct {
	Or *EventQueryOr `protobuf:"bytes,2,opt,name=or,proto3,oneof"`
}

type EventQuery_Not struct {
	Not *EventQueryNot `protobuf:"bytes,3,opt,name=not,proto3,oneof"`
}

type EventQuery_EventType struct {
	EventType EventType `protobuf:"varint,4,opt,name=eventType,proto3,enum=streamd.EventType,oneof"`
}

type EventQuery_Event struct {
	Event *Event `protobuf:"bytes,5,opt,name=event,proto3,oneof"`
}

func (*EventQuery_And) isEventQuery_EventQueryOneOf() {}

func (*EventQuery_Or) isEventQuery_EventQueryOneOf() {}

func (*EventQuery_Not) isEventQuery_EventQueryOneOf() {}

func (*EventQuery_EventType) isEventQuery_EventQueryOneOf() {}

func (*EventQuery_Event) isEventQuery_EventQueryOneOf() {}

type Event struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to EventOneOf:
	//
	//	*Event_ObsSceneChange
	//	*Event_WindowFocusChange
	EventOneOf    isEvent_EventOneOf `protobuf_oneof:"EventOneOf"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_streamd_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{173}
}

func (x *Event) GetEventOneOf() isEvent_EventOneOf {
	if x != nil {
		return x.EventOneOf
	}
	return nil
}

func (x *Event) GetObsSceneChange() *EventOBSSceneChange {
	if x != nil {
		if x, ok := x.EventOneOf.(*Event_ObsSceneChange); ok {
			return x.ObsSceneChange
		}
	}
	return nil
}

func (x *Event) GetWindowFocusChange() *EventWindowFocusChange {
	if x != nil {
		if x, ok := x.EventOneOf.(*Event_WindowFocusChange); ok {
			return x.WindowFocusChange
		}
	}
	return nil
}

type isEvent_EventOneOf interface {
	isEvent_EventOneOf()
}

type Event_ObsSceneChange struct {
	ObsSceneChange *EventOBSSceneChange `protobuf:"bytes,1,opt,name=obsSceneChange,proto3,oneof"`
}

type Event_WindowFocusChange struct {
	WindowFocusChange *EventWindowFocusChange `protobuf:"bytes,2,opt,name=windowFocusChange,proto3,oneof"`
}

func (*Event_ObsSceneChange) isEvent_EventOneOf() {}

func (*Event_WindowFocusChange) isEvent_EventOneOf() {}

type TriggerRule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Description   string                 `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	EventQuery    *EventQuery            `protobuf:"bytes,2,opt,name=eventQuery,proto3" json:"eventQuery,omitempty"`
	Action        *Action                `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerRule) Reset() {
	*x = TriggerRule{}
	mi := &file_streamd_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRule) ProtoMessage() {}

func (x *TriggerRule) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRule.ProtoReflect.Descriptor instead.
func (*TriggerRule) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{174}
}

func (x *TriggerRule) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TriggerRule) GetEventQuery() *EventQuery {
	if x != nil {
		return x.EventQuery
	}
	return nil
}

func (x *TriggerRule) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type ListTriggerRulesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTriggerRulesRequest) Reset() {
	*x = ListTriggerRulesRequest{}
	mi := &file_streamd_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggerRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggerRulesRequest) ProtoMessage() {}

func (x *ListTriggerRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggerRulesRequest.ProtoReflect.Descriptor instead.
func (*ListTriggerRulesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{175}
}

type ListTriggerRulesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*TriggerRule         `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTriggerRulesReply) Reset() {
	*x = ListTriggerRulesReply{}
	mi := &file_streamd_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggerRulesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggerRulesReply) ProtoMessage() {}

func (x *ListTriggerRulesReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggerRulesReply.ProtoReflect.Descriptor instead.
func (*ListTriggerRulesReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{176}
}

func (x *ListTriggerRulesReply) GetRules() []*TriggerRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type AddTriggerRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rule          *TriggerRule           `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTriggerRuleRequest) Reset() {
	*x = AddTriggerRuleRequest{}
	mi := &file_streamd_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTriggerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTriggerRuleRequest) ProtoMessage() {}

func (x *AddTriggerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTriggerRuleRequest.ProtoReflect.Descriptor instead.
func (*AddTriggerRuleRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{177}
}

func (x *AddTriggerRuleRequest) GetRule() *TriggerRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type AddTriggerRuleReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleID        uint64                 `protobuf:"varint,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddTriggerRuleReply) Reset() {
	*x = AddTriggerRuleReply{}
	mi := &file_streamd_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTriggerRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTriggerRuleReply) ProtoMessage() {}

func (x *AddTriggerRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTriggerRuleReply.ProtoReflect.Descriptor instead.
func (*AddTriggerRuleReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{178}
}

func (x *AddTriggerRuleReply) GetRuleID() uint64 {
	if x != nil {
		return x.RuleID
	}
	return 0
}

type RemoveTriggerRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleID        uint64                 `protobuf:"varint,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTriggerRuleRequest) Reset() {
	*x = RemoveTriggerRuleRequest{}
	mi := &file_streamd_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTriggerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTriggerRuleRequest) ProtoMessage() {}

func (x *RemoveTriggerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTriggerRuleRequest.ProtoReflect.Descriptor instead.
func (*RemoveTriggerRuleRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{179}
}

func (x *RemoveTriggerRuleRequest) GetRuleID() uint64 {
	if x != nil {
		return x.RuleID
	}
	return 0
}

type RemoveTriggerRuleReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveTriggerRuleReply) Reset() {
	*x = RemoveTriggerRuleReply{}
	mi := &file_streamd_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveTriggerRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTriggerRuleReply) ProtoMessage() {}

func (x *RemoveTriggerRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTriggerRuleReply.ProtoReflect.Descriptor instead.
func (*RemoveTriggerRuleReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{180}
}

type UpdateTriggerRuleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuleID        uint64                 `protobuf:"varint,1,opt,name=ruleID,proto3" json:"ruleID,omitempty"`
	Rule          *TriggerRule           `protobuf:"bytes,2,opt,name=rule,proto3" json:"rule,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTriggerRuleRequest) Reset() {
	*x = UpdateTriggerRuleRequest{}
	mi := &file_streamd_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTriggerRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggerRuleRequest) ProtoMessage() {}

func (x *UpdateTriggerRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriggerRuleRequest.ProtoReflect.Descriptor instead.
func (*UpdateTriggerRuleRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{181}
}

func (x *UpdateTriggerRuleRequest) GetRuleID() uint64 {
	if x != nil {
		return x.RuleID
	}
	return 0
}

func (x *UpdateTriggerRuleRequest) GetRule() *TriggerRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

type UpdateTriggerRuleReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateTriggerRuleReply) Reset() {
	*x = UpdateTriggerRuleReply{}
	mi := &file_streamd_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTriggerRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggerRuleReply) ProtoMessage() {}

func (x *UpdateTriggerRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTriggerRuleReply.ProtoReflect.Descriptor instead.
func (*UpdateTriggerRuleReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{182}
}

type SubmitEventRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Event         *Event                 `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitEventRequest) Reset() {
	*x = SubmitEventRequest{}
	mi := &file_streamd_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventRequest) ProtoMessage() {}

func (x *SubmitEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventRequest.ProtoReflect.Descriptor instead.
func (*SubmitEventRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{183}
}

func (x *SubmitEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

type SubmitEventReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitEventReply) Reset() {
	*x = SubmitEventReply{}
	mi := &file_streamd_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitEventReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitEventReply) ProtoMessage() {}

func (x *SubmitEventReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitEventReply.ProtoReflect.Descriptor instead.
func (*SubmitEventReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{184}
}

type SubscribeToChatMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SinceUNIXNano uint64                 `protobuf:"varint,1,opt,name=sinceUNIXNano,proto3" json:"sinceUNIXNano,omitempty"`
	Limit         uint64                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToChatMessagesRequest) Reset() {
	*x = SubscribeToChatMessagesRequest{}
	mi := &file_streamd_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToChatMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToChatMessagesRequest) ProtoMessage() {}

func (x *SubscribeToChatMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToChatMessagesRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToChatMessagesRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{185}
}

func (x *SubscribeToChatMessagesRequest) GetSinceUNIXNano() uint64 {
	if x != nil {
		return x.SinceUNIXNano
	}
	return 0
}

func (x *SubscribeToChatMessagesRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChatMessage struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAtUNIXNano uint64                 `protobuf:"varint,1,opt,name=createdAtUNIXNano,proto3" json:"createdAtUNIXNano,omitempty"`
	PlatID            string                 `protobuf:"bytes,2,opt,name=platID,proto3" json:"platID,omitempty"`
	IsLive            bool                   `protobuf:"varint,3,opt,name=isLive,proto3" json:"isLive,omitempty"`
	EventType         PlatformEventType      `protobuf:"varint,4,opt,name=eventType,proto3,enum=streamd.PlatformEventType" json:"eventType,omitempty"`
	UserID            string                 `protobuf:"bytes,5,opt,name=userID,proto3" json:"userID,omitempty"`
	Username          string                 `protobuf:"bytes,6,opt,name=username,proto3" json:"username,omitempty"`
	MessageID         string                 `protobuf:"bytes,7,opt,name=messageID,proto3" json:"messageID,omitempty"`
	Message           string                 `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ChatMessage) Reset() {
	*x = ChatMessage{}
	mi := &file_streamd_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatMessage) ProtoMessage() {}

func (x *ChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatMessage.ProtoReflect.Descriptor instead.
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{186}
}

func (x *ChatMessage) GetCreatedAtUNIXNano() uint64 {
	if x != nil {
		return x.CreatedAtUNIXNano
	}
	return 0
}

func (x *ChatMessage) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *ChatMessage) GetIsLive() bool {
	if x != nil {
		return x.IsLive
	}
	return false
}

func (x *ChatMessage) GetEventType() PlatformEventType {
	if x != nil {
		return x.EventType
	}
	return PlatformEventType_platformEventTypeUndefined
}

func (x *ChatMessage) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChatMessage) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ChatMessage) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

func (x *ChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendChatMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendChatMessageRequest) Reset() {
	*x = SendChatMessageRequest{}
	mi := &file_streamd_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageRequest) ProtoMessage() {}

func (x *SendChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageRequest.ProtoReflect.Descriptor instead.
func (*SendChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{187}
}

func (x *SendChatMessageRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *SendChatMessageRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type SendChatMessageReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendChatMessageReply) Reset() {
	*x = SendChatMessageReply{}
	mi := &file_streamd_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendChatMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageReply) ProtoMessage() {}

func (x *SendChatMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageReply.ProtoReflect.Descriptor instead.
func (*SendChatMessageReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{188}
}

type RemoveChatMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	MessageID     string                 `protobuf:"bytes,2,opt,name=messageID,proto3" json:"messageID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveChatMessageRequest) Reset() {
	*x = RemoveChatMessageRequest{}
	mi := &file_streamd_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveChatMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageRequest) ProtoMessage() {}

func (x *RemoveChatMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageRequest.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{189}
}

func (x *RemoveChatMessageRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *RemoveChatMessageRequest) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

type RemoveChatMessageReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveChatMessageReply) Reset() {
	*x = RemoveChatMessageReply{}
	mi := &file_streamd_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveChatMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChatMessageReply) ProtoMessage() {}

func (x *RemoveChatMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChatMessageReply.ProtoReflect.Descriptor instead.
func (*RemoveChatMessageReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{190}
}

type BanUserRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	PlatID           string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	UserID           string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	Reason           string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	DeadlineUnixNano *int64                 `protobuf:"varint,4,opt,name=deadlineUnixNano,proto3,oneof" json:"deadlineUnixNano,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *BanUserRequest) Reset() {
	*x = BanUserRequest{}
	mi := &file_streamd_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserRequest) ProtoMessage() {}

func (x *BanUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserRequest.ProtoReflect.Descriptor instead.
func (*BanUserRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{191}
}

func (x *BanUserRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *BanUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BanUserRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *BanUserRequest) GetDeadlineUnixNano() int64 {
	if x != nil && x.DeadlineUnixNano != nil {
		return *x.DeadlineUnixNano
	}
	return 0
}

type BanUserReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BanUserReply) Reset() {
	*x = BanUserReply{}
	mi := &file_streamd_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BanUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanUserReply) ProtoMessage() {}

func (x *BanUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanUserReply.ProtoReflect.Descriptor instead.
func (*BanUserReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{192}
}

type ShoutoutRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShoutoutRequest) Reset() {
	*x = ShoutoutRequest{}
	mi := &file_streamd_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShoutoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoutoutRequest) ProtoMessage() {}

func (x *ShoutoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoutoutRequest.ProtoReflect.Descriptor instead.
func (*ShoutoutRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{193}
}

func (x *ShoutoutRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *ShoutoutRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ShoutoutReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShoutoutReply) Reset() {
	*x = ShoutoutReply{}
	mi := &file_streamd_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShoutoutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShoutoutReply) ProtoMessage() {}

func (x *ShoutoutReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShoutoutReply.ProtoReflect.Descriptor instead.
func (*ShoutoutReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{194}
}

type RaidToRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlatID        string                 `protobuf:"bytes,1,opt,name=platID,proto3" json:"platID,omitempty"`
	UserID        string                 `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidToRequest) Reset() {
	*x = RaidToRequest{}
	mi := &file_streamd_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidToRequest) ProtoMessage() {}

func (x *RaidToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidToRequest.ProtoReflect.Descriptor instead.
func (*RaidToRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{195}
}

func (x *RaidToRequest) GetPlatID() string {
	if x != nil {
		return x.PlatID
	}
	return ""
}

func (x *RaidToRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type RaidToReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidToReply) Reset() {
	*x = RaidToReply{}
	mi := &file_streamd_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidToReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidToReply) ProtoMessage() {}

func (x *RaidToReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidToReply.ProtoReflect.Descriptor instead.
func (*RaidToReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{196}
}

type GetPeerIDsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerIDsRequest) Reset() {
	*x = GetPeerIDsRequest{}
	mi := &file_streamd_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerIDsRequest) ProtoMessage() {}

func (x *GetPeerIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerIDsRequest.ProtoReflect.Descriptor instead.
func (*GetPeerIDsRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{197}
}

type GetPeerIDsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerIDs       []string               `protobuf:"bytes,1,rep,name=peerIDs,proto3" json:"peerIDs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeerIDsReply) Reset() {
	*x = GetPeerIDsReply{}
	mi := &file_streamd_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeerIDsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeerIDsReply) ProtoMessage() {}

func (x *GetPeerIDsReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeerIDsReply.ProtoReflect.Descriptor instead.
func (*GetPeerIDsReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{198}
}

func (x *GetPeerIDsReply) GetPeerIDs() []string {
	if x != nil {
		return x.PeerIDs
	}
	return nil
}

type LLMGenerateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Prompt        string                 `protobuf:"bytes,1,opt,name=prompt,proto3" json:"prompt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMGenerateRequest) Reset() {
	*x = LLMGenerateRequest{}
	mi := &file_streamd_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMGenerateRequest) ProtoMessage() {}

func (x *LLMGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMGenerateRequest.ProtoReflect.Descriptor instead.
func (*LLMGenerateRequest) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{199}
}

func (x *LLMGenerateRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

type LLMGenerateReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LLMGenerateReply) Reset() {
	*x = LLMGenerateReply{}
	mi := &file_streamd_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LLMGenerateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LLMGenerateReply) ProtoMessage() {}

func (x *LLMGenerateReply) ProtoReflect() protoreflect.Message {
	mi := &file_streamd_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LLMGenerateReply.ProtoReflect.Descriptor instead.
func (*LLMGenerateReply) Descriptor() ([]byte, []int) {
	return file_streamd_proto_rawDescGZIP(), []int{200}
}

func (x *LLMGenerateReply) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_streamd_proto protoreflect.FileDescriptor

var file_streamd_proto_rawDesc = string([]byte{
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x1a, 0x13, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x01,
	0x0a, 0x0b, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6f, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x25, 0x0a, 0x09, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x39, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2a, 0x0a, 0x10, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a,
	0x0f, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x69, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7e,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x1f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x0a, 0x10,
	0x45, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x22, 0x10, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x28, 0x0a, 0x0d, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0c, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x17, 0x49, 0x73, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x15, 0x49,
	0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x0a, 0x0f,
	0x53, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x0f, 0x0a,
	0x0d, 0x53, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x51,
	0x0a, 0x15, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x47, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x7f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d, 0x0a, 0x2b,
	0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x65, 0x69,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2b, 0x0a, 0x29, 0x45,
	0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x65, 0x69, 0x6e,
	0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1d, 0x0a, 0x1b, 0x4f, 0x42, 0x53, 0x4f,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x47, 0x65, 0x74, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x47,
	0x65, 0x74, 0x47, 0x69, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x47, 0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x47,
	0x69, 0x74, 0x52, 0x65, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41,
	0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0x40, 0x0a, 0x0c, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x74,
	0x68, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x55, 0x52, 0x4c, 0x22, 0x26, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x3a, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x08,
	0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22,
	0x3c, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x12, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x2e, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x26, 0x0a, 0x0e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3d, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x58, 0x35, 0x30,
	0x39, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x58, 0x35, 0x30, 0x39, 0x42,
	0x15, 0x0a, 0x13, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0x37, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x4b, 0x43, 0x53, 0x38, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x50, 0x4b, 0x43, 0x53, 0x38, 0x42, 0x11, 0x0a, 0x0f,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22,
	0x90, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x73, 0x54, 0x4c, 0x53, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x54, 0x4c,
	0x53, 0x12, 0x26, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x12,
	0x3c, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x54, 0x4c,
	0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x01, 0x52, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x43, 0x65, 0x72, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4b,
	0x65, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a,
	0x15, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x4e, 0x75,
	0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x57, 0x72,
	0x6f, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x4e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3f, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x63, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x49, 0x0a, 0x0d,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x49, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x39, 0x0a, 0x17,
	0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x69, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0x1f, 0x0a, 0x1d, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x51, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x54, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1e, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x46, 0x0a,
	0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x48, 0x0a, 0x0e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x36, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x39, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x1b, 0x0a, 0x19,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x23, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x22, 0x3d, 0x0a, 0x21, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x8f, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x12, 0x7e, 0x0a, 0x23, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x59,
	0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x23, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67,
	0x6e, 0x69, 0x7a, 0x65, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x78, 0x0a, 0x21, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x6f, 0x75, 0x74, 0x75,
	0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x21, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x59, 0x6f,
	0x75, 0x74, 0x75, 0x62, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x51, 0x75, 0x69, 0x72, 0x6b,
	0x73, 0x52, 0x06, 0x71, 0x75, 0x69, 0x72, 0x6b, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x0d, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x12, 0x47, 0x0a, 0x11,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x6c, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x12,
	0x32, 0x0a, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x22, 0x4a, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0x6c, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x44, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x6f,
	0x0a, 0x11, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x2f,
	0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22,
	0x76, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2a, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x42, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x56, 0x69, 0x64, 0x65, 0x6f,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x63, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x57, 0x72, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61, 0x64, 0x22, 0x8f, 0x01, 0x0a,
	0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x69,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x1b,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x67, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x57, 0x69, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x22, 0x49, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x17, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x4c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6f, 0x0a, 0x1d,
	0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x78, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x11, 0x0a,
	0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x22, 0x8e, 0x03, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x4a, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x42, 0x75, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x42, 0x75, 0x66, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x34, 0x0a, 0x15, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x4d, 0x61, 0x78, 0x53, 0x70, 0x65, 0x65, 0x64, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x63,
	0x68, 0x75, 0x70, 0x41, 0x74, 0x4c, 0x61, 0x67, 0x53, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x74, 0x63, 0x68, 0x75, 0x70, 0x41, 0x74,
	0x4c, 0x61, 0x67, 0x53, 0x65, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x55, 0x52, 0x4c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e,
	0x55, 0x52, 0x4c, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x14, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4d, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x37, 0x0a, 0x19, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x50, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x19, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x1a, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x16,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x34, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x64, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x27, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x74, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x50,
	0x0a, 0x1d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x18,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x46, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x45,
	0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x46, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x72, 0x0a, 0x1e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4e, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2e, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x6e, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x4a, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6c, 0x0a, 0x1b,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x6c, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12,
	0x31, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x48, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2b, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x64, 0x0a, 0x17,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x66, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x16,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x21, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x28, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x26,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x0d, 0x0a,
	0x0b, 0x4e, 0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9d, 0x01, 0x0a,
	0x15, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x68,
	0x6f, 0x77, 0x48, 0x69, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65,
	0x6d, 0x55, 0x55, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a,
	0x1f, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x55, 0x55, 0x49, 0x44, 0x22, 0xc7, 0x01, 0x0a, 0x09, 0x4f, 0x42, 0x53, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77,
	0x48, 0x69, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x74,
	0x65, 0x6d, 0x53, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x16, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x65, 0x4f, 0x66,
	0x22, 0x93, 0x03, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x6e,
	0x6f, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x6f, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x74, 0x0a, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x4f, 0x42, 0x53, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x62,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x68, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x74, 0x55,
	0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x29, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x12, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x22, 0x12, 0x0a, 0x10, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x78, 0x0a, 0x05, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x74, 0x55,
	0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x41, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f,
	0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x13, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x39,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x26, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x39, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x71, 0x75,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4f, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x35,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xe0, 0x02, 0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x69, 0x73, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x09, 0x69,
	0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49,
	0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69,
	0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x22, 0x53, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4f, 0x42, 0x53, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x02, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x74, 0x6f, 0x22, 0xfc, 0x01,
	0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x03,
	0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x03, 0x61, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x48, 0x00, 0x52, 0x02, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x4e, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x26, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0xae, 0x01, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x42,
	0x53, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0e,
	0x6f, 0x62, 0x73, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4f,
	0x0a, 0x11, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x22, 0x8d, 0x01,
	0x0a, 0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x33, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x19, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a,
	0x15, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x22, 0x2d, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22,
	0x32, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5c, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5c, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x69, 0x6e, 0x63, 0x65,
	0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x73, 0x69, 0x6e, 0x63, 0x65, 0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61, 0x6e, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x91, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x55, 0x4e, 0x49, 0x58, 0x4e, 0x61, 0x6e,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x4c,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4c, 0x69, 0x76,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4a, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x50, 0x0a, 0x18, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x10, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e,
	0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f,
	0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x6e, 0x69, 0x78, 0x4e, 0x61, 0x6e, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x42, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x41, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x75,
	0x74, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x0f, 0x0a, 0x0d, 0x53,
	0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x3f, 0x0a, 0x0d,
	0x52, 0x61, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6c, 0x61, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6c, 0x61, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x0d, 0x0a,
	0x0b, 0x52, 0x61, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x13, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x2c,
	0x0a, 0x12, 0x4c, 0x4c, 0x4d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22, 0x2e, 0x0a, 0x10,
	0x4c, 0x4c, 0x4d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x66, 0x0a, 0x0c,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x08, 0x0a, 0x04,
	0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x61, 0x74, 0x61, 0x6c, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x10, 0x07, 0x2a, 0x8e, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x55,
	0x73, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75,
	0x74, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x61, 0x69, 0x64, 0x10, 0x06, 0x2a, 0x19, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x53, 0x48, 0x41, 0x31, 0x10, 0x00,
	0x2a, 0x3e, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x54, 0x53, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x54, 0x4d, 0x50, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x52, 0x54, 0x10, 0x03,
	0x2a, 0x5d, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x70, 0x79,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x41, 0x41, 0x43, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x56, 0x6f, 0x72, 0x62, 0x69, 0x73, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x4f, 0x70, 0x75, 0x73, 0x10, 0x03, 0x2a,
	0x5b, 0x0a, 0x0a, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x43, 0x6f, 0x70, 0x79, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x48,
	0x32, 0x36, 0x34, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x48, 0x45, 0x56, 0x43, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x41, 0x56, 0x31, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x0a,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x62, 0x56,
	0x4c, 0x43, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x50, 0x56, 0x10, 0x02, 0x2a, 0x40, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x42, 0x53, 0x53, 0x63, 0x65, 0x6e,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x01, 0x2a, 0xb3, 0x03, 0x0a, 0x11, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x65, 0x72, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x4d, 0x6f, 0x64, 0x48, 0x6f, 0x6c, 0x64, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x41, 0x64, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x46, 0x6f, 0x6c, 0x6c,
	0x6f, 0x77, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x69, 0x64, 0x10, 0x07, 0x12,
	0x2b, 0x0a, 0x27, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x68, 0x6f, 0x75, 0x74,
	0x6f, 0x75, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x0a, 0x12,
	0x22, 0x0a, 0x1e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x0c, 0x32,
	0xbf, 0x37, 0x0a, 0x07, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x12, 0x32, 0x0a, 0x04, 0x50,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x0a, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09,
	0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x09, 0x45,
	0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x45, 0x6e, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x6e,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x49, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x49, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x49, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x19, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x3b, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x65, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x53, 0x65, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x92, 0x01, 0x0a, 0x24, 0x45, 0x58, 0x50,
	0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x45, 0x58, 0x50, 0x45,
	0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52, 0x65, 0x69, 0x6e, 0x69, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x52,
	0x65, 0x69, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a,
	0x18, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4f, 0x41,
	0x75, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x74, 0x6f,
	0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x20, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x83, 0x01, 0x0a, 0x24, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x34, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x62, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x21, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x5c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x56, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x23,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12,
	0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x20, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x5e, 0x0a, 0x16, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x41, 0x64, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x20, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x5f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x23, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x73, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x75, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e,
	0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1e,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x21,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x53, 0x0a, 0x0f, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x64, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x07, 0x42,
	0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64,
	0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x42, 0x61, 0x6e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x68, 0x6f, 0x75,
	0x74, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53,
	0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x53, 0x68, 0x6f, 0x75, 0x74, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x52, 0x61, 0x69, 0x64,
	0x54, 0x6f, 0x12, 0x16, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69,
	0x64, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x64, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x12, 0x1a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x4c, 0x4c, 0x4d, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x64, 0x2e, 0x4c, 0x4c, 0x4d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x2e, 0x4c,
	0x4c, 0x4d, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x64, 0x5f,
	0x67, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_streamd_proto_rawDescOnce sync.Once
	file_streamd_proto_rawDescData []byte
)

func file_streamd_proto_rawDescGZIP() []byte {
	file_streamd_proto_rawDescOnce.Do(func() {
		file_streamd_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_streamd_proto_rawDesc), len(file_streamd_proto_rawDesc)))
	})
	return file_streamd_proto_rawDescData
}

var file_streamd_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_streamd_proto_msgTypes = make([]protoimpl.MessageInfo, 201)
var file_streamd_proto_goTypes = []any{
	(LoggingLevel)(0),                                   // 0: streamd.LoggingLevel
	(Capability)(0),                                     // 1: streamd.Capability
	(HashType)(0),                                       // 2: streamd.HashType
	(StreamServerType)(0),                               // 3: streamd.StreamServerType
	(AudioCodec)(0),                                     // 4: streamd.AudioCodec
	(VideoCodec)(0),                                     // 5: streamd.VideoCodec
	(PlayerType)(0),                                     // 6: streamd.PlayerType
	(EventType)(0),                                      // 7: streamd.EventType
	(PlatformEventType)(0),                              // 8: streamd.PlatformEventType
	(*PingRequest)(nil),                                 // 9: streamd.PingRequest
	(*PingReply)(nil),                                   // 10: streamd.PingReply
	(*SetLoggingLevelRequest)(nil),                      // 11: streamd.SetLoggingLevelRequest
	(*SetLoggingLevelReply)(nil),                        // 12: streamd.SetLoggingLevelReply
	(*GetLoggingLevelRequest)(nil),                      // 13: streamd.GetLoggingLevelRequest
	(*GetLoggingLevelReply)(nil),                        // 14: streamd.GetLoggingLevelReply
	(*GetConfigRequest)(nil),                            // 15: streamd.GetConfigRequest
	(*GetConfigReply)(nil),                              // 16: streamd.GetConfigReply
	(*SetConfigRequest)(nil),                            // 17: streamd.SetConfigRequest
	(*SetConfigReply)(nil),                              // 18: streamd.SetConfigReply
	(*SaveConfigRequest)(nil),                           // 19: streamd.SaveConfigRequest
	(*SaveConfigReply)(nil),                             // 20: streamd.SaveConfigReply
	(*ResetCacheRequest)(nil),                           // 21: streamd.ResetCacheRequest
	(*ResetCacheReply)(nil),                             // 22: streamd.ResetCacheReply
	(*InitCacheRequest)(nil),                            // 23: streamd.InitCacheRequest
	(*InitCacheReply)(nil),                              // 24: streamd.InitCacheReply
	(*StartStreamRequest)(nil),                          // 25: streamd.StartStreamRequest
	(*StartStreamByProfileNameRequest)(nil),             // 26: streamd.StartStreamByProfileNameRequest
	(*StartStreamReply)(nil),                            // 27: streamd.StartStreamReply
	(*EndStreamRequest)(nil),                            // 28: streamd.EndStreamRequest
	(*EndStreamReply)(nil),                              // 29: streamd.EndStreamReply
	(*GetStreamStatusRequest)(nil),                      // 30: streamd.GetStreamStatusRequest
	(*GetStreamStatusReply)(nil),                        // 31: streamd.GetStreamStatusReply
	(*GetBackendInfoRequest)(nil),                       // 32: streamd.GetBackendInfoRequest
	(*GetBackendInfoReply)(nil),                         // 33: streamd.GetBackendInfoReply
	(*IsBackendEnabledRequest)(nil),                     // 34: streamd.IsBackendEnabledRequest
	(*IsBackendEnabledReply)(nil),                       // 35: streamd.IsBackendEnabledReply
	(*RestartRequest)(nil),                              // 36: streamd.RestartRequest
	(*RestartReply)(nil),                                // 37: streamd.RestartReply
	(*SetTitleRequest)(nil),                             // 38: streamd.SetTitleRequest
	(*SetTitleReply)(nil),                               // 39: streamd.SetTitleReply
	(*SetDescriptionRequest)(nil),                       // 40: streamd.SetDescriptionRequest
	(*SetDescriptionReply)(nil),                         // 41: streamd.SetDescriptionReply
	(*ApplyProfileRequest)(nil),                         // 42: streamd.ApplyProfileRequest
	(*ApplyProfileReply)(nil),                           // 43: streamd.ApplyProfileReply
	(*UpdateStreamRequest)(nil),                         // 44: streamd.UpdateStreamRequest
	(*UpdateStreamReply)(nil),                           // 45: streamd.UpdateStreamReply
	(*EXPERIMENTAL_ReinitStreamControllersRequest)(nil), // 46: streamd.EXPERIMENTAL_ReinitStreamControllersRequest
	(*EXPERIMENTAL_ReinitStreamControllersReply)(nil),   // 47: streamd.EXPERIMENTAL_ReinitStreamControllersReply
	(*OBSOLETE_FetchConfigRequest)(nil),                 // 48: streamd.OBSOLETE_FetchConfigRequest
	(*OBSOLETE_FetchConfigReply)(nil),                   // 49: streamd.OBSOLETE_FetchConfigReply
	(*OBSOLETE_GetGitInfoRequest)(nil),                  // 50: streamd.OBSOLETE_GetGitInfoRequest
	(*OBSOLETE_GetGitInfoReply)(nil),                    // 51: streamd.OBSOLETE_GetGitInfoReply
	(*OBSOLETE_GitReloginRequest)(nil),                  // 52: streamd.OBSOLETE_GitReloginRequest
	(*OBSOLETE_GitReloginReply)(nil),                    // 53: streamd.OBSOLETE_GitReloginReply
	(*SubscribeToOAuthRequestsRequest)(nil),             // 54: streamd.SubscribeToOAuthRequestsRequest
	(*OAuthRequest)(nil),                                // 55: streamd.OAuthRequest
	(*GetVariableRequest)(nil),                          // 56: streamd.GetVariableRequest
	(*GetVariableReply)(nil),                            // 57: streamd.GetVariableReply
	(*GetVariableHashRequest)(nil),                      // 58: streamd.GetVariableHashRequest
	(*GetVariableHashReply)(nil),                        // 59: streamd.GetVariableHashReply
	(*SetVariableRequest)(nil),                          // 60: streamd.SetVariableRequest
	(*SetVariableReply)(nil),                            // 61: streamd.SetVariableReply
	(*SubscribeToVariableRequest)(nil),                  // 62: streamd.SubscribeToVariableRequest
	(*VariableChange)(nil),                              // 63: streamd.VariableChange
	(*SubmitOAuthCodeRequest)(nil),                      // 64: streamd.SubmitOAuthCodeRequest
	(*SubmitOAuthCodeReply)(nil),                        // 65: streamd.SubmitOAuthCodeReply
	(*TLSCertificate)(nil),                              // 66: streamd.TLSCertificate
	(*PrivateKey)(nil),                                  // 67: streamd.PrivateKey
	(*StreamServer)(nil),                                // 68: streamd.StreamServer
	(*StreamServerStatistics)(nil),                      // 69: streamd.StreamServerStatistics
	(*StreamServerWithStatistics)(nil),                  // 70: streamd.StreamServerWithStatistics
	(*ListStreamServersRequest)(nil),                    // 71: streamd.ListStreamServersRequest
	(*ListStreamServersReply)(nil),                      // 72: streamd.ListStreamServersReply
	(*StartStreamServerRequest)(nil),                    // 73: streamd.StartStreamServerRequest
	(*StartStreamServerReply)(nil),                      // 74: streamd.StartStreamServerReply
	(*StopStreamServerRequest)(nil),                     // 75: streamd.StopStreamServerRequest
	(*StopStreamServerReply)(nil),                       // 76: streamd.StopStreamServerReply
	(*StreamDestination)(nil),                           // 77: streamd.StreamDestination
	(*ListStreamDestinationsRequest)(nil),               // 78: streamd.ListStreamDestinationsRequest
	(*ListStreamDestinationsReply)(nil),                 // 79: streamd.ListStreamDestinationsReply
	(*AddStreamDestinationRequest)(nil),                 // 80: streamd.AddStreamDestinationRequest
	(*AddStreamDestinationReply)(nil),                   // 81: streamd.AddStreamDestinationReply
	(*UpdateStreamDestinationRequest)(nil),              // 82: streamd.UpdateStreamDestinationRequest
	(*UpdateStreamDestinationReply)(nil),                // 83: streamd.UpdateStreamDestinationReply
	(*RemoveStreamDestinationRequest)(nil),              // 84: streamd.RemoveStreamDestinationRequest
	(*RemoveStreamDestinationReply)(nil),                // 85: streamd.RemoveStreamDestinationReply
	(*IncomingStream)(nil),                              // 86: streamd.IncomingStream
	(*AddIncomingStreamRequest)(nil),                    // 87: streamd.AddIncomingStreamRequest
	(*AddIncomingStreamReply)(nil),                      // 88: streamd.AddIncomingStreamReply
	(*RemoveIncomingStreamRequest)(nil),                 // 89: streamd.RemoveIncomingStreamRequest
	(*RemoveIncomingStreamReply)(nil),                   // 90: streamd.RemoveIncomingStreamReply
	(*ListIncomingStreamsRequest)(nil),                  // 91: streamd.ListIncomingStreamsRequest
	(*ListIncomingStreamsReply)(nil),                    // 92: streamd.ListIncomingStreamsReply
	(*RestartUntilYoutubeRecognizesStream)(nil),         // 93: streamd.RestartUntilYoutubeRecognizesStream
	(*StartAfterYoutubeRecognizedStream)(nil),           // 94: streamd.StartAfterYoutubeRecognizedStream
	(*StreamForwardQuirks)(nil),                         // 95: streamd.StreamForwardQuirks
	(*StreamForward)(nil),                               // 96: streamd.StreamForward
	(*EncoderConfig)(nil),                               // 97: streamd.EncoderConfig
	(*OutputAudioTrack)(nil),                            // 98: streamd.OutputAudioTrack
	(*EncodeAudioConfig)(nil),                           // 99: streamd.EncodeAudioConfig
	(*AudioQuality)(nil),                                // 100: streamd.AudioQuality
	(*OutputVideoTrack)(nil),                            // 101: streamd.OutputVideoTrack
	(*EncodeVideoConfig)(nil),                           // 102: streamd.EncodeVideoConfig
	(*VideoQuality)(nil),                                // 103: streamd.VideoQuality
	(*StreamForwardStatistics)(nil),                     // 104: streamd.StreamForwardStatistics
	(*StreamForwardWithStatistics)(nil),                 // 105: streamd.StreamForwardWithStatistics
	(*ListStreamForwardsRequest)(nil),                   // 106: streamd.ListStreamForwardsRequest
	(*ListStreamForwardsReply)(nil),                     // 107: streamd.ListStreamForwardsReply
	(*AddStreamForwardRequest)(nil),                     // 108: streamd.AddStreamForwardRequest
	(*AddStreamForwardReply)(nil),                       // 109: streamd.AddStreamForwardReply
	(*UpdateStreamForwardRequest)(nil),                  // 110: streamd.UpdateStreamForwardRequest
	(*UpdateStreamForwardReply)(nil),                    // 111: streamd.UpdateStreamForwardReply
	(*RemoveStreamForwardRequest)(nil),                  // 112: streamd.RemoveStreamForwardRequest
	(*RemoveStreamForwardReply)(nil),                    // 113: streamd.RemoveStreamForwardReply
	(*WaitForStreamPublisherRequest)(nil),               // 114: streamd.WaitForStreamPublisherRequest
	(*StreamPublisher)(nil),                             // 115: streamd.StreamPublisher
	(*StreamPlaybackConfig)(nil),                        // 116: streamd.StreamPlaybackConfig
	(*StreamPlayerConfig)(nil),                          // 117: streamd.StreamPlayerConfig
	(*AddStreamPlayerRequest)(nil),                      // 118: streamd.AddStreamPlayerRequest
	(*AddStreamPlayerReply)(nil),                        // 119: streamd.AddStreamPlayerReply
	(*RemoveStreamPlayerRequest)(nil),                   // 120: streamd.RemoveStreamPlayerRequest
	(*RemoveStreamPlayerReply)(nil),                     // 121: streamd.RemoveStreamPlayerReply
	(*UpdateStreamPlayerRequest)(nil),                   // 122: streamd.UpdateStreamPlayerRequest
	(*UpdateStreamPlayerReply)(nil),                     // 123: streamd.UpdateStreamPlayerReply
	(*ListStreamPlayersRequest)(nil),                    // 124: streamd.ListStreamPlayersRequest
	(*ListStreamPlayersReply)(nil),                      // 125: streamd.ListStreamPlayersReply
	(*GetStreamPlayerRequest)(nil),                      // 126: streamd.GetStreamPlayerRequest
	(*GetStreamPlayerReply)(nil),                        // 127: streamd.GetStreamPlayerReply
	(*StreamPlayerOpenRequest)(nil),                     // 128: streamd.StreamPlayerOpenRequest
	(*StreamPlayerOpenReply)(nil),                       // 129: streamd.StreamPlayerOpenReply
	(*StreamPlayerProcessTitleRequest)(nil),             // 130: streamd.StreamPlayerProcessTitleRequest
	(*StreamPlayerProcessTitleReply)(nil),               // 131: streamd.StreamPlayerProcessTitleReply
	(*StreamPlayerGetLinkRequest)(nil),                  // 132: streamd.StreamPlayerGetLinkRequest
	(*StreamPlayerGetLinkReply)(nil),                    // 133: streamd.StreamPlayerGetLinkReply
	(*StreamPlayerEndChanRequest)(nil),                  // 134: streamd.StreamPlayerEndChanRequest
	(*StreamPlayerEndChanReply)(nil),                    // 135: streamd.StreamPlayerEndChanReply
	(*StreamPlayerIsEndedRequest)(nil),                  // 136: streamd.StreamPlayerIsEndedRequest
	(*StreamPlayerIsEndedReply)(nil),                    // 137: streamd.StreamPlayerIsEndedReply
	(*StreamPlayerGetPositionRequest)(nil),              // 138: streamd.StreamPlayerGetPositionRequest
	(*StreamPlayerGetPositionReply)(nil),                // 139: streamd.StreamPlayerGetPositionReply
	(*StreamPlayerGetLengthRequest)(nil),                // 140: streamd.StreamPlayerGetLengthRequest
	(*StreamPlayerGetLengthReply)(nil),                  // 141: streamd.StreamPlayerGetLengthReply
	(*StreamPlayerSetSpeedRequest)(nil),                 // 142: streamd.StreamPlayerSetSpeedRequest
	(*StreamPlayerSetSpeedReply)(nil),                   // 143: streamd.StreamPlayerSetSpeedReply
	(*StreamPlayerSetPauseRequest)(nil),                 // 144: streamd.StreamPlayerSetPauseRequest
	(*StreamPlayerSetPauseReply)(nil),                   // 145: streamd.StreamPlayerSetPauseReply
	(*StreamPlayerStopRequest)(nil),                     // 146: streamd.StreamPlayerStopRequest
	(*StreamPlayerStopReply)(nil),                       // 147: streamd.StreamPlayerStopReply
	(*StreamPlayerCloseRequest)(nil),                    // 148: streamd.StreamPlayerCloseRequest
	(*StreamPlayerCloseReply)(nil),                      // 149: streamd.StreamPlayerCloseReply
	(*SubscribeToConfigChangesRequest)(nil),             // 150: streamd.SubscribeToConfigChangesRequest
	(*ConfigChange)(nil),                                // 151: streamd.ConfigChange
	(*SubscribeToStreamsChangesRequest)(nil),            // 152: streamd.SubscribeToStreamsChangesRequest
	(*StreamsChange)(nil),                               // 153: streamd.StreamsChange
	(*SubscribeToStreamServersChangesRequest)(nil),      // 154: streamd.SubscribeToStreamServersChangesRequest
	(*StreamServersChange)(nil),                         // 155: streamd.StreamServersChange
	(*SubscribeToStreamDestinationsChangesRequest)(nil), // 156: streamd.SubscribeToStreamDestinationsChangesRequest
	(*StreamDestinationsChange)(nil),                    // 157: streamd.StreamDestinationsChange
	(*SubscribeToIncomingStreamsChangesRequest)(nil),    // 158: streamd.SubscribeToIncomingStreamsChangesRequest
	(*IncomingStreamsChange)(nil),                       // 159: streamd.IncomingStreamsChange
	(*SubscribeToStreamForwardsChangesRequest)(nil),     // 160: streamd.SubscribeToStreamForwardsChangesRequest
	(*StreamForwardsChange)(nil),                        // 161: streamd.StreamForwardsChange
	(*SubscribeToStreamPlayersChangesRequest)(nil),      // 162: streamd.SubscribeToStreamPlayersChangesRequest
	(*StreamPlayersChange)(nil),                         // 163: streamd.StreamPlayersChange
	(*NoopRequest)(nil),                                 // 164: streamd.NoopRequest
	(*OBSActionItemShowHide)(nil),                       // 165: streamd.OBSActionItemShowHide
	(*OBSActionWindowCaptureSetSource)(nil),             // 166: streamd.OBSActionWindowCaptureSetSource
	(*OBSAction)(nil),                                   // 167: streamd.OBSAction
	(*Action)(nil),                                      // 168: streamd.Action
	(*AddTimerRequest)(nil),                             // 169: streamd.AddTimerRequest
	(*AddTimerReply)(nil),                               // 170: streamd.AddTimerReply
	(*RemoveTimerRequest)(nil),                          // 171: streamd.RemoveTimerRequest
	(*RemoveTimerReply)(nil),                            // 172: streamd.RemoveTimerReply
	(*Timer)(nil),                                       // 173: streamd.Timer
	(*ListTimersRequest)(nil),                           // 174: streamd.ListTimersRequest
	(*ListTimersReply)(nil),                             // 175: streamd.ListTimersReply
	(*EventQueryAnd)(nil),                               // 176: streamd.EventQueryAnd
	(*EventQueryOr)(nil),                                // 177: streamd.EventQueryOr
	(*EventQueryNot)(nil),                               // 178: streamd.EventQueryNot
	(*EventWindowFocusChange)(nil),                      // 179: streamd.EventWindowFocusChange
	(*EventOBSSceneChange)(nil),                         // 180: streamd.EventOBSSceneChange
	(*EventQuery)(nil),                                  // 181: streamd.EventQuery
	(*Event)(nil),                                       // 182: streamd.Event
	(*TriggerRule)(nil),                                 // 183: streamd.TriggerRule
	(*ListTriggerRulesRequest)(nil),                     // 184: streamd.ListTriggerRulesRequest
	(*ListTriggerRulesReply)(nil),                       // 185: streamd.ListTriggerRulesReply
	(*AddTriggerRuleRequest)(nil),                       // 186: streamd.AddTriggerRuleRequest
	(*AddTriggerRuleReply)(nil),                         // 187: streamd.AddTriggerRuleReply
	(*RemoveTriggerRuleRequest)(nil),                    // 188: streamd.RemoveTriggerRuleRequest
	(*RemoveTriggerRuleReply)(nil),                      // 189: streamd.RemoveTriggerRuleReply
	(*UpdateTriggerRuleRequest)(nil),                    // 190: streamd.UpdateTriggerRuleRequest
	(*UpdateTriggerRuleReply)(nil),                      // 191: streamd.UpdateTriggerRuleReply
	(*SubmitEventRequest)(nil),                          // 192: streamd.SubmitEventRequest
	(*SubmitEventReply)(nil),                            // 193: streamd.SubmitEventReply
	(*SubscribeToChatMessagesRequest)(nil),              // 194: streamd.SubscribeToChatMessagesRequest
	(*ChatMessage)(nil),                                 // 195: streamd.ChatMessage
	(*SendChatMessageRequest)(nil),                      // 196: streamd.SendChatMessageRequest
	(*SendChatMessageReply)(nil),                        // 197: streamd.SendChatMessageReply
	(*RemoveChatMessageRequest)(nil),                    // 198: streamd.RemoveChatMessageRequest
	(*RemoveChatMessageReply)(nil),                      // 199: streamd.RemoveChatMessageReply
	(*BanUserRequest)(nil),                              // 200: streamd.BanUserRequest
	(*BanUserReply)(nil),                                // 201: streamd.BanUserReply
	(*ShoutoutRequest)(nil),                             // 202: streamd.ShoutoutRequest
	(*ShoutoutReply)(nil),                               // 203: streamd.ShoutoutReply
	(*RaidToRequest)(nil),                               // 204: streamd.RaidToRequest
	(*RaidToReply)(nil),                                 // 205: streamd.RaidToReply
	(*GetPeerIDsRequest)(nil),                           // 206: streamd.GetPeerIDsRequest
	(*GetPeerIDsReply)(nil),                             // 207: streamd.GetPeerIDsReply
	(*LLMGenerateRequest)(nil),                          // 208: streamd.LLMGenerateRequest
	(*LLMGenerateReply)(nil),                            // 209: streamd.LLMGenerateReply
	(*player_grpc.OpenRequest)(nil),                     // 210: player.OpenRequest
	(*player_grpc.OpenReply)(nil),                       // 211: player.OpenReply
	(*player_grpc.ProcessTitleRequest)(nil),             // 212: player.ProcessTitleRequest
	(*player_grpc.ProcessTitleReply)(nil),               // 213: player.ProcessTitleReply
	(*player_grpc.GetLinkRequest)(nil),                  // 214: player.GetLinkRequest
	(*player_grpc.GetLinkReply)(nil),                    // 215: player.GetLinkReply
	(*player_grpc.EndChanRequest)(nil),                  // 216: player.EndChanRequest
	(*player_grpc.EndChanReply)(nil),                    // 217: player.EndChanReply
	(*player_grpc.IsEndedRequest)(nil),                  // 218: player.IsEndedRequest
	(*player_grpc.IsEndedReply)(nil),                    // 219: player.IsEndedReply
	(*player_grpc.GetPositionRequest)(nil),              // 220: player.GetPositionRequest
	(*player_grpc.GetPositionReply)(nil),                // 221: player.GetPositionReply
	(*player_grpc.GetLengthRequest)(nil),                // 222: player.GetLengthRequest
	(*player_grpc.GetLengthReply)(nil),                  // 223: player.GetLengthReply
	(*player_grpc.SetSpeedRequest)(nil),                 // 224: player.SetSpeedRequest
	(*player_grpc.SetSpeedReply)(nil),                   // 225: player.SetSpeedReply
	(*player_grpc.SetPauseRequest)(nil),                 // 226: player.SetPauseRequest
	(*player_grpc.SetPauseReply)(nil),                   // 227: player.SetPauseReply
	(*player_grpc.StopRequest)(nil),                     // 228: player.StopRequest
	(*player_grpc.StopReply)(nil),                       // 229: player.StopReply
	(*player_grpc.CloseRequest)(nil),                    // 230: player.CloseRequest
	(*player_grpc.CloseReply)(nil),                      // 231: player.CloseReply
}
var file_streamd_proto_depIdxs = []int32{
	0,   // 0: streamd.SetLoggingLevelRequest.loggingLevel:type_name -> streamd.LoggingLevel
	0,   // 1: streamd.GetLoggingLevelReply.loggingLevel:type_name -> streamd.LoggingLevel
	1,   // 2: streamd.GetBackendInfoReply.capabilities:type_name -> streamd.Capability
	2,   // 3: streamd.GetVariableHashRequest.hashType:type_name -> streamd.HashType
	2,   // 4: streamd.GetVariableHashReply.hashType:type_name -> streamd.HashType
	3,   // 5: streamd.StreamServer.serverType:type_name -> streamd.StreamServerType
	66,  // 6: streamd.StreamServer.ServerCert:type_name -> streamd.TLSCertificate
	67,  // 7: streamd.StreamServer.ServerKey:type_name -> streamd.PrivateKey
	68,  // 8: streamd.StreamServerWithStatistics.config:type_name -> streamd.StreamServer
	69,  // 9: streamd.StreamServerWithStatistics.statistics:type_name -> streamd.StreamServerStatistics
	70,  // 10: streamd.ListStreamServersReply.streamServers:type_name -> streamd.StreamServerWithStatistics
	68,  // 11: streamd.StartStreamServerRequest.config:type_name -> streamd.StreamServer
	77,  // 12: streamd.ListStreamDestinationsReply.streamDestinations:type_name -> streamd.StreamDestination
	77,  // 13: streamd.AddStreamDestinationRequest.config:type_name -> streamd.StreamDestination
	77,  // 14: streamd.UpdateStreamDestinationRequest.config:type_name -> streamd.StreamDestination
	86,  // 15: streamd.ListIncomingStreamsReply.incomingStreams:type_name -> streamd.IncomingStream
	93,  // 16: streamd.StreamForwardQuirks.restartUntilYoutubeRecognizesStream:type_name -> streamd.RestartUntilYoutubeRecognizesStream
	94,  // 17: streamd.StreamForwardQuirks.startAfterYoutubeRecognizedStream:type_name -> streamd.StartAfterYoutubeRecognizedStream
	97,  // 18: streamd.StreamForward.encode:type_name -> streamd.EncoderConfig
	95,  // 19: streamd.StreamForward.quirks:type_name -> streamd.StreamForwardQuirks
	98,  // 20: streamd.EncoderConfig.outputAudioTracks:type_name -> streamd.OutputAudioTrack
	101, // 21: streamd.EncoderConfig.outputVideoTracks:type_name -> streamd.OutputVideoTrack
	99,  // 22: streamd.OutputAudioTrack.encode:type_name -> streamd.EncodeAudioConfig
	4,   // 23: streamd.EncodeAudioConfig.codec:type_name -> streamd.AudioCodec
	100, // 24: streamd.EncodeAudioConfig.quality:type_name -> streamd.AudioQuality
	102, // 25: streamd.OutputVideoTrack.encode:type_name -> streamd.EncodeVideoConfig
	5,   // 26: streamd.EncodeVideoConfig.codec:type_name -> streamd.VideoCodec
	103, // 27: streamd.EncodeVideoConfig.quality:type_name -> streamd.VideoQuality
	96,  // 28: streamd.StreamForwardWithStatistics.config:type_name -> streamd.StreamForward
	104, // 29: streamd.StreamForwardWithStatistics.statistics:type_name -> streamd.StreamForwardStatistics
	105, // 30: streamd.ListStreamForwardsReply.streamForwards:type_name -> streamd.StreamForwardWithStatistics
	96,  // 31: streamd.AddStreamForwardRequest.config:type_name -> streamd.StreamForward
	96,  // 32: streamd.UpdateStreamForwardRequest.config:type_name -> streamd.StreamForward
	96,  // 33: streamd.RemoveStreamForwardRequest.config:type_name -> streamd.StreamForward
	6,   // 34: streamd.StreamPlayerConfig.playerType:type_name -> streamd.PlayerType
	116, // 35: streamd.StreamPlayerConfig.streamPlaybackConfig:type_name -> streamd.StreamPlaybackConfig
	117, // 36: streamd.AddStreamPlayerRequest.config:type_name -> streamd.StreamPlayerConfig
	117, // 37: streamd.UpdateStreamPlayerRequest.config:type_name -> streamd.StreamPlayerConfig
	117, // 38: streamd.ListStreamPlayersReply.players:type_name -> streamd.StreamPlayerConfig
	117, // 39: streamd.GetStreamPlayerReply.config:type_name -> streamd.StreamPlayerConfig
	210, // 40: streamd.StreamPlayerOpenRequest.request:type_name -> player.OpenRequest
	211, // 41: streamd.StreamPlayerOpenReply.reply:type_name -> player.OpenReply
	212, // 42: streamd.StreamPlayerProcessTitleRequest.request:type_name -> player.ProcessTitleRequest
	213, // 43: streamd.StreamPlayerProcessTitleReply.reply:type_name -> player.ProcessTitleReply
	214, // 44: streamd.StreamPlayerGetLinkRequest.request:type_name -> player.GetLinkRequest
	215, // 45: streamd.StreamPlayerGetLinkReply.reply:type_name -> player.GetLinkReply
	216, // 46: streamd.StreamPlayerEndChanRequest.request:type_name -> player.EndChanRequest
	217, // 47: streamd.StreamPlayerEndChanReply.reply:type_name -> player.EndChanReply
	218, // 48: streamd.StreamPlayerIsEndedRequest.request:type_name -> player.IsEndedRequest
	219, // 49: streamd.StreamPlayerIsEndedReply.reply:type_name -> player.IsEndedReply
	220, // 50: streamd.StreamPlayerGetPositionRequest.request:type_name -> player.GetPositionRequest
	221, // 51: streamd.StreamPlayerGetPositionReply.reply:type_name -> player.GetPositionReply
	222, // 52: streamd.StreamPlayerGetLengthRequest.request:type_name -> player.GetLengthRequest
	223, // 53: streamd.StreamPlayerGetLengthReply.reply:type_name -> player.GetLengthReply
	224, // 54: streamd.StreamPlayerSetSpeedRequest.request:type_name -> player.SetSpeedRequest
	225, // 55: streamd.StreamPlayerSetSpeedReply.reply:type_name -> player.SetSpeedReply
	226, // 56: streamd.StreamPlayerSetPauseRequest.request:type_name -> player.SetPauseRequest
	227, // 57: streamd.StreamPlayerSetPauseReply.reply:type_name -> player.SetPauseReply
	228, // 58: streamd.StreamPlayerStopRequest.request:type_name -> player.StopRequest
	229, // 59: streamd.StreamPlayerStopReply.reply:type_name -> player.StopReply
	230, // 60: streamd.StreamPlayerCloseRequest.request:type_name -> player.CloseRequest
	231, // 61: streamd.StreamPlayerCloseReply.reply:type_name -> player.CloseReply
	165, // 62: streamd.OBSAction.itemShowHide:type_name -> streamd.OBSActionItemShowHide
	166, // 63: streamd.OBSAction.windowCaptureSetSource:type_name -> streamd.OBSActionWindowCaptureSetSource
	164, // 64: streamd.Action.noopRequest:type_name -> streamd.NoopRequest
	25,  // 65: streamd.Action.startStreamRequest:type_name -> streamd.StartStreamRequest
	26,  // 66: streamd.Action.startStreamByProfileNameRequest:type_name -> streamd.StartStreamByProfileNameRequest
	28,  // 67: streamd.Action.endStreamRequest:type_name -> streamd.EndStreamRequest
	167, // 68: streamd.Action.obsAction:type_name -> streamd.OBSAction
	168, // 69: streamd.AddTimerRequest.action:type_name -> streamd.Action
	168, // 70: streamd.Timer.action:type_name -> streamd.Action
	173, // 71: streamd.ListTimersReply.timers:type_name -> streamd.Timer
	182, // 72: streamd.EventQueryAnd.queries:type_name -> streamd.Event
	182, // 73: streamd.EventQueryOr.queries:type_name -> streamd.Event
	182, // 74: streamd.EventQueryNot.query:type_name -> streamd.Event
	176, // 75: streamd.EventQuery.and:type_name -> streamd.EventQueryAnd
	177, // 76: streamd.EventQuery.or:type_name -> streamd.EventQueryOr
	178, // 77: streamd.EventQuery.not:type_name -> streamd.EventQueryNot
	7,   // 78: streamd.EventQuery.eventType:type_name -> streamd.EventType
	182, // 79: streamd.EventQuery.event:type_name -> streamd.Event
	180, // 80: streamd.Event.obsSceneChange:type_name -> streamd.EventOBSSceneChange
	179, // 81: streamd.Event.windowFocusChange:type_name -> streamd.EventWindowFocusChange
	181, // 82: streamd.TriggerRule.eventQuery:type_name -> streamd.EventQuery
	168, // 83: streamd.TriggerRule.action:type_name -> streamd.Action
	183, // 84: streamd.ListTriggerRulesReply.rules:type_name -> streamd.TriggerRule
	183, // 85: streamd.AddTriggerRuleRequest.rule:type_name -> streamd.TriggerRule
	183, // 86: streamd.UpdateTriggerRuleRequest.rule:type_name -> streamd.TriggerRule
	182, // 87: streamd.SubmitEventRequest.event:type_name -> streamd.Event
	8,   // 88: streamd.ChatMessage.eventType:type_name -> streamd.PlatformEventType
	9,   // 89: streamd.StreamD.Ping:input_type -> streamd.PingRequest
	11,  // 90: streamd.StreamD.SetLoggingLevel:input_type -> streamd.SetLoggingLevelRequest
	13,  // 91: streamd.StreamD.GetLoggingLevel:input_type -> streamd.GetLoggingLevelRequest
	15,  // 92: streamd.StreamD.GetConfig:input_type -> streamd.GetConfigRequest
	17,  // 93: streamd.StreamD.SetConfig:input_type -> streamd.SetConfigRequest
	19,  // 94: streamd.StreamD.SaveConfig:input_type -> streamd.SaveConfigRequest
	150, // 95: streamd.StreamD.SubscribeToConfigChanges:input_type -> streamd.SubscribeToConfigChangesRequest
	21,  // 96: streamd.StreamD.ResetCache:input_type -> streamd.ResetCacheRequest
	23,  // 97: streamd.StreamD.InitCache:input_type -> streamd.InitCacheRequest
	25,  // 98: streamd.StreamD.StartStream:input_type -> streamd.StartStreamRequest
	26,  // 99: streamd.StreamD.StartStreamByProfileName:input_type -> streamd.StartStreamByProfileNameRequest
	28,  // 100: streamd.StreamD.EndStream:input_type -> streamd.EndStreamRequest
	30,  // 101: streamd.StreamD.GetStreamStatus:input_type -> streamd.GetStreamStatusRequest
	34,  // 102: streamd.StreamD.IsBackendEnabled:input_type -> streamd.IsBackendEnabledRequest
	32,  // 103: streamd.StreamD.GetBackendInfo:input_type -> streamd.GetBackendInfoRequest
	152, // 104: streamd.StreamD.SubscribeToStreamsChanges:input_type -> streamd.SubscribeToStreamsChangesRequest
	36,  // 105: streamd.StreamD.Restart:input_type -> streamd.RestartRequest
	38,  // 106: streamd.StreamD.SetTitle:input_type -> streamd.SetTitleRequest
	40,  // 107: streamd.StreamD.SetDescription:input_type -> streamd.SetDescriptionRequest
	42,  // 108: streamd.StreamD.ApplyProfile:input_type -> streamd.ApplyProfileRequest
	44,  // 109: streamd.StreamD.UpdateStream:input_type -> streamd.UpdateStreamRequest
	56,  // 110: streamd.StreamD.GetVariable:input_type -> streamd.GetVariableRequest
	58,  // 111: streamd.StreamD.GetVariableHash:input_type -> streamd.GetVariableHashRequest
	60,  // 112: streamd.StreamD.SetVariable:input_type -> streamd.SetVariableRequest
	62,  // 113: streamd.StreamD.SubscribeToVariable:input_type -> streamd.SubscribeToVariableRequest
	46,  // 114: streamd.StreamD.EXPERIMENTAL_ReinitStreamControllers:input_type -> streamd.EXPERIMENTAL_ReinitStreamControllersRequest
	54,  // 115: streamd.StreamD.SubscribeToOAuthRequests:input_type -> streamd.SubscribeToOAuthRequestsRequest
	64,  // 116: streamd.StreamD.SubmitOAuthCode:input_type -> streamd.SubmitOAuthCodeRequest
	71,  // 117: streamd.StreamD.ListStreamServers:input_type -> streamd.ListStreamServersRequest
	73,  // 118: streamd.StreamD.StartStreamServer:input_type -> streamd.StartStreamServerRequest
	75,  // 119: streamd.StreamD.StopStreamServer:input_type -> streamd.StopStreamServerRequest
	154, // 120: streamd.StreamD.SubscribeToStreamServersChanges:input_type -> streamd.SubscribeToStreamServersChangesRequest
	78,  // 121: streamd.StreamD.ListStreamDestinations:input_type -> streamd.ListStreamDestinationsRequest
	80,  // 122: streamd.StreamD.AddStreamDestination:input_type -> streamd.AddStreamDestinationRequest
	82,  // 123: streamd.StreamD.UpdateStreamDestination:input_type -> streamd.UpdateStreamDestinationRequest
	84,  // 124: streamd.StreamD.RemoveStreamDestination:input_type -> streamd.RemoveStreamDestinationRequest
	156, // 125: streamd.StreamD.SubscribeToStreamDestinationsChanges:input_type -> streamd.SubscribeToStreamDestinationsChangesRequest
	87,  // 126: streamd.StreamD.AddIncomingStream:input_type -> streamd.AddIncomingStreamRequest
	89,  // 127: streamd.StreamD.RemoveIncomingStream:input_type -> streamd.RemoveIncomingStreamRequest
	91,  // 128: streamd.StreamD.ListIncomingStreams:input_type -> streamd.ListIncomingStreamsRequest
	158, // 129: streamd.StreamD.SubscribeToIncomingStreamsChanges:input_type -> streamd.SubscribeToIncomingStreamsChangesRequest
	106, // 130: streamd.StreamD.ListStreamForwards:input_type -> streamd.ListStreamForwardsRequest
	108, // 131: streamd.StreamD.AddStreamForward:input_type -> streamd.AddStreamForwardRequest
	110, // 132: streamd.StreamD.UpdateStreamForward:input_type -> streamd.UpdateStreamForwardRequest
	112, // 133: streamd.StreamD.RemoveStreamForward:input_type -> streamd.RemoveStreamForwardRequest
	160, // 134: streamd.StreamD.SubscribeToStreamForwardsChanges:input_type -> streamd.SubscribeToStreamForwardsChangesRequest
	114, // 135: streamd.StreamD.WaitForStreamPublisher:input_type -> streamd.WaitForStreamPublisherRequest
	118, // 136: streamd.StreamD.AddStreamPlayer:input_type -> streamd.AddStreamPlayerRequest
	120, // 137: streamd.StreamD.RemoveStreamPlayer:input_type -> streamd.RemoveStreamPlayerRequest
	122, // 138: streamd.StreamD.UpdateStreamPlayer:input_type -> streamd.UpdateStreamPlayerRequest
	124, // 139: streamd.StreamD.ListStreamPlayers:input_type -> streamd.ListStreamPlayersRequest
	126, // 140: streamd.StreamD.GetStreamPlayer:input_type -> streamd.GetStreamPlayerRequest
	162, // 141: streamd.StreamD.SubscribeToStreamPlayersChanges:input_type -> streamd.SubscribeToStreamPlayersChangesRequest
	128, // 142: streamd.StreamD.StreamPlayerOpen:input_type -> streamd.StreamPlayerOpenRequest
	130, // 143: streamd.StreamD.StreamPlayerProcessTitle:input_type -> streamd.StreamPlayerProcessTitleRequest
	132, // 144: streamd.StreamD.StreamPlayerGetLink:input_type -> streamd.StreamPlayerGetLinkRequest
	134, // 145: streamd.StreamD.StreamPlayerEndChan:input_type -> streamd.StreamPlayerEndChanRequest
	136, // 146: streamd.StreamD.StreamPlayerIsEnded:input_type -> streamd.StreamPlayerIsEndedRequest
	138, // 147: streamd.StreamD.StreamPlayerGetPosition:input_type -> streamd.StreamPlayerGetPositionRequest
	140, // 148: streamd.StreamD.StreamPlayerGetLength:input_type -> streamd.StreamPlayerGetLengthRequest
	142, // 149: streamd.StreamD.StreamPlayerSetSpeed:input_type -> streamd.StreamPlayerSetSpeedRequest
	144, // 150: streamd.StreamD.StreamPlayerSetPause:input_type -> streamd.StreamPlayerSetPauseRequest
	146, // 151: streamd.StreamD.StreamPlayerStop:input_type -> streamd.StreamPlayerStopRequest
	148, // 152: streamd.StreamD.StreamPlayerClose:input_type -> streamd.StreamPlayerCloseRequest
	169, // 153: streamd.StreamD.AddTimer:input_type -> streamd.AddTimerRequest
	171, // 154: streamd.StreamD.RemoveTimer:input_type -> streamd.RemoveTimerRequest
	174, // 155: streamd.StreamD.ListTimers:input_type -> streamd.ListTimersRequest
	184, // 156: streamd.StreamD.ListTriggerRules:input_type -> streamd.ListTriggerRulesRequest
	186, // 157: streamd.StreamD.AddTriggerRule:input_type -> streamd.AddTriggerRuleRequest
	188, // 158: streamd.StreamD.RemoveTriggerRule:input_type -> streamd.RemoveTriggerRuleRequest
	190, // 159: streamd.StreamD.UpdateTriggerRule:input_type -> streamd.UpdateTriggerRuleRequest
	192, // 160: streamd.StreamD.SubmitEvent:input_type -> streamd.SubmitEventRequest
	194, // 161: streamd.StreamD.SubscribeToChatMessages:input_type -> streamd.SubscribeToChatMessagesRequest
	196, // 162: streamd.StreamD.SendChatMessage:input_type -> streamd.SendChatMessageRequest
	198, // 163: streamd.StreamD.RemoveChatMessage:input_type -> streamd.RemoveChatMessageRequest
	200, // 164: streamd.StreamD.BanUser:input_type -> streamd.BanUserRequest
	202, // 165: streamd.StreamD.Shoutout:input_type -> streamd.ShoutoutRequest
	204, // 166: streamd.StreamD.RaidTo:input_type -> streamd.RaidToRequest
	206, // 167: streamd.StreamD.GetPeerIDs:input_type -> streamd.GetPeerIDsRequest
	208, // 168: streamd.StreamD.LLMGenerate:input_type -> streamd.LLMGenerateRequest
	10,  // 169: streamd.StreamD.Ping:output_type -> streamd.PingReply
	12,  // 170: streamd.StreamD.SetLoggingLevel:output_type -> streamd.SetLoggingLevelReply
	14,  // 171: streamd.StreamD.GetLoggingLevel:output_type -> streamd.GetLoggingLevelReply
	16,  // 172: streamd.StreamD.GetConfig:output_type -> streamd.GetConfigReply
	18,  // 173: streamd.StreamD.SetConfig:output_type -> streamd.SetConfigReply
	20,  // 174: streamd.StreamD.SaveConfig:output_type -> streamd.SaveConfigReply
	151, // 175: streamd.StreamD.SubscribeToConfigChanges:output_type -> streamd.ConfigChange
	22,  // 176: streamd.StreamD.ResetCache:output_type -> streamd.ResetCacheReply
	24,  // 177: streamd.StreamD.InitCache:output_type -> streamd.InitCacheReply
	27,  // 178: streamd.StreamD.StartStream:output_type -> streamd.StartStreamReply
	27,  // 179: streamd.StreamD.StartStreamByProfileName:output_type -> streamd.StartStreamReply
	29,  // 180: streamd.StreamD.EndStream:output_type -> streamd.EndStreamReply
	31,  // 181: streamd.StreamD.GetStreamStatus:output_type -> streamd.GetStreamStatusReply
	35,  // 182: streamd.StreamD.IsBackendEnabled:output_type -> streamd.IsBackendEnabledReply
	33,  // 183: streamd.StreamD.GetBackendInfo:output_type -> streamd.GetBackendInfoReply
	153, // 184: streamd.StreamD.SubscribeToStreamsChanges:output_type -> streamd.StreamsChange
	37,  // 185: streamd.StreamD.Restart:output_type -> streamd.RestartReply
	39,  // 186: streamd.StreamD.SetTitle:output_type -> streamd.SetTitleReply
	41,  // 187: streamd.StreamD.SetDescription:output_type -> streamd.SetDescriptionReply
	43,  // 188: streamd.StreamD.ApplyProfile:output_type -> streamd.ApplyProfileReply
	45,  // 189: streamd.StreamD.UpdateStream:output_type -> streamd.UpdateStreamReply
	57,  // 190: streamd.StreamD.GetVariable:output_type -> streamd.GetVariableReply
	59,  // 191: streamd.StreamD.GetVariableHash:output_type -> streamd.GetVariableHashReply
	61,  // 192: streamd.StreamD.SetVariable:output_type -> streamd.SetVariableReply
	63,  // 193: streamd.StreamD.SubscribeToVariable:output_type -> streamd.VariableChange
	47,  // 194: streamd.StreamD.EXPERIMENTAL_ReinitStreamControllers:output_type -> streamd.EXPERIMENTAL_ReinitStreamControllersReply
	55,  // 195: streamd.StreamD.SubscribeToOAuthRequests:output_type -> streamd.OAuthRequest
	65,  // 196: streamd.StreamD.SubmitOAuthCode:output_type -> streamd.SubmitOAuthCodeReply
	72,  // 197: streamd.StreamD.ListStreamServers:output_type -> streamd.ListStreamServersReply
	74,  // 198: streamd.StreamD.StartStreamServer:output_type -> streamd.StartStreamServerReply
	76,  // 199: streamd.StreamD.StopStreamServer:output_type -> streamd.StopStreamServerReply
	155, // 200: streamd.StreamD.SubscribeToStreamServersChanges:output_type -> streamd.StreamServersChange
	79,  // 201: streamd.StreamD.ListStreamDestinations:output_type -> streamd.ListStreamDestinationsReply
	81,  // 202: streamd.StreamD.AddStreamDestination:output_type -> streamd.AddStreamDestinationReply
	83,  // 203: streamd.StreamD.UpdateStreamDestination:output_type -> streamd.UpdateStreamDestinationReply
	85,  // 204: streamd.StreamD.RemoveStreamDestination:output_type -> streamd.RemoveStreamDestinationReply
	157, // 205: streamd.StreamD.SubscribeToStreamDestinationsChanges:output_type -> streamd.StreamDestinationsChange
	88,  // 206: streamd.StreamD.AddIncomingStream:output_type -> streamd.AddIncomingStreamReply
	90,  // 207: streamd.StreamD.RemoveIncomingStream:output_type -> streamd.RemoveIncomingStreamReply
	92,  // 208: streamd.StreamD.ListIncomingStreams:output_type -> streamd.ListIncomingStreamsReply
	159, // 209: streamd.StreamD.SubscribeToIncomingStreamsChanges:output_type -> streamd.IncomingStreamsChange
	107, // 210: streamd.StreamD.ListStreamForwards:output_type -> streamd.ListStreamForwardsReply
	109, // 211: streamd.StreamD.AddStreamForward:output_type -> streamd.AddStreamForwardReply
	111, // 212: streamd.StreamD.UpdateStreamForward:output_type -> streamd.UpdateStreamForwardReply
	113, // 213: streamd.StreamD.RemoveStreamForward:output_type -> streamd.RemoveStreamForwardReply
	161, // 214: streamd.StreamD.SubscribeToStreamForwardsChanges:output_type -> streamd.StreamForwardsChange
	115, // 215: streamd.StreamD.WaitForStreamPublisher:output_type -> streamd.StreamPublisher
	119, // 216: streamd.StreamD.AddStreamPlayer:output_type -> streamd.AddStreamPlayerReply
	121, // 217: streamd.StreamD.RemoveStreamPlayer:output_type -> streamd.RemoveStreamPlayerReply
	123, // 218: streamd.StreamD.UpdateStreamPlayer:output_type -> streamd.UpdateStreamPlayerReply
	125, // 219: streamd.StreamD.ListStreamPlayers:output_type -> streamd.ListStreamPlayersReply
	127, // 220: streamd.StreamD.GetStreamPlayer:output_type -> streamd.GetStreamPlayerReply
	163, // 221: streamd.StreamD.SubscribeToStreamPlayersChanges:output_type -> streamd.StreamPlayersChange
	129, // 222: streamd.StreamD.StreamPlayerOpen:output_type -> streamd.StreamPlayerOpenReply
	131, // 223: streamd.StreamD.StreamPlayerProcessTitle:output_type -> streamd.StreamPlayerProcessTitleReply
	133, // 224: streamd.StreamD.StreamPlayerGetLink:output_type -> streamd.StreamPlayerGetLinkReply
	135, // 225: streamd.StreamD.StreamPlayerEndChan:output_type -> streamd.StreamPlayerEndChanReply
	137, // 226: streamd.StreamD.StreamPlayerIsEnded:output_type -> streamd.StreamPlayerIsEndedReply
	139, // 227: streamd.StreamD.StreamPlayerGetPosition:output_type -> streamd.StreamPlayerGetPositionReply
	141, // 228: streamd.StreamD.StreamPlayerGetLength:output_type -> streamd.StreamPlayerGetLengthReply
	143, // 229: streamd.StreamD.StreamPlayerSetSpeed:output_type -> streamd.StreamPlayerSetSpeedReply
	145, // 230: streamd.StreamD.StreamPlayerSetPause:output_type -> streamd.StreamPlayerSetPauseReply
	147, // 231: streamd.StreamD.StreamPlayerStop:output_type -> streamd.StreamPlayerStopReply
	149, // 232: streamd.StreamD.StreamPlayerClose:output_type -> streamd.StreamPlayerCloseReply
	170, // 233: streamd.StreamD.AddTimer:output_type -> streamd.AddTimerReply
	172, // 234: streamd.StreamD.RemoveTimer:output_type -> streamd.RemoveTimerReply
	175, // 235: streamd.StreamD.ListTimers:output_type -> streamd.ListTimersReply
	185, // 236: streamd.StreamD.ListTriggerRules:output_type -> streamd.ListTriggerRulesReply
	187, // 237: streamd.StreamD.AddTriggerRule:output_type -> streamd.AddTriggerRuleReply
	189, // 238: streamd.StreamD.RemoveTriggerRule:output_type -> streamd.RemoveTriggerRuleReply
	191, // 239: streamd.StreamD.UpdateTriggerRule:output_type -> streamd.UpdateTriggerRuleReply
	193, // 240: streamd.StreamD.SubmitEvent:output_type -> streamd.SubmitEventReply
	195, // 241: streamd.StreamD.SubscribeToChatMessages:output_type -> streamd.ChatMessage
	197, // 242: streamd.StreamD.SendChatMessage:output_type -> streamd.SendChatMessageReply
	199, // 243: streamd.StreamD.RemoveChatMessage:output_type -> streamd.RemoveChatMessageReply
	201, // 244: streamd.StreamD.BanUser:output_type -> streamd.BanUserReply
	203, // 245: streamd.StreamD.Shoutout:output_type -> streamd.ShoutoutReply
	205, // 246: streamd.StreamD.RaidTo:output_type -> streamd.RaidToReply
	207, // 247: streamd.StreamD.GetPeerIDs:output_type -> streamd.GetPeerIDsReply
	209, // 248: streamd.StreamD.LLMGenerate:output_type -> streamd.LLMGenerateReply
	169, // [169:249] is the sub-list for method output_type
	89,  // [89:169] is the sub-list for method input_type
	89,  // [89:89] is the sub-list for extension type_name
	89,  // [89:89] is the sub-list for extension extendee
	0,   // [0:89] is the sub-list for field type_name
}

func init() { file_streamd_proto_init() }
func file_streamd_proto_init() {
	if File_streamd_proto != nil {
		return
	}
	file_streamd_proto_msgTypes[17].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[22].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[57].OneofWrappers = []any{
		(*TLSCertificate_X509)(nil),
	}
	file_streamd_proto_msgTypes[58].OneofWrappers = []any{
		(*PrivateKey_PKCS8)(nil),
	}
	file_streamd_proto_msgTypes[59].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[91].OneofWrappers = []any{
		(*AudioQuality_ConstantBitrate)(nil),
	}
	file_streamd_proto_msgTypes[94].OneofWrappers = []any{
		(*VideoQuality_ConstantBitrate)(nil),
		(*VideoQuality_ConstantQuality)(nil),
	}
	file_streamd_proto_msgTypes[105].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[156].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[157].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[158].OneofWrappers = []any{
		(*OBSAction_ItemShowHide)(nil),
		(*OBSAction_WindowCaptureSetSource)(nil),
	}
	file_streamd_proto_msgTypes[159].OneofWrappers = []any{
		(*Action_NoopRequest)(nil),
		(*Action_StartStreamRequest)(nil),
		(*Action_StartStreamByProfileNameRequest)(nil),
		(*Action_EndStreamRequest)(nil),
		(*Action_ObsAction)(nil),
	}
	file_streamd_proto_msgTypes[170].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[171].OneofWrappers = []any{}
	file_streamd_proto_msgTypes[172].OneofWrappers = []any{
		(*EventQuery_And)(nil),
		(*EventQuery_Or)(nil),
		(*EventQuery_Not)(nil),
		(*EventQuery_EventType)(nil),
		(*EventQuery_Event)(nil),
	}
	file_streamd_proto_msgTypes[173].OneofWrappers = []any{
		(*Event_ObsSceneChange)(nil),
		(*Event_WindowFocusChange)(nil),
	}
	file_streamd_proto_msgTypes[191].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_streamd_proto_rawDesc), len(file_streamd_proto_rawDesc)),
			NumEnums:      9,
			NumMessages:   201,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_streamd_proto_goTypes,
		DependencyIndexes: file_streamd_proto_depIdxs,
		EnumInfos:         file_streamd_proto_enumTypes,
		MessageInfos:      file_streamd_proto_msgTypes,
	}.Build()
	File_streamd_proto = out.File
	file_streamd_proto_goTypes = nil
	file_streamd_proto_depIdxs = nil
}
