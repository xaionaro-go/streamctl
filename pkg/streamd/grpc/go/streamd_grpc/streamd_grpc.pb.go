// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: streamd.proto

package streamd_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	StreamD_Ping_FullMethodName                                 = "/streamd.StreamD/Ping"
	StreamD_SetLoggingLevel_FullMethodName                      = "/streamd.StreamD/SetLoggingLevel"
	StreamD_GetLoggingLevel_FullMethodName                      = "/streamd.StreamD/GetLoggingLevel"
	StreamD_GetConfig_FullMethodName                            = "/streamd.StreamD/GetConfig"
	StreamD_SetConfig_FullMethodName                            = "/streamd.StreamD/SetConfig"
	StreamD_SaveConfig_FullMethodName                           = "/streamd.StreamD/SaveConfig"
	StreamD_SubscribeToConfigChanges_FullMethodName             = "/streamd.StreamD/SubscribeToConfigChanges"
	StreamD_ResetCache_FullMethodName                           = "/streamd.StreamD/ResetCache"
	StreamD_InitCache_FullMethodName                            = "/streamd.StreamD/InitCache"
	StreamD_StartStream_FullMethodName                          = "/streamd.StreamD/StartStream"
	StreamD_StartStreamByProfileName_FullMethodName             = "/streamd.StreamD/StartStreamByProfileName"
	StreamD_EndStream_FullMethodName                            = "/streamd.StreamD/EndStream"
	StreamD_GetStreamStatus_FullMethodName                      = "/streamd.StreamD/GetStreamStatus"
	StreamD_IsBackendEnabled_FullMethodName                     = "/streamd.StreamD/IsBackendEnabled"
	StreamD_GetBackendInfo_FullMethodName                       = "/streamd.StreamD/GetBackendInfo"
	StreamD_SubscribeToStreamsChanges_FullMethodName            = "/streamd.StreamD/SubscribeToStreamsChanges"
	StreamD_Restart_FullMethodName                              = "/streamd.StreamD/Restart"
	StreamD_SetTitle_FullMethodName                             = "/streamd.StreamD/SetTitle"
	StreamD_SetDescription_FullMethodName                       = "/streamd.StreamD/SetDescription"
	StreamD_ApplyProfile_FullMethodName                         = "/streamd.StreamD/ApplyProfile"
	StreamD_UpdateStream_FullMethodName                         = "/streamd.StreamD/UpdateStream"
	StreamD_GetVariable_FullMethodName                          = "/streamd.StreamD/GetVariable"
	StreamD_GetVariableHash_FullMethodName                      = "/streamd.StreamD/GetVariableHash"
	StreamD_SetVariable_FullMethodName                          = "/streamd.StreamD/SetVariable"
	StreamD_SubscribeToVariable_FullMethodName                  = "/streamd.StreamD/SubscribeToVariable"
	StreamD_EXPERIMENTAL_ReinitStreamControllers_FullMethodName = "/streamd.StreamD/EXPERIMENTAL_ReinitStreamControllers"
	StreamD_SubscribeToOAuthRequests_FullMethodName             = "/streamd.StreamD/SubscribeToOAuthRequests"
	StreamD_SubmitOAuthCode_FullMethodName                      = "/streamd.StreamD/SubmitOAuthCode"
	StreamD_ListStreamServers_FullMethodName                    = "/streamd.StreamD/ListStreamServers"
	StreamD_StartStreamServer_FullMethodName                    = "/streamd.StreamD/StartStreamServer"
	StreamD_StopStreamServer_FullMethodName                     = "/streamd.StreamD/StopStreamServer"
	StreamD_SubscribeToStreamServersChanges_FullMethodName      = "/streamd.StreamD/SubscribeToStreamServersChanges"
	StreamD_ListStreamDestinations_FullMethodName               = "/streamd.StreamD/ListStreamDestinations"
	StreamD_AddStreamDestination_FullMethodName                 = "/streamd.StreamD/AddStreamDestination"
	StreamD_UpdateStreamDestination_FullMethodName              = "/streamd.StreamD/UpdateStreamDestination"
	StreamD_RemoveStreamDestination_FullMethodName              = "/streamd.StreamD/RemoveStreamDestination"
	StreamD_SubscribeToStreamDestinationsChanges_FullMethodName = "/streamd.StreamD/SubscribeToStreamDestinationsChanges"
	StreamD_AddIncomingStream_FullMethodName                    = "/streamd.StreamD/AddIncomingStream"
	StreamD_RemoveIncomingStream_FullMethodName                 = "/streamd.StreamD/RemoveIncomingStream"
	StreamD_ListIncomingStreams_FullMethodName                  = "/streamd.StreamD/ListIncomingStreams"
	StreamD_SubscribeToIncomingStreamsChanges_FullMethodName    = "/streamd.StreamD/SubscribeToIncomingStreamsChanges"
	StreamD_ListStreamForwards_FullMethodName                   = "/streamd.StreamD/ListStreamForwards"
	StreamD_AddStreamForward_FullMethodName                     = "/streamd.StreamD/AddStreamForward"
	StreamD_UpdateStreamForward_FullMethodName                  = "/streamd.StreamD/UpdateStreamForward"
	StreamD_RemoveStreamForward_FullMethodName                  = "/streamd.StreamD/RemoveStreamForward"
	StreamD_SubscribeToStreamForwardsChanges_FullMethodName     = "/streamd.StreamD/SubscribeToStreamForwardsChanges"
	StreamD_WaitForStreamPublisher_FullMethodName               = "/streamd.StreamD/WaitForStreamPublisher"
	StreamD_AddStreamPlayer_FullMethodName                      = "/streamd.StreamD/AddStreamPlayer"
	StreamD_RemoveStreamPlayer_FullMethodName                   = "/streamd.StreamD/RemoveStreamPlayer"
	StreamD_UpdateStreamPlayer_FullMethodName                   = "/streamd.StreamD/UpdateStreamPlayer"
	StreamD_ListStreamPlayers_FullMethodName                    = "/streamd.StreamD/ListStreamPlayers"
	StreamD_GetStreamPlayer_FullMethodName                      = "/streamd.StreamD/GetStreamPlayer"
	StreamD_SubscribeToStreamPlayersChanges_FullMethodName      = "/streamd.StreamD/SubscribeToStreamPlayersChanges"
	StreamD_StreamPlayerOpen_FullMethodName                     = "/streamd.StreamD/StreamPlayerOpen"
	StreamD_StreamPlayerProcessTitle_FullMethodName             = "/streamd.StreamD/StreamPlayerProcessTitle"
	StreamD_StreamPlayerGetLink_FullMethodName                  = "/streamd.StreamD/StreamPlayerGetLink"
	StreamD_StreamPlayerEndChan_FullMethodName                  = "/streamd.StreamD/StreamPlayerEndChan"
	StreamD_StreamPlayerIsEnded_FullMethodName                  = "/streamd.StreamD/StreamPlayerIsEnded"
	StreamD_StreamPlayerGetPosition_FullMethodName              = "/streamd.StreamD/StreamPlayerGetPosition"
	StreamD_StreamPlayerGetLength_FullMethodName                = "/streamd.StreamD/StreamPlayerGetLength"
	StreamD_StreamPlayerSetSpeed_FullMethodName                 = "/streamd.StreamD/StreamPlayerSetSpeed"
	StreamD_StreamPlayerSetPause_FullMethodName                 = "/streamd.StreamD/StreamPlayerSetPause"
	StreamD_StreamPlayerStop_FullMethodName                     = "/streamd.StreamD/StreamPlayerStop"
	StreamD_StreamPlayerClose_FullMethodName                    = "/streamd.StreamD/StreamPlayerClose"
	StreamD_AddTimer_FullMethodName                             = "/streamd.StreamD/AddTimer"
	StreamD_RemoveTimer_FullMethodName                          = "/streamd.StreamD/RemoveTimer"
	StreamD_ListTimers_FullMethodName                           = "/streamd.StreamD/ListTimers"
	StreamD_ListTriggerRules_FullMethodName                     = "/streamd.StreamD/ListTriggerRules"
	StreamD_AddTriggerRule_FullMethodName                       = "/streamd.StreamD/AddTriggerRule"
	StreamD_RemoveTriggerRule_FullMethodName                    = "/streamd.StreamD/RemoveTriggerRule"
	StreamD_UpdateTriggerRule_FullMethodName                    = "/streamd.StreamD/UpdateTriggerRule"
	StreamD_SubmitEvent_FullMethodName                          = "/streamd.StreamD/SubmitEvent"
	StreamD_SubscribeToChatMessages_FullMethodName              = "/streamd.StreamD/SubscribeToChatMessages"
	StreamD_SendChatMessage_FullMethodName                      = "/streamd.StreamD/SendChatMessage"
	StreamD_RemoveChatMessage_FullMethodName                    = "/streamd.StreamD/RemoveChatMessage"
	StreamD_BanUser_FullMethodName                              = "/streamd.StreamD/BanUser"
	StreamD_Shoutout_FullMethodName                             = "/streamd.StreamD/Shoutout"
	StreamD_RaidTo_FullMethodName                               = "/streamd.StreamD/RaidTo"
	StreamD_GetPeerIDs_FullMethodName                           = "/streamd.StreamD/GetPeerIDs"
	StreamD_LLMGenerate_FullMethodName                          = "/streamd.StreamD/LLMGenerate"
)

// StreamDClient is the client API for StreamD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	SetLoggingLevel(ctx context.Context, in *SetLoggingLevelRequest, opts ...grpc.CallOption) (*SetLoggingLevelReply, error)
	GetLoggingLevel(ctx context.Context, in *GetLoggingLevelRequest, opts ...grpc.CallOption) (*GetLoggingLevelReply, error)
	GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigReply, error)
	SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigReply, error)
	SubscribeToConfigChanges(ctx context.Context, in *SubscribeToConfigChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToConfigChangesClient, error)
	ResetCache(ctx context.Context, in *ResetCacheRequest, opts ...grpc.CallOption) (*ResetCacheReply, error)
	InitCache(ctx context.Context, in *InitCacheRequest, opts ...grpc.CallOption) (*InitCacheReply, error)
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamReply, error)
	StartStreamByProfileName(ctx context.Context, in *StartStreamByProfileNameRequest, opts ...grpc.CallOption) (*StartStreamReply, error)
	EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamReply, error)
	GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusReply, error)
	IsBackendEnabled(ctx context.Context, in *IsBackendEnabledRequest, opts ...grpc.CallOption) (*IsBackendEnabledReply, error)
	GetBackendInfo(ctx context.Context, in *GetBackendInfoRequest, opts ...grpc.CallOption) (*GetBackendInfoReply, error)
	SubscribeToStreamsChanges(ctx context.Context, in *SubscribeToStreamsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamsChangesClient, error)
	Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error)
	SetTitle(ctx context.Context, in *SetTitleRequest, opts ...grpc.CallOption) (*SetTitleReply, error)
	SetDescription(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*SetDescriptionReply, error)
	ApplyProfile(ctx context.Context, in *ApplyProfileRequest, opts ...grpc.CallOption) (*ApplyProfileReply, error)
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamReply, error)
	GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableReply, error)
	GetVariableHash(ctx context.Context, in *GetVariableHashRequest, opts ...grpc.CallOption) (*GetVariableHashReply, error)
	SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableReply, error)
	SubscribeToVariable(ctx context.Context, in *SubscribeToVariableRequest, opts ...grpc.CallOption) (StreamD_SubscribeToVariableClient, error)
	EXPERIMENTAL_ReinitStreamControllers(ctx context.Context, in *EXPERIMENTAL_ReinitStreamControllersRequest, opts ...grpc.CallOption) (*EXPERIMENTAL_ReinitStreamControllersReply, error)
	SubscribeToOAuthRequests(ctx context.Context, in *SubscribeToOAuthRequestsRequest, opts ...grpc.CallOption) (StreamD_SubscribeToOAuthRequestsClient, error)
	SubmitOAuthCode(ctx context.Context, in *SubmitOAuthCodeRequest, opts ...grpc.CallOption) (*SubmitOAuthCodeReply, error)
	ListStreamServers(ctx context.Context, in *ListStreamServersRequest, opts ...grpc.CallOption) (*ListStreamServersReply, error)
	StartStreamServer(ctx context.Context, in *StartStreamServerRequest, opts ...grpc.CallOption) (*StartStreamServerReply, error)
	StopStreamServer(ctx context.Context, in *StopStreamServerRequest, opts ...grpc.CallOption) (*StopStreamServerReply, error)
	SubscribeToStreamServersChanges(ctx context.Context, in *SubscribeToStreamServersChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamServersChangesClient, error)
	ListStreamDestinations(ctx context.Context, in *ListStreamDestinationsRequest, opts ...grpc.CallOption) (*ListStreamDestinationsReply, error)
	AddStreamDestination(ctx context.Context, in *AddStreamDestinationRequest, opts ...grpc.CallOption) (*AddStreamDestinationReply, error)
	UpdateStreamDestination(ctx context.Context, in *UpdateStreamDestinationRequest, opts ...grpc.CallOption) (*UpdateStreamDestinationReply, error)
	RemoveStreamDestination(ctx context.Context, in *RemoveStreamDestinationRequest, opts ...grpc.CallOption) (*RemoveStreamDestinationReply, error)
	SubscribeToStreamDestinationsChanges(ctx context.Context, in *SubscribeToStreamDestinationsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamDestinationsChangesClient, error)
	AddIncomingStream(ctx context.Context, in *AddIncomingStreamRequest, opts ...grpc.CallOption) (*AddIncomingStreamReply, error)
	RemoveIncomingStream(ctx context.Context, in *RemoveIncomingStreamRequest, opts ...grpc.CallOption) (*RemoveIncomingStreamReply, error)
	ListIncomingStreams(ctx context.Context, in *ListIncomingStreamsRequest, opts ...grpc.CallOption) (*ListIncomingStreamsReply, error)
	SubscribeToIncomingStreamsChanges(ctx context.Context, in *SubscribeToIncomingStreamsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToIncomingStreamsChangesClient, error)
	ListStreamForwards(ctx context.Context, in *ListStreamForwardsRequest, opts ...grpc.CallOption) (*ListStreamForwardsReply, error)
	AddStreamForward(ctx context.Context, in *AddStreamForwardRequest, opts ...grpc.CallOption) (*AddStreamForwardReply, error)
	UpdateStreamForward(ctx context.Context, in *UpdateStreamForwardRequest, opts ...grpc.CallOption) (*UpdateStreamForwardReply, error)
	RemoveStreamForward(ctx context.Context, in *RemoveStreamForwardRequest, opts ...grpc.CallOption) (*RemoveStreamForwardReply, error)
	SubscribeToStreamForwardsChanges(ctx context.Context, in *SubscribeToStreamForwardsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamForwardsChangesClient, error)
	WaitForStreamPublisher(ctx context.Context, in *WaitForStreamPublisherRequest, opts ...grpc.CallOption) (StreamD_WaitForStreamPublisherClient, error)
	AddStreamPlayer(ctx context.Context, in *AddStreamPlayerRequest, opts ...grpc.CallOption) (*AddStreamPlayerReply, error)
	RemoveStreamPlayer(ctx context.Context, in *RemoveStreamPlayerRequest, opts ...grpc.CallOption) (*RemoveStreamPlayerReply, error)
	UpdateStreamPlayer(ctx context.Context, in *UpdateStreamPlayerRequest, opts ...grpc.CallOption) (*UpdateStreamPlayerReply, error)
	ListStreamPlayers(ctx context.Context, in *ListStreamPlayersRequest, opts ...grpc.CallOption) (*ListStreamPlayersReply, error)
	GetStreamPlayer(ctx context.Context, in *GetStreamPlayerRequest, opts ...grpc.CallOption) (*GetStreamPlayerReply, error)
	SubscribeToStreamPlayersChanges(ctx context.Context, in *SubscribeToStreamPlayersChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamPlayersChangesClient, error)
	StreamPlayerOpen(ctx context.Context, in *StreamPlayerOpenRequest, opts ...grpc.CallOption) (*StreamPlayerOpenReply, error)
	StreamPlayerProcessTitle(ctx context.Context, in *StreamPlayerProcessTitleRequest, opts ...grpc.CallOption) (*StreamPlayerProcessTitleReply, error)
	StreamPlayerGetLink(ctx context.Context, in *StreamPlayerGetLinkRequest, opts ...grpc.CallOption) (*StreamPlayerGetLinkReply, error)
	StreamPlayerEndChan(ctx context.Context, in *StreamPlayerEndChanRequest, opts ...grpc.CallOption) (StreamD_StreamPlayerEndChanClient, error)
	StreamPlayerIsEnded(ctx context.Context, in *StreamPlayerIsEndedRequest, opts ...grpc.CallOption) (*StreamPlayerIsEndedReply, error)
	StreamPlayerGetPosition(ctx context.Context, in *StreamPlayerGetPositionRequest, opts ...grpc.CallOption) (*StreamPlayerGetPositionReply, error)
	StreamPlayerGetLength(ctx context.Context, in *StreamPlayerGetLengthRequest, opts ...grpc.CallOption) (*StreamPlayerGetLengthReply, error)
	StreamPlayerSetSpeed(ctx context.Context, in *StreamPlayerSetSpeedRequest, opts ...grpc.CallOption) (*StreamPlayerSetSpeedReply, error)
	StreamPlayerSetPause(ctx context.Context, in *StreamPlayerSetPauseRequest, opts ...grpc.CallOption) (*StreamPlayerSetPauseReply, error)
	StreamPlayerStop(ctx context.Context, in *StreamPlayerStopRequest, opts ...grpc.CallOption) (*StreamPlayerStopReply, error)
	StreamPlayerClose(ctx context.Context, in *StreamPlayerCloseRequest, opts ...grpc.CallOption) (*StreamPlayerCloseReply, error)
	AddTimer(ctx context.Context, in *AddTimerRequest, opts ...grpc.CallOption) (*AddTimerReply, error)
	RemoveTimer(ctx context.Context, in *RemoveTimerRequest, opts ...grpc.CallOption) (*RemoveTimerReply, error)
	ListTimers(ctx context.Context, in *ListTimersRequest, opts ...grpc.CallOption) (*ListTimersReply, error)
	ListTriggerRules(ctx context.Context, in *ListTriggerRulesRequest, opts ...grpc.CallOption) (*ListTriggerRulesReply, error)
	AddTriggerRule(ctx context.Context, in *AddTriggerRuleRequest, opts ...grpc.CallOption) (*AddTriggerRuleReply, error)
	RemoveTriggerRule(ctx context.Context, in *RemoveTriggerRuleRequest, opts ...grpc.CallOption) (*RemoveTriggerRuleReply, error)
	UpdateTriggerRule(ctx context.Context, in *UpdateTriggerRuleRequest, opts ...grpc.CallOption) (*UpdateTriggerRuleReply, error)
	SubmitEvent(ctx context.Context, in *SubmitEventRequest, opts ...grpc.CallOption) (*SubmitEventReply, error)
	SubscribeToChatMessages(ctx context.Context, in *SubscribeToChatMessagesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToChatMessagesClient, error)
	SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageReply, error)
	RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageReply, error)
	BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error)
	Shoutout(ctx context.Context, in *ShoutoutRequest, opts ...grpc.CallOption) (*ShoutoutReply, error)
	RaidTo(ctx context.Context, in *RaidToRequest, opts ...grpc.CallOption) (*RaidToReply, error)
	GetPeerIDs(ctx context.Context, in *GetPeerIDsRequest, opts ...grpc.CallOption) (*GetPeerIDsReply, error)
	LLMGenerate(ctx context.Context, in *LLMGenerateRequest, opts ...grpc.CallOption) (*LLMGenerateReply, error)
}

type streamDClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDClient(cc grpc.ClientConnInterface) StreamDClient {
	return &streamDClient{cc}
}

func (c *streamDClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingReply)
	err := c.cc.Invoke(ctx, StreamD_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetLoggingLevel(ctx context.Context, in *SetLoggingLevelRequest, opts ...grpc.CallOption) (*SetLoggingLevelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLoggingLevelReply)
	err := c.cc.Invoke(ctx, StreamD_SetLoggingLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetLoggingLevel(ctx context.Context, in *GetLoggingLevelRequest, opts ...grpc.CallOption) (*GetLoggingLevelReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLoggingLevelReply)
	err := c.cc.Invoke(ctx, StreamD_GetLoggingLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetConfig(ctx context.Context, in *GetConfigRequest, opts ...grpc.CallOption) (*GetConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigReply)
	err := c.cc.Invoke(ctx, StreamD_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConfigReply)
	err := c.cc.Invoke(ctx, StreamD_SetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SaveConfig(ctx context.Context, in *SaveConfigRequest, opts ...grpc.CallOption) (*SaveConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveConfigReply)
	err := c.cc.Invoke(ctx, StreamD_SaveConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToConfigChanges(ctx context.Context, in *SubscribeToConfigChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToConfigChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[0], StreamD_SubscribeToConfigChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToConfigChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToConfigChangesClient interface {
	Recv() (*ConfigChange, error)
	grpc.ClientStream
}

type streamDSubscribeToConfigChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToConfigChangesClient) Recv() (*ConfigChange, error) {
	m := new(ConfigChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) ResetCache(ctx context.Context, in *ResetCacheRequest, opts ...grpc.CallOption) (*ResetCacheReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResetCacheReply)
	err := c.cc.Invoke(ctx, StreamD_ResetCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) InitCache(ctx context.Context, in *InitCacheRequest, opts ...grpc.CallOption) (*InitCacheReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitCacheReply)
	err := c.cc.Invoke(ctx, StreamD_InitCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartStreamReply)
	err := c.cc.Invoke(ctx, StreamD_StartStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StartStreamByProfileName(ctx context.Context, in *StartStreamByProfileNameRequest, opts ...grpc.CallOption) (*StartStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartStreamReply)
	err := c.cc.Invoke(ctx, StreamD_StartStreamByProfileName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) EndStream(ctx context.Context, in *EndStreamRequest, opts ...grpc.CallOption) (*EndStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndStreamReply)
	err := c.cc.Invoke(ctx, StreamD_EndStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamStatusReply)
	err := c.cc.Invoke(ctx, StreamD_GetStreamStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) IsBackendEnabled(ctx context.Context, in *IsBackendEnabledRequest, opts ...grpc.CallOption) (*IsBackendEnabledReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsBackendEnabledReply)
	err := c.cc.Invoke(ctx, StreamD_IsBackendEnabled_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetBackendInfo(ctx context.Context, in *GetBackendInfoRequest, opts ...grpc.CallOption) (*GetBackendInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBackendInfoReply)
	err := c.cc.Invoke(ctx, StreamD_GetBackendInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToStreamsChanges(ctx context.Context, in *SubscribeToStreamsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamsChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[1], StreamD_SubscribeToStreamsChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToStreamsChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToStreamsChangesClient interface {
	Recv() (*StreamsChange, error)
	grpc.ClientStream
}

type streamDSubscribeToStreamsChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToStreamsChangesClient) Recv() (*StreamsChange, error) {
	m := new(StreamsChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) Restart(ctx context.Context, in *RestartRequest, opts ...grpc.CallOption) (*RestartReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartReply)
	err := c.cc.Invoke(ctx, StreamD_Restart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetTitle(ctx context.Context, in *SetTitleRequest, opts ...grpc.CallOption) (*SetTitleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTitleReply)
	err := c.cc.Invoke(ctx, StreamD_SetTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetDescription(ctx context.Context, in *SetDescriptionRequest, opts ...grpc.CallOption) (*SetDescriptionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDescriptionReply)
	err := c.cc.Invoke(ctx, StreamD_SetDescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ApplyProfile(ctx context.Context, in *ApplyProfileRequest, opts ...grpc.CallOption) (*ApplyProfileReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyProfileReply)
	err := c.cc.Invoke(ctx, StreamD_ApplyProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (*UpdateStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamReply)
	err := c.cc.Invoke(ctx, StreamD_UpdateStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetVariable(ctx context.Context, in *GetVariableRequest, opts ...grpc.CallOption) (*GetVariableReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVariableReply)
	err := c.cc.Invoke(ctx, StreamD_GetVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetVariableHash(ctx context.Context, in *GetVariableHashRequest, opts ...grpc.CallOption) (*GetVariableHashReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVariableHashReply)
	err := c.cc.Invoke(ctx, StreamD_GetVariableHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SetVariable(ctx context.Context, in *SetVariableRequest, opts ...grpc.CallOption) (*SetVariableReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVariableReply)
	err := c.cc.Invoke(ctx, StreamD_SetVariable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToVariable(ctx context.Context, in *SubscribeToVariableRequest, opts ...grpc.CallOption) (StreamD_SubscribeToVariableClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[2], StreamD_SubscribeToVariable_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToVariableClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToVariableClient interface {
	Recv() (*VariableChange, error)
	grpc.ClientStream
}

type streamDSubscribeToVariableClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToVariableClient) Recv() (*VariableChange, error) {
	m := new(VariableChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) EXPERIMENTAL_ReinitStreamControllers(ctx context.Context, in *EXPERIMENTAL_ReinitStreamControllersRequest, opts ...grpc.CallOption) (*EXPERIMENTAL_ReinitStreamControllersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EXPERIMENTAL_ReinitStreamControllersReply)
	err := c.cc.Invoke(ctx, StreamD_EXPERIMENTAL_ReinitStreamControllers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToOAuthRequests(ctx context.Context, in *SubscribeToOAuthRequestsRequest, opts ...grpc.CallOption) (StreamD_SubscribeToOAuthRequestsClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[3], StreamD_SubscribeToOAuthRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToOAuthRequestsClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToOAuthRequestsClient interface {
	Recv() (*OAuthRequest, error)
	grpc.ClientStream
}

type streamDSubscribeToOAuthRequestsClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToOAuthRequestsClient) Recv() (*OAuthRequest, error) {
	m := new(OAuthRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) SubmitOAuthCode(ctx context.Context, in *SubmitOAuthCodeRequest, opts ...grpc.CallOption) (*SubmitOAuthCodeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitOAuthCodeReply)
	err := c.cc.Invoke(ctx, StreamD_SubmitOAuthCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListStreamServers(ctx context.Context, in *ListStreamServersRequest, opts ...grpc.CallOption) (*ListStreamServersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamServersReply)
	err := c.cc.Invoke(ctx, StreamD_ListStreamServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StartStreamServer(ctx context.Context, in *StartStreamServerRequest, opts ...grpc.CallOption) (*StartStreamServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartStreamServerReply)
	err := c.cc.Invoke(ctx, StreamD_StartStreamServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StopStreamServer(ctx context.Context, in *StopStreamServerRequest, opts ...grpc.CallOption) (*StopStreamServerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopStreamServerReply)
	err := c.cc.Invoke(ctx, StreamD_StopStreamServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToStreamServersChanges(ctx context.Context, in *SubscribeToStreamServersChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamServersChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[4], StreamD_SubscribeToStreamServersChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToStreamServersChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToStreamServersChangesClient interface {
	Recv() (*StreamServersChange, error)
	grpc.ClientStream
}

type streamDSubscribeToStreamServersChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToStreamServersChangesClient) Recv() (*StreamServersChange, error) {
	m := new(StreamServersChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) ListStreamDestinations(ctx context.Context, in *ListStreamDestinationsRequest, opts ...grpc.CallOption) (*ListStreamDestinationsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamDestinationsReply)
	err := c.cc.Invoke(ctx, StreamD_ListStreamDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddStreamDestination(ctx context.Context, in *AddStreamDestinationRequest, opts ...grpc.CallOption) (*AddStreamDestinationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStreamDestinationReply)
	err := c.cc.Invoke(ctx, StreamD_AddStreamDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStreamDestination(ctx context.Context, in *UpdateStreamDestinationRequest, opts ...grpc.CallOption) (*UpdateStreamDestinationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamDestinationReply)
	err := c.cc.Invoke(ctx, StreamD_UpdateStreamDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveStreamDestination(ctx context.Context, in *RemoveStreamDestinationRequest, opts ...grpc.CallOption) (*RemoveStreamDestinationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStreamDestinationReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveStreamDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToStreamDestinationsChanges(ctx context.Context, in *SubscribeToStreamDestinationsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamDestinationsChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[5], StreamD_SubscribeToStreamDestinationsChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToStreamDestinationsChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToStreamDestinationsChangesClient interface {
	Recv() (*StreamDestinationsChange, error)
	grpc.ClientStream
}

type streamDSubscribeToStreamDestinationsChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToStreamDestinationsChangesClient) Recv() (*StreamDestinationsChange, error) {
	m := new(StreamDestinationsChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) AddIncomingStream(ctx context.Context, in *AddIncomingStreamRequest, opts ...grpc.CallOption) (*AddIncomingStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddIncomingStreamReply)
	err := c.cc.Invoke(ctx, StreamD_AddIncomingStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveIncomingStream(ctx context.Context, in *RemoveIncomingStreamRequest, opts ...grpc.CallOption) (*RemoveIncomingStreamReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveIncomingStreamReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveIncomingStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListIncomingStreams(ctx context.Context, in *ListIncomingStreamsRequest, opts ...grpc.CallOption) (*ListIncomingStreamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIncomingStreamsReply)
	err := c.cc.Invoke(ctx, StreamD_ListIncomingStreams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToIncomingStreamsChanges(ctx context.Context, in *SubscribeToIncomingStreamsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToIncomingStreamsChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[6], StreamD_SubscribeToIncomingStreamsChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToIncomingStreamsChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToIncomingStreamsChangesClient interface {
	Recv() (*IncomingStreamsChange, error)
	grpc.ClientStream
}

type streamDSubscribeToIncomingStreamsChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToIncomingStreamsChangesClient) Recv() (*IncomingStreamsChange, error) {
	m := new(IncomingStreamsChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) ListStreamForwards(ctx context.Context, in *ListStreamForwardsRequest, opts ...grpc.CallOption) (*ListStreamForwardsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamForwardsReply)
	err := c.cc.Invoke(ctx, StreamD_ListStreamForwards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddStreamForward(ctx context.Context, in *AddStreamForwardRequest, opts ...grpc.CallOption) (*AddStreamForwardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStreamForwardReply)
	err := c.cc.Invoke(ctx, StreamD_AddStreamForward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStreamForward(ctx context.Context, in *UpdateStreamForwardRequest, opts ...grpc.CallOption) (*UpdateStreamForwardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamForwardReply)
	err := c.cc.Invoke(ctx, StreamD_UpdateStreamForward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveStreamForward(ctx context.Context, in *RemoveStreamForwardRequest, opts ...grpc.CallOption) (*RemoveStreamForwardReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStreamForwardReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveStreamForward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToStreamForwardsChanges(ctx context.Context, in *SubscribeToStreamForwardsChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamForwardsChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[7], StreamD_SubscribeToStreamForwardsChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToStreamForwardsChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToStreamForwardsChangesClient interface {
	Recv() (*StreamForwardsChange, error)
	grpc.ClientStream
}

type streamDSubscribeToStreamForwardsChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToStreamForwardsChangesClient) Recv() (*StreamForwardsChange, error) {
	m := new(StreamForwardsChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) WaitForStreamPublisher(ctx context.Context, in *WaitForStreamPublisherRequest, opts ...grpc.CallOption) (StreamD_WaitForStreamPublisherClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[8], StreamD_WaitForStreamPublisher_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDWaitForStreamPublisherClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_WaitForStreamPublisherClient interface {
	Recv() (*StreamPublisher, error)
	grpc.ClientStream
}

type streamDWaitForStreamPublisherClient struct {
	grpc.ClientStream
}

func (x *streamDWaitForStreamPublisherClient) Recv() (*StreamPublisher, error) {
	m := new(StreamPublisher)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) AddStreamPlayer(ctx context.Context, in *AddStreamPlayerRequest, opts ...grpc.CallOption) (*AddStreamPlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddStreamPlayerReply)
	err := c.cc.Invoke(ctx, StreamD_AddStreamPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveStreamPlayer(ctx context.Context, in *RemoveStreamPlayerRequest, opts ...grpc.CallOption) (*RemoveStreamPlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveStreamPlayerReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveStreamPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateStreamPlayer(ctx context.Context, in *UpdateStreamPlayerRequest, opts ...grpc.CallOption) (*UpdateStreamPlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStreamPlayerReply)
	err := c.cc.Invoke(ctx, StreamD_UpdateStreamPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListStreamPlayers(ctx context.Context, in *ListStreamPlayersRequest, opts ...grpc.CallOption) (*ListStreamPlayersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStreamPlayersReply)
	err := c.cc.Invoke(ctx, StreamD_ListStreamPlayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetStreamPlayer(ctx context.Context, in *GetStreamPlayerRequest, opts ...grpc.CallOption) (*GetStreamPlayerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamPlayerReply)
	err := c.cc.Invoke(ctx, StreamD_GetStreamPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToStreamPlayersChanges(ctx context.Context, in *SubscribeToStreamPlayersChangesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToStreamPlayersChangesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[9], StreamD_SubscribeToStreamPlayersChanges_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToStreamPlayersChangesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToStreamPlayersChangesClient interface {
	Recv() (*StreamPlayersChange, error)
	grpc.ClientStream
}

type streamDSubscribeToStreamPlayersChangesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToStreamPlayersChangesClient) Recv() (*StreamPlayersChange, error) {
	m := new(StreamPlayersChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) StreamPlayerOpen(ctx context.Context, in *StreamPlayerOpenRequest, opts ...grpc.CallOption) (*StreamPlayerOpenReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerOpenReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerOpen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerProcessTitle(ctx context.Context, in *StreamPlayerProcessTitleRequest, opts ...grpc.CallOption) (*StreamPlayerProcessTitleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerProcessTitleReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerProcessTitle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerGetLink(ctx context.Context, in *StreamPlayerGetLinkRequest, opts ...grpc.CallOption) (*StreamPlayerGetLinkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerGetLinkReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerGetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerEndChan(ctx context.Context, in *StreamPlayerEndChanRequest, opts ...grpc.CallOption) (StreamD_StreamPlayerEndChanClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[10], StreamD_StreamPlayerEndChan_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDStreamPlayerEndChanClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_StreamPlayerEndChanClient interface {
	Recv() (*StreamPlayerEndChanReply, error)
	grpc.ClientStream
}

type streamDStreamPlayerEndChanClient struct {
	grpc.ClientStream
}

func (x *streamDStreamPlayerEndChanClient) Recv() (*StreamPlayerEndChanReply, error) {
	m := new(StreamPlayerEndChanReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) StreamPlayerIsEnded(ctx context.Context, in *StreamPlayerIsEndedRequest, opts ...grpc.CallOption) (*StreamPlayerIsEndedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerIsEndedReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerIsEnded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerGetPosition(ctx context.Context, in *StreamPlayerGetPositionRequest, opts ...grpc.CallOption) (*StreamPlayerGetPositionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerGetPositionReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerGetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerGetLength(ctx context.Context, in *StreamPlayerGetLengthRequest, opts ...grpc.CallOption) (*StreamPlayerGetLengthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerGetLengthReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerGetLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerSetSpeed(ctx context.Context, in *StreamPlayerSetSpeedRequest, opts ...grpc.CallOption) (*StreamPlayerSetSpeedReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerSetSpeedReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerSetSpeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerSetPause(ctx context.Context, in *StreamPlayerSetPauseRequest, opts ...grpc.CallOption) (*StreamPlayerSetPauseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerSetPauseReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerSetPause_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerStop(ctx context.Context, in *StreamPlayerStopRequest, opts ...grpc.CallOption) (*StreamPlayerStopReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerStopReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerStop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) StreamPlayerClose(ctx context.Context, in *StreamPlayerCloseRequest, opts ...grpc.CallOption) (*StreamPlayerCloseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamPlayerCloseReply)
	err := c.cc.Invoke(ctx, StreamD_StreamPlayerClose_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddTimer(ctx context.Context, in *AddTimerRequest, opts ...grpc.CallOption) (*AddTimerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTimerReply)
	err := c.cc.Invoke(ctx, StreamD_AddTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveTimer(ctx context.Context, in *RemoveTimerRequest, opts ...grpc.CallOption) (*RemoveTimerReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTimerReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveTimer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListTimers(ctx context.Context, in *ListTimersRequest, opts ...grpc.CallOption) (*ListTimersReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimersReply)
	err := c.cc.Invoke(ctx, StreamD_ListTimers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) ListTriggerRules(ctx context.Context, in *ListTriggerRulesRequest, opts ...grpc.CallOption) (*ListTriggerRulesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTriggerRulesReply)
	err := c.cc.Invoke(ctx, StreamD_ListTriggerRules_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) AddTriggerRule(ctx context.Context, in *AddTriggerRuleRequest, opts ...grpc.CallOption) (*AddTriggerRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTriggerRuleReply)
	err := c.cc.Invoke(ctx, StreamD_AddTriggerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveTriggerRule(ctx context.Context, in *RemoveTriggerRuleRequest, opts ...grpc.CallOption) (*RemoveTriggerRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveTriggerRuleReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveTriggerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) UpdateTriggerRule(ctx context.Context, in *UpdateTriggerRuleRequest, opts ...grpc.CallOption) (*UpdateTriggerRuleReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTriggerRuleReply)
	err := c.cc.Invoke(ctx, StreamD_UpdateTriggerRule_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubmitEvent(ctx context.Context, in *SubmitEventRequest, opts ...grpc.CallOption) (*SubmitEventReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitEventReply)
	err := c.cc.Invoke(ctx, StreamD_SubmitEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) SubscribeToChatMessages(ctx context.Context, in *SubscribeToChatMessagesRequest, opts ...grpc.CallOption) (StreamD_SubscribeToChatMessagesClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamD_ServiceDesc.Streams[11], StreamD_SubscribeToChatMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &streamDSubscribeToChatMessagesClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamD_SubscribeToChatMessagesClient interface {
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type streamDSubscribeToChatMessagesClient struct {
	grpc.ClientStream
}

func (x *streamDSubscribeToChatMessagesClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamDClient) SendChatMessage(ctx context.Context, in *SendChatMessageRequest, opts ...grpc.CallOption) (*SendChatMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendChatMessageReply)
	err := c.cc.Invoke(ctx, StreamD_SendChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RemoveChatMessage(ctx context.Context, in *RemoveChatMessageRequest, opts ...grpc.CallOption) (*RemoveChatMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveChatMessageReply)
	err := c.cc.Invoke(ctx, StreamD_RemoveChatMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) BanUser(ctx context.Context, in *BanUserRequest, opts ...grpc.CallOption) (*BanUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanUserReply)
	err := c.cc.Invoke(ctx, StreamD_BanUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) Shoutout(ctx context.Context, in *ShoutoutRequest, opts ...grpc.CallOption) (*ShoutoutReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShoutoutReply)
	err := c.cc.Invoke(ctx, StreamD_Shoutout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) RaidTo(ctx context.Context, in *RaidToRequest, opts ...grpc.CallOption) (*RaidToReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RaidToReply)
	err := c.cc.Invoke(ctx, StreamD_RaidTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) GetPeerIDs(ctx context.Context, in *GetPeerIDsRequest, opts ...grpc.CallOption) (*GetPeerIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeerIDsReply)
	err := c.cc.Invoke(ctx, StreamD_GetPeerIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamDClient) LLMGenerate(ctx context.Context, in *LLMGenerateRequest, opts ...grpc.CallOption) (*LLMGenerateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LLMGenerateReply)
	err := c.cc.Invoke(ctx, StreamD_LLMGenerate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamDServer is the server API for StreamD service.
// All implementations must embed UnimplementedStreamDServer
// for forward compatibility
type StreamDServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	SetLoggingLevel(context.Context, *SetLoggingLevelRequest) (*SetLoggingLevelReply, error)
	GetLoggingLevel(context.Context, *GetLoggingLevelRequest) (*GetLoggingLevelReply, error)
	GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error)
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigReply, error)
	SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigReply, error)
	SubscribeToConfigChanges(*SubscribeToConfigChangesRequest, StreamD_SubscribeToConfigChangesServer) error
	ResetCache(context.Context, *ResetCacheRequest) (*ResetCacheReply, error)
	InitCache(context.Context, *InitCacheRequest) (*InitCacheReply, error)
	StartStream(context.Context, *StartStreamRequest) (*StartStreamReply, error)
	StartStreamByProfileName(context.Context, *StartStreamByProfileNameRequest) (*StartStreamReply, error)
	EndStream(context.Context, *EndStreamRequest) (*EndStreamReply, error)
	GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusReply, error)
	IsBackendEnabled(context.Context, *IsBackendEnabledRequest) (*IsBackendEnabledReply, error)
	GetBackendInfo(context.Context, *GetBackendInfoRequest) (*GetBackendInfoReply, error)
	SubscribeToStreamsChanges(*SubscribeToStreamsChangesRequest, StreamD_SubscribeToStreamsChangesServer) error
	Restart(context.Context, *RestartRequest) (*RestartReply, error)
	SetTitle(context.Context, *SetTitleRequest) (*SetTitleReply, error)
	SetDescription(context.Context, *SetDescriptionRequest) (*SetDescriptionReply, error)
	ApplyProfile(context.Context, *ApplyProfileRequest) (*ApplyProfileReply, error)
	UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamReply, error)
	GetVariable(context.Context, *GetVariableRequest) (*GetVariableReply, error)
	GetVariableHash(context.Context, *GetVariableHashRequest) (*GetVariableHashReply, error)
	SetVariable(context.Context, *SetVariableRequest) (*SetVariableReply, error)
	SubscribeToVariable(*SubscribeToVariableRequest, StreamD_SubscribeToVariableServer) error
	EXPERIMENTAL_ReinitStreamControllers(context.Context, *EXPERIMENTAL_ReinitStreamControllersRequest) (*EXPERIMENTAL_ReinitStreamControllersReply, error)
	SubscribeToOAuthRequests(*SubscribeToOAuthRequestsRequest, StreamD_SubscribeToOAuthRequestsServer) error
	SubmitOAuthCode(context.Context, *SubmitOAuthCodeRequest) (*SubmitOAuthCodeReply, error)
	ListStreamServers(context.Context, *ListStreamServersRequest) (*ListStreamServersReply, error)
	StartStreamServer(context.Context, *StartStreamServerRequest) (*StartStreamServerReply, error)
	StopStreamServer(context.Context, *StopStreamServerRequest) (*StopStreamServerReply, error)
	SubscribeToStreamServersChanges(*SubscribeToStreamServersChangesRequest, StreamD_SubscribeToStreamServersChangesServer) error
	ListStreamDestinations(context.Context, *ListStreamDestinationsRequest) (*ListStreamDestinationsReply, error)
	AddStreamDestination(context.Context, *AddStreamDestinationRequest) (*AddStreamDestinationReply, error)
	UpdateStreamDestination(context.Context, *UpdateStreamDestinationRequest) (*UpdateStreamDestinationReply, error)
	RemoveStreamDestination(context.Context, *RemoveStreamDestinationRequest) (*RemoveStreamDestinationReply, error)
	SubscribeToStreamDestinationsChanges(*SubscribeToStreamDestinationsChangesRequest, StreamD_SubscribeToStreamDestinationsChangesServer) error
	AddIncomingStream(context.Context, *AddIncomingStreamRequest) (*AddIncomingStreamReply, error)
	RemoveIncomingStream(context.Context, *RemoveIncomingStreamRequest) (*RemoveIncomingStreamReply, error)
	ListIncomingStreams(context.Context, *ListIncomingStreamsRequest) (*ListIncomingStreamsReply, error)
	SubscribeToIncomingStreamsChanges(*SubscribeToIncomingStreamsChangesRequest, StreamD_SubscribeToIncomingStreamsChangesServer) error
	ListStreamForwards(context.Context, *ListStreamForwardsRequest) (*ListStreamForwardsReply, error)
	AddStreamForward(context.Context, *AddStreamForwardRequest) (*AddStreamForwardReply, error)
	UpdateStreamForward(context.Context, *UpdateStreamForwardRequest) (*UpdateStreamForwardReply, error)
	RemoveStreamForward(context.Context, *RemoveStreamForwardRequest) (*RemoveStreamForwardReply, error)
	SubscribeToStreamForwardsChanges(*SubscribeToStreamForwardsChangesRequest, StreamD_SubscribeToStreamForwardsChangesServer) error
	WaitForStreamPublisher(*WaitForStreamPublisherRequest, StreamD_WaitForStreamPublisherServer) error
	AddStreamPlayer(context.Context, *AddStreamPlayerRequest) (*AddStreamPlayerReply, error)
	RemoveStreamPlayer(context.Context, *RemoveStreamPlayerRequest) (*RemoveStreamPlayerReply, error)
	UpdateStreamPlayer(context.Context, *UpdateStreamPlayerRequest) (*UpdateStreamPlayerReply, error)
	ListStreamPlayers(context.Context, *ListStreamPlayersRequest) (*ListStreamPlayersReply, error)
	GetStreamPlayer(context.Context, *GetStreamPlayerRequest) (*GetStreamPlayerReply, error)
	SubscribeToStreamPlayersChanges(*SubscribeToStreamPlayersChangesRequest, StreamD_SubscribeToStreamPlayersChangesServer) error
	StreamPlayerOpen(context.Context, *StreamPlayerOpenRequest) (*StreamPlayerOpenReply, error)
	StreamPlayerProcessTitle(context.Context, *StreamPlayerProcessTitleRequest) (*StreamPlayerProcessTitleReply, error)
	StreamPlayerGetLink(context.Context, *StreamPlayerGetLinkRequest) (*StreamPlayerGetLinkReply, error)
	StreamPlayerEndChan(*StreamPlayerEndChanRequest, StreamD_StreamPlayerEndChanServer) error
	StreamPlayerIsEnded(context.Context, *StreamPlayerIsEndedRequest) (*StreamPlayerIsEndedReply, error)
	StreamPlayerGetPosition(context.Context, *StreamPlayerGetPositionRequest) (*StreamPlayerGetPositionReply, error)
	StreamPlayerGetLength(context.Context, *StreamPlayerGetLengthRequest) (*StreamPlayerGetLengthReply, error)
	StreamPlayerSetSpeed(context.Context, *StreamPlayerSetSpeedRequest) (*StreamPlayerSetSpeedReply, error)
	StreamPlayerSetPause(context.Context, *StreamPlayerSetPauseRequest) (*StreamPlayerSetPauseReply, error)
	StreamPlayerStop(context.Context, *StreamPlayerStopRequest) (*StreamPlayerStopReply, error)
	StreamPlayerClose(context.Context, *StreamPlayerCloseRequest) (*StreamPlayerCloseReply, error)
	AddTimer(context.Context, *AddTimerRequest) (*AddTimerReply, error)
	RemoveTimer(context.Context, *RemoveTimerRequest) (*RemoveTimerReply, error)
	ListTimers(context.Context, *ListTimersRequest) (*ListTimersReply, error)
	ListTriggerRules(context.Context, *ListTriggerRulesRequest) (*ListTriggerRulesReply, error)
	AddTriggerRule(context.Context, *AddTriggerRuleRequest) (*AddTriggerRuleReply, error)
	RemoveTriggerRule(context.Context, *RemoveTriggerRuleRequest) (*RemoveTriggerRuleReply, error)
	UpdateTriggerRule(context.Context, *UpdateTriggerRuleRequest) (*UpdateTriggerRuleReply, error)
	SubmitEvent(context.Context, *SubmitEventRequest) (*SubmitEventReply, error)
	SubscribeToChatMessages(*SubscribeToChatMessagesRequest, StreamD_SubscribeToChatMessagesServer) error
	SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageReply, error)
	RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageReply, error)
	BanUser(context.Context, *BanUserRequest) (*BanUserReply, error)
	Shoutout(context.Context, *ShoutoutRequest) (*ShoutoutReply, error)
	RaidTo(context.Context, *RaidToRequest) (*RaidToReply, error)
	GetPeerIDs(context.Context, *GetPeerIDsRequest) (*GetPeerIDsReply, error)
	LLMGenerate(context.Context, *LLMGenerateRequest) (*LLMGenerateReply, error)
	mustEmbedUnimplementedStreamDServer()
}

// UnimplementedStreamDServer must be embedded to have forward compatible implementations.
type UnimplementedStreamDServer struct {
}

func (UnimplementedStreamDServer) Ping(context.Context, *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStreamDServer) SetLoggingLevel(context.Context, *SetLoggingLevelRequest) (*SetLoggingLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLoggingLevel not implemented")
}
func (UnimplementedStreamDServer) GetLoggingLevel(context.Context, *GetLoggingLevelRequest) (*GetLoggingLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoggingLevel not implemented")
}
func (UnimplementedStreamDServer) GetConfig(context.Context, *GetConfigRequest) (*GetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedStreamDServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedStreamDServer) SaveConfig(context.Context, *SaveConfigRequest) (*SaveConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveConfig not implemented")
}
func (UnimplementedStreamDServer) SubscribeToConfigChanges(*SubscribeToConfigChangesRequest, StreamD_SubscribeToConfigChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToConfigChanges not implemented")
}
func (UnimplementedStreamDServer) ResetCache(context.Context, *ResetCacheRequest) (*ResetCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCache not implemented")
}
func (UnimplementedStreamDServer) InitCache(context.Context, *InitCacheRequest) (*InitCacheReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitCache not implemented")
}
func (UnimplementedStreamDServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedStreamDServer) StartStreamByProfileName(context.Context, *StartStreamByProfileNameRequest) (*StartStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStreamByProfileName not implemented")
}
func (UnimplementedStreamDServer) EndStream(context.Context, *EndStreamRequest) (*EndStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndStream not implemented")
}
func (UnimplementedStreamDServer) GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedStreamDServer) IsBackendEnabled(context.Context, *IsBackendEnabledRequest) (*IsBackendEnabledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBackendEnabled not implemented")
}
func (UnimplementedStreamDServer) GetBackendInfo(context.Context, *GetBackendInfoRequest) (*GetBackendInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackendInfo not implemented")
}
func (UnimplementedStreamDServer) SubscribeToStreamsChanges(*SubscribeToStreamsChangesRequest, StreamD_SubscribeToStreamsChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToStreamsChanges not implemented")
}
func (UnimplementedStreamDServer) Restart(context.Context, *RestartRequest) (*RestartReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedStreamDServer) SetTitle(context.Context, *SetTitleRequest) (*SetTitleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTitle not implemented")
}
func (UnimplementedStreamDServer) SetDescription(context.Context, *SetDescriptionRequest) (*SetDescriptionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDescription not implemented")
}
func (UnimplementedStreamDServer) ApplyProfile(context.Context, *ApplyProfileRequest) (*ApplyProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyProfile not implemented")
}
func (UnimplementedStreamDServer) UpdateStream(context.Context, *UpdateStreamRequest) (*UpdateStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedStreamDServer) GetVariable(context.Context, *GetVariableRequest) (*GetVariableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariable not implemented")
}
func (UnimplementedStreamDServer) GetVariableHash(context.Context, *GetVariableHashRequest) (*GetVariableHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariableHash not implemented")
}
func (UnimplementedStreamDServer) SetVariable(context.Context, *SetVariableRequest) (*SetVariableReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVariable not implemented")
}
func (UnimplementedStreamDServer) SubscribeToVariable(*SubscribeToVariableRequest, StreamD_SubscribeToVariableServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToVariable not implemented")
}
func (UnimplementedStreamDServer) EXPERIMENTAL_ReinitStreamControllers(context.Context, *EXPERIMENTAL_ReinitStreamControllersRequest) (*EXPERIMENTAL_ReinitStreamControllersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EXPERIMENTAL_ReinitStreamControllers not implemented")
}
func (UnimplementedStreamDServer) SubscribeToOAuthRequests(*SubscribeToOAuthRequestsRequest, StreamD_SubscribeToOAuthRequestsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToOAuthRequests not implemented")
}
func (UnimplementedStreamDServer) SubmitOAuthCode(context.Context, *SubmitOAuthCodeRequest) (*SubmitOAuthCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOAuthCode not implemented")
}
func (UnimplementedStreamDServer) ListStreamServers(context.Context, *ListStreamServersRequest) (*ListStreamServersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamServers not implemented")
}
func (UnimplementedStreamDServer) StartStreamServer(context.Context, *StartStreamServerRequest) (*StartStreamServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStreamServer not implemented")
}
func (UnimplementedStreamDServer) StopStreamServer(context.Context, *StopStreamServerRequest) (*StopStreamServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStreamServer not implemented")
}
func (UnimplementedStreamDServer) SubscribeToStreamServersChanges(*SubscribeToStreamServersChangesRequest, StreamD_SubscribeToStreamServersChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToStreamServersChanges not implemented")
}
func (UnimplementedStreamDServer) ListStreamDestinations(context.Context, *ListStreamDestinationsRequest) (*ListStreamDestinationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamDestinations not implemented")
}
func (UnimplementedStreamDServer) AddStreamDestination(context.Context, *AddStreamDestinationRequest) (*AddStreamDestinationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamDestination not implemented")
}
func (UnimplementedStreamDServer) UpdateStreamDestination(context.Context, *UpdateStreamDestinationRequest) (*UpdateStreamDestinationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamDestination not implemented")
}
func (UnimplementedStreamDServer) RemoveStreamDestination(context.Context, *RemoveStreamDestinationRequest) (*RemoveStreamDestinationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamDestination not implemented")
}
func (UnimplementedStreamDServer) SubscribeToStreamDestinationsChanges(*SubscribeToStreamDestinationsChangesRequest, StreamD_SubscribeToStreamDestinationsChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToStreamDestinationsChanges not implemented")
}
func (UnimplementedStreamDServer) AddIncomingStream(context.Context, *AddIncomingStreamRequest) (*AddIncomingStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIncomingStream not implemented")
}
func (UnimplementedStreamDServer) RemoveIncomingStream(context.Context, *RemoveIncomingStreamRequest) (*RemoveIncomingStreamReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIncomingStream not implemented")
}
func (UnimplementedStreamDServer) ListIncomingStreams(context.Context, *ListIncomingStreamsRequest) (*ListIncomingStreamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIncomingStreams not implemented")
}
func (UnimplementedStreamDServer) SubscribeToIncomingStreamsChanges(*SubscribeToIncomingStreamsChangesRequest, StreamD_SubscribeToIncomingStreamsChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToIncomingStreamsChanges not implemented")
}
func (UnimplementedStreamDServer) ListStreamForwards(context.Context, *ListStreamForwardsRequest) (*ListStreamForwardsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamForwards not implemented")
}
func (UnimplementedStreamDServer) AddStreamForward(context.Context, *AddStreamForwardRequest) (*AddStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamForward not implemented")
}
func (UnimplementedStreamDServer) UpdateStreamForward(context.Context, *UpdateStreamForwardRequest) (*UpdateStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamForward not implemented")
}
func (UnimplementedStreamDServer) RemoveStreamForward(context.Context, *RemoveStreamForwardRequest) (*RemoveStreamForwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamForward not implemented")
}
func (UnimplementedStreamDServer) SubscribeToStreamForwardsChanges(*SubscribeToStreamForwardsChangesRequest, StreamD_SubscribeToStreamForwardsChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToStreamForwardsChanges not implemented")
}
func (UnimplementedStreamDServer) WaitForStreamPublisher(*WaitForStreamPublisherRequest, StreamD_WaitForStreamPublisherServer) error {
	return status.Errorf(codes.Unimplemented, "method WaitForStreamPublisher not implemented")
}
func (UnimplementedStreamDServer) AddStreamPlayer(context.Context, *AddStreamPlayerRequest) (*AddStreamPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStreamPlayer not implemented")
}
func (UnimplementedStreamDServer) RemoveStreamPlayer(context.Context, *RemoveStreamPlayerRequest) (*RemoveStreamPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStreamPlayer not implemented")
}
func (UnimplementedStreamDServer) UpdateStreamPlayer(context.Context, *UpdateStreamPlayerRequest) (*UpdateStreamPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamPlayer not implemented")
}
func (UnimplementedStreamDServer) ListStreamPlayers(context.Context, *ListStreamPlayersRequest) (*ListStreamPlayersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStreamPlayers not implemented")
}
func (UnimplementedStreamDServer) GetStreamPlayer(context.Context, *GetStreamPlayerRequest) (*GetStreamPlayerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamPlayer not implemented")
}
func (UnimplementedStreamDServer) SubscribeToStreamPlayersChanges(*SubscribeToStreamPlayersChangesRequest, StreamD_SubscribeToStreamPlayersChangesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToStreamPlayersChanges not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerOpen(context.Context, *StreamPlayerOpenRequest) (*StreamPlayerOpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerOpen not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerProcessTitle(context.Context, *StreamPlayerProcessTitleRequest) (*StreamPlayerProcessTitleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerProcessTitle not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerGetLink(context.Context, *StreamPlayerGetLinkRequest) (*StreamPlayerGetLinkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerGetLink not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerEndChan(*StreamPlayerEndChanRequest, StreamD_StreamPlayerEndChanServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlayerEndChan not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerIsEnded(context.Context, *StreamPlayerIsEndedRequest) (*StreamPlayerIsEndedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerIsEnded not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerGetPosition(context.Context, *StreamPlayerGetPositionRequest) (*StreamPlayerGetPositionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerGetPosition not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerGetLength(context.Context, *StreamPlayerGetLengthRequest) (*StreamPlayerGetLengthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerGetLength not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerSetSpeed(context.Context, *StreamPlayerSetSpeedRequest) (*StreamPlayerSetSpeedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerSetSpeed not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerSetPause(context.Context, *StreamPlayerSetPauseRequest) (*StreamPlayerSetPauseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerSetPause not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerStop(context.Context, *StreamPlayerStopRequest) (*StreamPlayerStopReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerStop not implemented")
}
func (UnimplementedStreamDServer) StreamPlayerClose(context.Context, *StreamPlayerCloseRequest) (*StreamPlayerCloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamPlayerClose not implemented")
}
func (UnimplementedStreamDServer) AddTimer(context.Context, *AddTimerRequest) (*AddTimerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTimer not implemented")
}
func (UnimplementedStreamDServer) RemoveTimer(context.Context, *RemoveTimerRequest) (*RemoveTimerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTimer not implemented")
}
func (UnimplementedStreamDServer) ListTimers(context.Context, *ListTimersRequest) (*ListTimersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimers not implemented")
}
func (UnimplementedStreamDServer) ListTriggerRules(context.Context, *ListTriggerRulesRequest) (*ListTriggerRulesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTriggerRules not implemented")
}
func (UnimplementedStreamDServer) AddTriggerRule(context.Context, *AddTriggerRuleRequest) (*AddTriggerRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTriggerRule not implemented")
}
func (UnimplementedStreamDServer) RemoveTriggerRule(context.Context, *RemoveTriggerRuleRequest) (*RemoveTriggerRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTriggerRule not implemented")
}
func (UnimplementedStreamDServer) UpdateTriggerRule(context.Context, *UpdateTriggerRuleRequest) (*UpdateTriggerRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTriggerRule not implemented")
}
func (UnimplementedStreamDServer) SubmitEvent(context.Context, *SubmitEventRequest) (*SubmitEventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEvent not implemented")
}
func (UnimplementedStreamDServer) SubscribeToChatMessages(*SubscribeToChatMessagesRequest, StreamD_SubscribeToChatMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToChatMessages not implemented")
}
func (UnimplementedStreamDServer) SendChatMessage(context.Context, *SendChatMessageRequest) (*SendChatMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatMessage not implemented")
}
func (UnimplementedStreamDServer) RemoveChatMessage(context.Context, *RemoveChatMessageRequest) (*RemoveChatMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatMessage not implemented")
}
func (UnimplementedStreamDServer) BanUser(context.Context, *BanUserRequest) (*BanUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanUser not implemented")
}
func (UnimplementedStreamDServer) Shoutout(context.Context, *ShoutoutRequest) (*ShoutoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shoutout not implemented")
}
func (UnimplementedStreamDServer) RaidTo(context.Context, *RaidToRequest) (*RaidToReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RaidTo not implemented")
}
func (UnimplementedStreamDServer) GetPeerIDs(context.Context, *GetPeerIDsRequest) (*GetPeerIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerIDs not implemented")
}
func (UnimplementedStreamDServer) LLMGenerate(context.Context, *LLMGenerateRequest) (*LLMGenerateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LLMGenerate not implemented")
}
func (UnimplementedStreamDServer) mustEmbedUnimplementedStreamDServer() {}

// UnsafeStreamDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDServer will
// result in compilation errors.
type UnsafeStreamDServer interface {
	mustEmbedUnimplementedStreamDServer()
}

func RegisterStreamDServer(s grpc.ServiceRegistrar, srv StreamDServer) {
	s.RegisterService(&StreamD_ServiceDesc, srv)
}

func _StreamD_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetLoggingLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLoggingLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetLoggingLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SetLoggingLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetLoggingLevel(ctx, req.(*SetLoggingLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetLoggingLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoggingLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetLoggingLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetLoggingLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetLoggingLevel(ctx, req.(*GetLoggingLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetConfig(ctx, req.(*GetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SaveConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SaveConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SaveConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SaveConfig(ctx, req.(*SaveConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToConfigChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToConfigChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToConfigChanges(m, &streamDSubscribeToConfigChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToConfigChangesServer interface {
	Send(*ConfigChange) error
	grpc.ServerStream
}

type streamDSubscribeToConfigChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToConfigChangesServer) Send(m *ConfigChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_ResetCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ResetCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ResetCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ResetCache(ctx, req.(*ResetCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_InitCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).InitCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_InitCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).InitCache(ctx, req.(*InitCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StartStreamByProfileName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamByProfileNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StartStreamByProfileName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StartStreamByProfileName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StartStreamByProfileName(ctx, req.(*StartStreamByProfileNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_EndStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).EndStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_EndStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).EndStream(ctx, req.(*EndStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetStreamStatus(ctx, req.(*GetStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_IsBackendEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsBackendEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).IsBackendEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_IsBackendEnabled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).IsBackendEnabled(ctx, req.(*IsBackendEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetBackendInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackendInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetBackendInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetBackendInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetBackendInfo(ctx, req.(*GetBackendInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToStreamsChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToStreamsChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToStreamsChanges(m, &streamDSubscribeToStreamsChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToStreamsChangesServer interface {
	Send(*StreamsChange) error
	grpc.ServerStream
}

type streamDSubscribeToStreamsChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToStreamsChangesServer) Send(m *StreamsChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).Restart(ctx, req.(*RestartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SetTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetTitle(ctx, req.(*SetTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SetDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetDescription(ctx, req.(*SetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ApplyProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ApplyProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ApplyProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ApplyProfile(ctx, req.(*ApplyProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_UpdateStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStream(ctx, req.(*UpdateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetVariable(ctx, req.(*GetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetVariableHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariableHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetVariableHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetVariableHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetVariableHash(ctx, req.(*GetVariableHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SetVariable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVariableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SetVariable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SetVariable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SetVariable(ctx, req.(*SetVariableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToVariable_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToVariableRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToVariable(m, &streamDSubscribeToVariableServer{ServerStream: stream})
}

type StreamD_SubscribeToVariableServer interface {
	Send(*VariableChange) error
	grpc.ServerStream
}

type streamDSubscribeToVariableServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToVariableServer) Send(m *VariableChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_EXPERIMENTAL_ReinitStreamControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EXPERIMENTAL_ReinitStreamControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).EXPERIMENTAL_ReinitStreamControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_EXPERIMENTAL_ReinitStreamControllers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).EXPERIMENTAL_ReinitStreamControllers(ctx, req.(*EXPERIMENTAL_ReinitStreamControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToOAuthRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToOAuthRequestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToOAuthRequests(m, &streamDSubscribeToOAuthRequestsServer{ServerStream: stream})
}

type StreamD_SubscribeToOAuthRequestsServer interface {
	Send(*OAuthRequest) error
	grpc.ServerStream
}

type streamDSubscribeToOAuthRequestsServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToOAuthRequestsServer) Send(m *OAuthRequest) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_SubmitOAuthCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOAuthCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SubmitOAuthCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SubmitOAuthCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SubmitOAuthCode(ctx, req.(*SubmitOAuthCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListStreamServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListStreamServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamServers(ctx, req.(*ListStreamServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StartStreamServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StartStreamServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StartStreamServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StartStreamServer(ctx, req.(*StartStreamServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StopStreamServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StopStreamServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StopStreamServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StopStreamServer(ctx, req.(*StopStreamServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToStreamServersChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToStreamServersChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToStreamServersChanges(m, &streamDSubscribeToStreamServersChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToStreamServersChangesServer interface {
	Send(*StreamServersChange) error
	grpc.ServerStream
}

type streamDSubscribeToStreamServersChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToStreamServersChangesServer) Send(m *StreamServersChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_ListStreamDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListStreamDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamDestinations(ctx, req.(*ListStreamDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddStreamDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddStreamDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddStreamDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddStreamDestination(ctx, req.(*AddStreamDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStreamDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStreamDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_UpdateStreamDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStreamDestination(ctx, req.(*UpdateStreamDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveStreamDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveStreamDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveStreamDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveStreamDestination(ctx, req.(*RemoveStreamDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToStreamDestinationsChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToStreamDestinationsChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToStreamDestinationsChanges(m, &streamDSubscribeToStreamDestinationsChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToStreamDestinationsChangesServer interface {
	Send(*StreamDestinationsChange) error
	grpc.ServerStream
}

type streamDSubscribeToStreamDestinationsChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToStreamDestinationsChangesServer) Send(m *StreamDestinationsChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_AddIncomingStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIncomingStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddIncomingStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddIncomingStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddIncomingStream(ctx, req.(*AddIncomingStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveIncomingStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveIncomingStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveIncomingStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveIncomingStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveIncomingStream(ctx, req.(*RemoveIncomingStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListIncomingStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIncomingStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListIncomingStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListIncomingStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListIncomingStreams(ctx, req.(*ListIncomingStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToIncomingStreamsChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToIncomingStreamsChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToIncomingStreamsChanges(m, &streamDSubscribeToIncomingStreamsChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToIncomingStreamsChangesServer interface {
	Send(*IncomingStreamsChange) error
	grpc.ServerStream
}

type streamDSubscribeToIncomingStreamsChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToIncomingStreamsChangesServer) Send(m *IncomingStreamsChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_ListStreamForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamForwardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListStreamForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamForwards(ctx, req.(*ListStreamForwardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddStreamForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddStreamForward(ctx, req.(*AddStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_UpdateStreamForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStreamForward(ctx, req.(*UpdateStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveStreamForward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamForwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveStreamForward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveStreamForward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveStreamForward(ctx, req.(*RemoveStreamForwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToStreamForwardsChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToStreamForwardsChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToStreamForwardsChanges(m, &streamDSubscribeToStreamForwardsChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToStreamForwardsChangesServer interface {
	Send(*StreamForwardsChange) error
	grpc.ServerStream
}

type streamDSubscribeToStreamForwardsChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToStreamForwardsChangesServer) Send(m *StreamForwardsChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_WaitForStreamPublisher_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WaitForStreamPublisherRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).WaitForStreamPublisher(m, &streamDWaitForStreamPublisherServer{ServerStream: stream})
}

type StreamD_WaitForStreamPublisherServer interface {
	Send(*StreamPublisher) error
	grpc.ServerStream
}

type streamDWaitForStreamPublisherServer struct {
	grpc.ServerStream
}

func (x *streamDWaitForStreamPublisherServer) Send(m *StreamPublisher) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_AddStreamPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStreamPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddStreamPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddStreamPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddStreamPlayer(ctx, req.(*AddStreamPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveStreamPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStreamPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveStreamPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveStreamPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveStreamPlayer(ctx, req.(*RemoveStreamPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateStreamPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateStreamPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_UpdateStreamPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateStreamPlayer(ctx, req.(*UpdateStreamPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListStreamPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStreamPlayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListStreamPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListStreamPlayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListStreamPlayers(ctx, req.(*ListStreamPlayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetStreamPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetStreamPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetStreamPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetStreamPlayer(ctx, req.(*GetStreamPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToStreamPlayersChanges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToStreamPlayersChangesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToStreamPlayersChanges(m, &streamDSubscribeToStreamPlayersChangesServer{ServerStream: stream})
}

type StreamD_SubscribeToStreamPlayersChangesServer interface {
	Send(*StreamPlayersChange) error
	grpc.ServerStream
}

type streamDSubscribeToStreamPlayersChangesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToStreamPlayersChangesServer) Send(m *StreamPlayersChange) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_StreamPlayerOpen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerOpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerOpen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerOpen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerOpen(ctx, req.(*StreamPlayerOpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerProcessTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerProcessTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerProcessTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerProcessTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerProcessTitle(ctx, req.(*StreamPlayerProcessTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerGetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerGetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerGetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerGetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerGetLink(ctx, req.(*StreamPlayerGetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerEndChan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPlayerEndChanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).StreamPlayerEndChan(m, &streamDStreamPlayerEndChanServer{ServerStream: stream})
}

type StreamD_StreamPlayerEndChanServer interface {
	Send(*StreamPlayerEndChanReply) error
	grpc.ServerStream
}

type streamDStreamPlayerEndChanServer struct {
	grpc.ServerStream
}

func (x *streamDStreamPlayerEndChanServer) Send(m *StreamPlayerEndChanReply) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_StreamPlayerIsEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerIsEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerIsEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerIsEnded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerIsEnded(ctx, req.(*StreamPlayerIsEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerGetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerGetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerGetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerGetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerGetPosition(ctx, req.(*StreamPlayerGetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerGetLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerGetLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerGetLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerGetLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerGetLength(ctx, req.(*StreamPlayerGetLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerSetSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerSetSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerSetSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerSetSpeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerSetSpeed(ctx, req.(*StreamPlayerSetSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerSetPause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerSetPauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerSetPause(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerSetPause_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerSetPause(ctx, req.(*StreamPlayerSetPauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerStop(ctx, req.(*StreamPlayerStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_StreamPlayerClose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamPlayerCloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).StreamPlayerClose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_StreamPlayerClose_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).StreamPlayerClose(ctx, req.(*StreamPlayerCloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddTimer(ctx, req.(*AddTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveTimer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTimerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveTimer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveTimer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveTimer(ctx, req.(*RemoveTimerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListTimers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListTimers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListTimers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListTimers(ctx, req.(*ListTimersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_ListTriggerRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTriggerRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).ListTriggerRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_ListTriggerRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).ListTriggerRules(ctx, req.(*ListTriggerRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_AddTriggerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTriggerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).AddTriggerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_AddTriggerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).AddTriggerRule(ctx, req.(*AddTriggerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveTriggerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTriggerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveTriggerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveTriggerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveTriggerRule(ctx, req.(*RemoveTriggerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_UpdateTriggerRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTriggerRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).UpdateTriggerRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_UpdateTriggerRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).UpdateTriggerRule(ctx, req.(*UpdateTriggerRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubmitEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SubmitEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SubmitEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SubmitEvent(ctx, req.(*SubmitEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_SubscribeToChatMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToChatMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamDServer).SubscribeToChatMessages(m, &streamDSubscribeToChatMessagesServer{ServerStream: stream})
}

type StreamD_SubscribeToChatMessagesServer interface {
	Send(*ChatMessage) error
	grpc.ServerStream
}

type streamDSubscribeToChatMessagesServer struct {
	grpc.ServerStream
}

func (x *streamDSubscribeToChatMessagesServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _StreamD_SendChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).SendChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_SendChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).SendChatMessage(ctx, req.(*SendChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RemoveChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveChatMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RemoveChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RemoveChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RemoveChatMessage(ctx, req.(*RemoveChatMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_BanUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).BanUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_BanUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).BanUser(ctx, req.(*BanUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_Shoutout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShoutoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).Shoutout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_Shoutout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).Shoutout(ctx, req.(*ShoutoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_RaidTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaidToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).RaidTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_RaidTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).RaidTo(ctx, req.(*RaidToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_GetPeerIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).GetPeerIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_GetPeerIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).GetPeerIDs(ctx, req.(*GetPeerIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamD_LLMGenerate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LLMGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamDServer).LLMGenerate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamD_LLMGenerate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamDServer).LLMGenerate(ctx, req.(*LLMGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamD_ServiceDesc is the grpc.ServiceDesc for StreamD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamd.StreamD",
	HandlerType: (*StreamDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _StreamD_Ping_Handler,
		},
		{
			MethodName: "SetLoggingLevel",
			Handler:    _StreamD_SetLoggingLevel_Handler,
		},
		{
			MethodName: "GetLoggingLevel",
			Handler:    _StreamD_GetLoggingLevel_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _StreamD_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _StreamD_SetConfig_Handler,
		},
		{
			MethodName: "SaveConfig",
			Handler:    _StreamD_SaveConfig_Handler,
		},
		{
			MethodName: "ResetCache",
			Handler:    _StreamD_ResetCache_Handler,
		},
		{
			MethodName: "InitCache",
			Handler:    _StreamD_InitCache_Handler,
		},
		{
			MethodName: "StartStream",
			Handler:    _StreamD_StartStream_Handler,
		},
		{
			MethodName: "StartStreamByProfileName",
			Handler:    _StreamD_StartStreamByProfileName_Handler,
		},
		{
			MethodName: "EndStream",
			Handler:    _StreamD_EndStream_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _StreamD_GetStreamStatus_Handler,
		},
		{
			MethodName: "IsBackendEnabled",
			Handler:    _StreamD_IsBackendEnabled_Handler,
		},
		{
			MethodName: "GetBackendInfo",
			Handler:    _StreamD_GetBackendInfo_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _StreamD_Restart_Handler,
		},
		{
			MethodName: "SetTitle",
			Handler:    _StreamD_SetTitle_Handler,
		},
		{
			MethodName: "SetDescription",
			Handler:    _StreamD_SetDescription_Handler,
		},
		{
			MethodName: "ApplyProfile",
			Handler:    _StreamD_ApplyProfile_Handler,
		},
		{
			MethodName: "UpdateStream",
			Handler:    _StreamD_UpdateStream_Handler,
		},
		{
			MethodName: "GetVariable",
			Handler:    _StreamD_GetVariable_Handler,
		},
		{
			MethodName: "GetVariableHash",
			Handler:    _StreamD_GetVariableHash_Handler,
		},
		{
			MethodName: "SetVariable",
			Handler:    _StreamD_SetVariable_Handler,
		},
		{
			MethodName: "EXPERIMENTAL_ReinitStreamControllers",
			Handler:    _StreamD_EXPERIMENTAL_ReinitStreamControllers_Handler,
		},
		{
			MethodName: "SubmitOAuthCode",
			Handler:    _StreamD_SubmitOAuthCode_Handler,
		},
		{
			MethodName: "ListStreamServers",
			Handler:    _StreamD_ListStreamServers_Handler,
		},
		{
			MethodName: "StartStreamServer",
			Handler:    _StreamD_StartStreamServer_Handler,
		},
		{
			MethodName: "StopStreamServer",
			Handler:    _StreamD_StopStreamServer_Handler,
		},
		{
			MethodName: "ListStreamDestinations",
			Handler:    _StreamD_ListStreamDestinations_Handler,
		},
		{
			MethodName: "AddStreamDestination",
			Handler:    _StreamD_AddStreamDestination_Handler,
		},
		{
			MethodName: "UpdateStreamDestination",
			Handler:    _StreamD_UpdateStreamDestination_Handler,
		},
		{
			MethodName: "RemoveStreamDestination",
			Handler:    _StreamD_RemoveStreamDestination_Handler,
		},
		{
			MethodName: "AddIncomingStream",
			Handler:    _StreamD_AddIncomingStream_Handler,
		},
		{
			MethodName: "RemoveIncomingStream",
			Handler:    _StreamD_RemoveIncomingStream_Handler,
		},
		{
			MethodName: "ListIncomingStreams",
			Handler:    _StreamD_ListIncomingStreams_Handler,
		},
		{
			MethodName: "ListStreamForwards",
			Handler:    _StreamD_ListStreamForwards_Handler,
		},
		{
			MethodName: "AddStreamForward",
			Handler:    _StreamD_AddStreamForward_Handler,
		},
		{
			MethodName: "UpdateStreamForward",
			Handler:    _StreamD_UpdateStreamForward_Handler,
		},
		{
			MethodName: "RemoveStreamForward",
			Handler:    _StreamD_RemoveStreamForward_Handler,
		},
		{
			MethodName: "AddStreamPlayer",
			Handler:    _StreamD_AddStreamPlayer_Handler,
		},
		{
			MethodName: "RemoveStreamPlayer",
			Handler:    _StreamD_RemoveStreamPlayer_Handler,
		},
		{
			MethodName: "UpdateStreamPlayer",
			Handler:    _StreamD_UpdateStreamPlayer_Handler,
		},
		{
			MethodName: "ListStreamPlayers",
			Handler:    _StreamD_ListStreamPlayers_Handler,
		},
		{
			MethodName: "GetStreamPlayer",
			Handler:    _StreamD_GetStreamPlayer_Handler,
		},
		{
			MethodName: "StreamPlayerOpen",
			Handler:    _StreamD_StreamPlayerOpen_Handler,
		},
		{
			MethodName: "StreamPlayerProcessTitle",
			Handler:    _StreamD_StreamPlayerProcessTitle_Handler,
		},
		{
			MethodName: "StreamPlayerGetLink",
			Handler:    _StreamD_StreamPlayerGetLink_Handler,
		},
		{
			MethodName: "StreamPlayerIsEnded",
			Handler:    _StreamD_StreamPlayerIsEnded_Handler,
		},
		{
			MethodName: "StreamPlayerGetPosition",
			Handler:    _StreamD_StreamPlayerGetPosition_Handler,
		},
		{
			MethodName: "StreamPlayerGetLength",
			Handler:    _StreamD_StreamPlayerGetLength_Handler,
		},
		{
			MethodName: "StreamPlayerSetSpeed",
			Handler:    _StreamD_StreamPlayerSetSpeed_Handler,
		},
		{
			MethodName: "StreamPlayerSetPause",
			Handler:    _StreamD_StreamPlayerSetPause_Handler,
		},
		{
			MethodName: "StreamPlayerStop",
			Handler:    _StreamD_StreamPlayerStop_Handler,
		},
		{
			MethodName: "StreamPlayerClose",
			Handler:    _StreamD_StreamPlayerClose_Handler,
		},
		{
			MethodName: "AddTimer",
			Handler:    _StreamD_AddTimer_Handler,
		},
		{
			MethodName: "RemoveTimer",
			Handler:    _StreamD_RemoveTimer_Handler,
		},
		{
			MethodName: "ListTimers",
			Handler:    _StreamD_ListTimers_Handler,
		},
		{
			MethodName: "ListTriggerRules",
			Handler:    _StreamD_ListTriggerRules_Handler,
		},
		{
			MethodName: "AddTriggerRule",
			Handler:    _StreamD_AddTriggerRule_Handler,
		},
		{
			MethodName: "RemoveTriggerRule",
			Handler:    _StreamD_RemoveTriggerRule_Handler,
		},
		{
			MethodName: "UpdateTriggerRule",
			Handler:    _StreamD_UpdateTriggerRule_Handler,
		},
		{
			MethodName: "SubmitEvent",
			Handler:    _StreamD_SubmitEvent_Handler,
		},
		{
			MethodName: "SendChatMessage",
			Handler:    _StreamD_SendChatMessage_Handler,
		},
		{
			MethodName: "RemoveChatMessage",
			Handler:    _StreamD_RemoveChatMessage_Handler,
		},
		{
			MethodName: "BanUser",
			Handler:    _StreamD_BanUser_Handler,
		},
		{
			MethodName: "Shoutout",
			Handler:    _StreamD_Shoutout_Handler,
		},
		{
			MethodName: "RaidTo",
			Handler:    _StreamD_RaidTo_Handler,
		},
		{
			MethodName: "GetPeerIDs",
			Handler:    _StreamD_GetPeerIDs_Handler,
		},
		{
			MethodName: "LLMGenerate",
			Handler:    _StreamD_LLMGenerate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToConfigChanges",
			Handler:       _StreamD_SubscribeToConfigChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToStreamsChanges",
			Handler:       _StreamD_SubscribeToStreamsChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToVariable",
			Handler:       _StreamD_SubscribeToVariable_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToOAuthRequests",
			Handler:       _StreamD_SubscribeToOAuthRequests_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToStreamServersChanges",
			Handler:       _StreamD_SubscribeToStreamServersChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToStreamDestinationsChanges",
			Handler:       _StreamD_SubscribeToStreamDestinationsChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToIncomingStreamsChanges",
			Handler:       _StreamD_SubscribeToIncomingStreamsChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToStreamForwardsChanges",
			Handler:       _StreamD_SubscribeToStreamForwardsChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WaitForStreamPublisher",
			Handler:       _StreamD_WaitForStreamPublisher_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToStreamPlayersChanges",
			Handler:       _StreamD_SubscribeToStreamPlayersChanges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPlayerEndChan",
			Handler:       _StreamD_StreamPlayerEndChan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToChatMessages",
			Handler:       _StreamD_SubscribeToChatMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "streamd.proto",
}
